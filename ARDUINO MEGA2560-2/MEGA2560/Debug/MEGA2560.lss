
MEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000266  00800200  00002b0e  00002ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800466  00800466  00002e08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fcd  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001615  00000000  00000000  000070fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f2f  00000000  00000000  00008712  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e4  00000000  00000000  0000a644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7f  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eea  00000000  00000000  0000bba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000ea91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ea c2       	rjmp	.+1492   	; 0x5d6 <__ctors_end>
       2:	00 00       	nop
       4:	09 c3       	rjmp	.+1554   	; 0x618 <__bad_interrupt>
       6:	00 00       	nop
       8:	07 c3       	rjmp	.+1550   	; 0x618 <__bad_interrupt>
       a:	00 00       	nop
       c:	05 c3       	rjmp	.+1546   	; 0x618 <__bad_interrupt>
       e:	00 00       	nop
      10:	03 c3       	rjmp	.+1542   	; 0x618 <__bad_interrupt>
      12:	00 00       	nop
      14:	01 c3       	rjmp	.+1538   	; 0x618 <__bad_interrupt>
      16:	00 00       	nop
      18:	ff c2       	rjmp	.+1534   	; 0x618 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fd c2       	rjmp	.+1530   	; 0x618 <__bad_interrupt>
      1e:	00 00       	nop
      20:	fb c2       	rjmp	.+1526   	; 0x618 <__bad_interrupt>
      22:	00 00       	nop
      24:	f9 c2       	rjmp	.+1522   	; 0x618 <__bad_interrupt>
      26:	00 00       	nop
      28:	f7 c2       	rjmp	.+1518   	; 0x618 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f5 c2       	rjmp	.+1514   	; 0x618 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f3 c2       	rjmp	.+1510   	; 0x618 <__bad_interrupt>
      32:	00 00       	nop
      34:	f1 c2       	rjmp	.+1506   	; 0x618 <__bad_interrupt>
      36:	00 00       	nop
      38:	ef c2       	rjmp	.+1502   	; 0x618 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ed c2       	rjmp	.+1498   	; 0x618 <__bad_interrupt>
      3e:	00 00       	nop
      40:	eb c2       	rjmp	.+1494   	; 0x618 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_17>
      48:	e7 c2       	rjmp	.+1486   	; 0x618 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e5 c2       	rjmp	.+1482   	; 0x618 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e3 c2       	rjmp	.+1478   	; 0x618 <__bad_interrupt>
      52:	00 00       	nop
      54:	e1 c2       	rjmp	.+1474   	; 0x618 <__bad_interrupt>
      56:	00 00       	nop
      58:	df c2       	rjmp	.+1470   	; 0x618 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	dd c2       	rjmp	.+1466   	; 0x618 <__bad_interrupt>
      5e:	00 00       	nop
      60:	db c2       	rjmp	.+1462   	; 0x618 <__bad_interrupt>
      62:	00 00       	nop
      64:	d9 c2       	rjmp	.+1458   	; 0x618 <__bad_interrupt>
      66:	00 00       	nop
      68:	d7 c2       	rjmp	.+1454   	; 0x618 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d5 c2       	rjmp	.+1450   	; 0x618 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d3 c2       	rjmp	.+1446   	; 0x618 <__bad_interrupt>
      72:	00 00       	nop
      74:	d1 c2       	rjmp	.+1442   	; 0x618 <__bad_interrupt>
      76:	00 00       	nop
      78:	cf c2       	rjmp	.+1438   	; 0x618 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cd c2       	rjmp	.+1434   	; 0x618 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cb c2       	rjmp	.+1430   	; 0x618 <__bad_interrupt>
      82:	00 00       	nop
      84:	c9 c2       	rjmp	.+1426   	; 0x618 <__bad_interrupt>
      86:	00 00       	nop
      88:	c7 c2       	rjmp	.+1422   	; 0x618 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c5 c2       	rjmp	.+1418   	; 0x618 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_36>
      94:	c1 c2       	rjmp	.+1410   	; 0x618 <__bad_interrupt>
      96:	00 00       	nop
      98:	bf c2       	rjmp	.+1406   	; 0x618 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bd c2       	rjmp	.+1402   	; 0x618 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bb c2       	rjmp	.+1398   	; 0x618 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b9 c2       	rjmp	.+1394   	; 0x618 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b7 c2       	rjmp	.+1390   	; 0x618 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b5 c2       	rjmp	.+1386   	; 0x618 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b3 c2       	rjmp	.+1382   	; 0x618 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b1 c2       	rjmp	.+1378   	; 0x618 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	af c2       	rjmp	.+1374   	; 0x618 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ad c2       	rjmp	.+1370   	; 0x618 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ab c2       	rjmp	.+1366   	; 0x618 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a9 c2       	rjmp	.+1362   	; 0x618 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a7 c2       	rjmp	.+1358   	; 0x618 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a5 c2       	rjmp	.+1354   	; 0x618 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a3 c2       	rjmp	.+1350   	; 0x618 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a1 c2       	rjmp	.+1346   	; 0x618 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9f c2       	rjmp	.+1342   	; 0x618 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9d c2       	rjmp	.+1338   	; 0x618 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9b c2       	rjmp	.+1334   	; 0x618 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	df 04       	cpc	r13, r15
      e6:	e6 04       	cpc	r14, r6
      e8:	f0 04       	cpc	r15, r0
      ea:	f0 04       	cpc	r15, r0
      ec:	f0 04       	cpc	r15, r0
      ee:	f0 04       	cpc	r15, r0
      f0:	f5 04       	cpc	r15, r5
      f2:	f8 04       	cpc	r15, r8
      f4:	fc 04       	cpc	r15, r12

000000f6 <__trampolines_end>:
      f6:	63 64       	ori	r22, 0x43	; 67
      f8:	69 6e       	ori	r22, 0xE9	; 233
      fa:	6f 70       	andi	r22, 0x0F	; 15
      fc:	73 75       	andi	r23, 0x53	; 83
      fe:	78 58       	subi	r23, 0x88	; 136
     100:	5b 00       	.word	0x005b	; ????

00000102 <__c.2751>:
     102:	20 4f 4b 20 0d 0a 00                                 OK ...

00000109 <__c.2737>:
     109:	2c 20 00                                            , .

0000010c <__c.2735>:
     10c:	25 78 00                                            %x.

0000010f <__c.2733>:
     10f:	30 78 00                                            0x.

00000112 <__c.2728>:
     112:	54 69 6d 65 64 20 6f 75 74 0d 0a 00                 Timed out...

0000011e <__c.2726>:
     11e:	3c 2d 20 00                                         <- .

00000122 <__c.2718>:
     122:	25 78 0d 0a 00                                      %x...

00000127 <__c.2716>:
     127:	2c 20 30 78 00                                      , 0x.

0000012c <__c.2714>:
     12c:	25 78 00                                            %x.

0000012f <__c.2712>:
     12f:	2c 20 30 78 00                                      , 0x.

00000134 <__c.2707>:
     134:	25 78 00                                            %x.

00000137 <__c.2705>:
     137:	2c 20 30 78 00                                      , 0x.

0000013c <__c.2701>:
     13c:	25 78 00                                            %x.

0000013f <__c.2699>:
     13f:	2c 20 30 78 00                                      , 0x.

00000144 <__c.2697>:
     144:	25 78 00                                            %x.

00000147 <__c.2695>:
     147:	2c 20 30 78 00                                      , 0x.

0000014c <__c.2693>:
     14c:	25 78 00                                            %x.

0000014f <__c.2691>:
     14f:	2c 20 30 78 00                                      , 0x.

00000154 <__c.2689>:
     154:	25 78 00                                            %x.

00000157 <__c.2687>:
     157:	2c 20 30 78 00                                      , 0x.

0000015c <__c.2685>:
     15c:	25 78 00                                            %x.

0000015f <__c.2683>:
     15f:	2c 20 30 78 00                                      , 0x.

00000164 <__c.2681>:
     164:	25 78 00                                            %x.

00000167 <__c.2679>:
     167:	2c 20 30 78 00                                      , 0x.

0000016c <__c.2677>:
     16c:	25 78 00                                            %x.

0000016f <__c.2675>:
     16f:	2c 20 30 78 00                                      , 0x.

00000174 <__c.2673>:
     174:	25 78 00                                            %x.

00000177 <__c.2671>:
     177:	2c 20 30 78 00                                      , 0x.

0000017c <__c.2669>:
     17c:	25 78 00                                            %x.

0000017f <__c.2667>:
     17f:	2d 3e 20 30 78 00                                   -> 0x.

00000185 <__c.2585>:
     185:	25 75 0d 0a 00                                      %u...

0000018a <__c.2583>:
     18a:	42 61 75 64 20 72 61 74 65 3a 20 00                 Baud rate: .

00000196 <__c.2581>:
     196:	25 69 0d 0a 00                                      %i...

0000019b <__c.2579>:
     19b:	50 61 63 6b 65 74 20 6c 65 6e 3a 20 00              Packet len: .

000001a8 <__c.2577>:
     1a8:	25 6c 78 0d 0a 00                                   %lx...

000001ae <__c.2575>:
     1ae:	44 65 76 69 63 65 20 61 64 64 72 65 73 73 3a 20     Device address: 
	...

000001bf <__c.2573>:
     1bf:	25 75 0d 0a 00                                      %u...

000001c4 <__c.2571>:
     1c4:	53 65 63 75 72 69 74 79 20 6c 65 76 65 6c 3a 20     Security level: 
	...

000001d5 <__c.2569>:
     1d5:	25 69 0d 0a 00                                      %i...

000001da <__c.2567>:
     1da:	43 61 70 61 63 69 74 79 3a 20 00                    Capacity: .

000001e5 <__c.2565>:
     1e5:	25 78 0d 0a 00                                      %x...

000001ea <__c.2563>:
     1ea:	53 79 73 20 49 44 3a 20 30 78 00                    Sys ID: 0x.

000001f5 <__c.2561>:
     1f5:	25 78 0d 0a 00                                      %x...

000001fa <__c.2559>:
     1fa:	53 74 61 74 75 73 3a 20 30 78 00                    Status: 0x.

00000205 <__c.2557>:
     205:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 20 70     Reading sensor p
     215:	61 72 61 6d 65 74 65 72 73 0d 0a 00                 arameters...

00000221 <__c.2552>:
     221:	25 69 0d 0a 00                                      %i...

00000226 <__c.2550>:
     226:	54 65 6d 70 6c 61 74 65 20 43 6f 75 6e 74 3a 20     Template Count: 
	...

00000237 <__c.2545>:
     237:	44 69 64 20 6e 6f 74 20 66 69 6e 64 20 66 69 6e     Did not find fin
     247:	67 65 72 70 72 69 6e 74 20 73 65 6e 73 6f 72 20     gerprint sensor 
     257:	3a 28 0d 0a 00                                      :(...

0000025c <__c.2543>:
     25c:	46 6f 75 6e 64 20 66 69 6e 67 65 72 70 72 69 6e     Found fingerprin
     26c:	74 20 73 65 6e 73 6f 72 21 0d 0a 00                 t sensor!...

00000278 <__c.2538>:
     278:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

00000288 <__c.2536>:
     288:	45 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     Error writing to
     298:	20 66 6c 61 73 68 0d 0a 00                           flash...

000002a1 <__c.2534>:
     2a1:	43 6f 75 6c 64 20 6e 6f 74 20 73 74 6f 72 65 20     Could not store 
     2b1:	69 6e 20 74 68 61 74 20 6c 6f 63 61 74 69 6f 6e     in that location
     2c1:	0d 0a 00                                            ...

000002c4 <__c.2532>:
     2c4:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     2d4:	72 6f 72 0d 0a 00                                   ror...

000002da <__c.2530>:
     2da:	53 74 6f 72 65 64 21 0d 0a 00                       Stored!...

000002e4 <__c.2524>:
     2e4:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

000002f4 <__c.2522>:
     2f4:	46 69 6e 67 65 72 70 72 69 6e 74 73 20 64 69 64     Fingerprints did
     304:	20 6e 6f 74 20 6d 61 74 63 68 0d 0a 00               not match...

00000311 <__c.2520>:
     311:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     321:	72 6f 72 0d 0a 00                                   ror...

00000327 <__c.2528>:
     327:	25 69 0d 0a 00                                      %i...

0000032c <__c.2526>:
     32c:	49 44 20 00                                         ID .

00000330 <__c.2518>:
     330:	50 72 69 6e 74 73 20 6d 61 74 63 68 65 64 21 0d     Prints matched!.
     340:	0a 00                                               ..

00000342 <__c.2512>:
     342:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

00000352 <__c.2509>:
     352:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66     Could not find f
     362:	69 6e 67 65 72 70 72 69 6e 74 20 66 65 61 74 75     ingerprint featu
     372:	72 65 73 0d 0a 00                                   res...

00000378 <__c.2506>:
     378:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66     Could not find f
     388:	69 6e 67 65 72 70 72 69 6e 74 20 66 65 61 74 75     ingerprint featu
     398:	72 65 73 0d 0a 00                                   res...

0000039e <__c.2503>:
     39e:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     3ae:	72 6f 72 0d 0a 00                                   ror...

000003b4 <__c.2500>:
     3b4:	49 6d 61 67 65 20 74 6f 6f 20 6d 65 73 73 79 0d     Image too messy.
     3c4:	0a 00                                               ..

000003c6 <__c.2516>:
     3c6:	25 69 0d 0a 00                                      %i...

000003cb <__c.2514>:
     3cb:	43 72 65 61 74 69 6e 67 20 6d 6f 64 65 6c 20 66     Creating model f
     3db:	6f 72 20 23 20 00                                   or # .

000003e1 <__c.2496>:
     3e1:	49 6d 61 67 65 20 63 6f 6e 76 65 72 74 65 64 0d     Image converted.
     3f1:	0a 00                                               ..

000003f3 <__c.2490>:
     3f3:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

00000403 <__c.2487>:
     403:	49 6d 61 67 69 6e 67 20 65 72 72 6f 72 0d 0a 00     Imaging error...

00000413 <__c.2484>:
     413:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     423:	72 6f 72 0d 0a 00                                   ror...

00000429 <__c.2481>:
     429:	2e 0d 0a 00                                         ....

0000042d <__c.2477>:
     42d:	49 6d 61 67 65 20 74 61 6b 65 6e 0d 0a 00           Image taken...

0000043b <__c.2474>:
     43b:	50 6c 61 63 65 20 73 61 6d 65 20 66 69 6e 67 65     Place same finge
     44b:	72 20 61 67 61 69 6e 0d 0a 00                       r again...

00000455 <__c.2472>:
     455:	25 69 0d 0a 00                                      %i...

0000045a <__c.2470>:
     45a:	49 44 20 00                                         ID .

0000045e <__c.2463>:
     45e:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

0000046e <__c.2460>:
     46e:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66     Could not find f
     47e:	69 6e 67 65 72 70 72 69 6e 74 20 66 65 61 74 75     ingerprint featu
     48e:	72 65 73 0d 0a 00                                   res...

00000494 <__c.2457>:
     494:	43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66     Could not find f
     4a4:	69 6e 67 65 72 70 72 69 6e 74 20 66 65 61 74 75     ingerprint featu
     4b4:	72 65 73 0d 0a 00                                   res...

000004ba <__c.2454>:
     4ba:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     4ca:	72 6f 72 0d 0a 00                                   ror...

000004d0 <__c.2451>:
     4d0:	49 6d 61 67 65 20 74 6f 6f 20 6d 65 73 73 79 0d     Image too messy.
     4e0:	0a 00                                               ..

000004e2 <__c.2465>:
     4e2:	52 65 6d 6f 76 65 20 66 69 6e 67 65 72 0d 0a 00     Remove finger...

000004f2 <__c.2447>:
     4f2:	49 6d 61 67 65 20 63 6f 6e 76 65 72 74 65 64 0d     Image converted.
     502:	0a 00                                               ..

00000504 <__c.2441>:
     504:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 0d 0a 00     Unknown error...

00000514 <__c.2438>:
     514:	49 6d 61 67 69 6e 67 20 65 72 72 6f 72 0d 0a 00     Imaging error...

00000524 <__c.2435>:
     524:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 65 72     Communication er
     534:	72 6f 72 0d 0a 00                                   ror...

0000053a <__c.2432>:
     53a:	2e 0d 0a 00                                         ....

0000053e <__c.2428>:
     53e:	49 6d 61 67 65 20 74 61 6b 65 6e 0d 0a 00           Image taken...

0000054c <__c.2425>:
     54c:	25 78 0d 0a 00                                      %x...

00000551 <__c.2423>:
     551:	57 61 69 74 69 6e 67 20 66 6f 72 20 76 61 6c 69     Waiting for vali
     561:	64 20 66 69 6e 67 65 72 20 74 6f 20 65 6e 72 6f     d finger to enro
     571:	6c 6c 20 61 73 20 23 00                             ll as #.

00000579 <__c.2413>:
     579:	25 69 0d 0a 00                                      %i...

0000057e <__c.2411>:
     57e:	20 77 69 74 68 20 63 6f 6e 66 69 64 65 6e 63 65      with confidence
     58e:	20 6f 66 20 00                                       of .

00000593 <__c.2409>:
     593:	25 69 0d 0a 00                                      %i...

00000598 <__c.2407>:
     598:	46 6f 75 6e 64 20 49 44 20 23 20 00                 Found ID # .

000005a4 <__c.2564>:
     5a4:	63 6c 65 61 72 69 6e 67 20 61 6c 6c 20 66 69 6e     clearing all fin
     5b4:	67 65 72 20 70 72 69 6e 74 73 0d 0a 00              ger prints...

000005c1 <__c.2548>:
     5c1:	41 6c 6c 20 54 72 69 65 73 20 45 78 70 69 72 65     All Tries Expire
     5d1:	64 0d 0a 00 00                                      d....

000005d6 <__ctors_end>:
     5d6:	11 24       	eor	r1, r1
     5d8:	1f be       	out	0x3f, r1	; 63
     5da:	cf ef       	ldi	r28, 0xFF	; 255
     5dc:	d1 e2       	ldi	r29, 0x21	; 33
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	00 e0       	ldi	r16, 0x00	; 0
     5e4:	0c bf       	out	0x3c, r16	; 60

000005e6 <__do_copy_data>:
     5e6:	14 e0       	ldi	r17, 0x04	; 4
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b2 e0       	ldi	r27, 0x02	; 2
     5ec:	ee e0       	ldi	r30, 0x0E	; 14
     5ee:	fb e2       	ldi	r31, 0x2B	; 43
     5f0:	00 e0       	ldi	r16, 0x00	; 0
     5f2:	0b bf       	out	0x3b, r16	; 59
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__do_copy_data+0x14>
     5f6:	07 90       	elpm	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	a6 36       	cpi	r26, 0x66	; 102
     5fc:	b1 07       	cpc	r27, r17
     5fe:	d9 f7       	brne	.-10     	; 0x5f6 <__do_copy_data+0x10>

00000600 <__do_clear_bss>:
     600:	25 e0       	ldi	r18, 0x05	; 5
     602:	a6 e6       	ldi	r26, 0x66	; 102
     604:	b4 e0       	ldi	r27, 0x04	; 4
     606:	01 c0       	rjmp	.+2      	; 0x60a <.do_clear_bss_start>

00000608 <.do_clear_bss_loop>:
     608:	1d 92       	st	X+, r1

0000060a <.do_clear_bss_start>:
     60a:	a2 31       	cpi	r26, 0x12	; 18
     60c:	b2 07       	cpc	r27, r18
     60e:	e1 f7       	brne	.-8      	; 0x608 <.do_clear_bss_loop>
     610:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <main>
     614:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <_exit>

00000618 <__bad_interrupt>:
     618:	f3 cc       	rjmp	.-1562   	; 0x0 <__vectors>

0000061a <Make_Packet>:
	// found a match!
	printf_P(PSTR("Found ID # ")); printf_P(PSTR("%i\r\n"),fingerID);
	printf_P(PSTR(" with confidence of ")); printf_P(PSTR("%i\r\n"),confidence);

	return fingerID;
}
     61a:	a6 e6       	ldi	r26, 0x66	; 102
     61c:	b4 e0       	ldi	r27, 0x04	; 4
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	3f ee       	ldi	r19, 0xEF	; 239
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	3c 93       	st	X, r19
     626:	2e 93       	st	-X, r18
     628:	16 96       	adiw	r26, 0x06	; 6
     62a:	8c 93       	st	X, r24
     62c:	16 97       	sbiw	r26, 0x06	; 6
     62e:	18 96       	adiw	r26, 0x08	; 8
     630:	7c 93       	st	X, r23
     632:	6e 93       	st	-X, r22
     634:	17 97       	sbiw	r26, 0x07	; 7
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	8c 93       	st	X, r24
     63c:	12 97       	sbiw	r26, 0x02	; 2
     63e:	13 96       	adiw	r26, 0x03	; 3
     640:	8c 93       	st	X, r24
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	14 96       	adiw	r26, 0x04	; 4
     646:	8c 93       	st	X, r24
     648:	14 97       	sbiw	r26, 0x04	; 4
     64a:	15 96       	adiw	r26, 0x05	; 5
     64c:	8c 93       	st	X, r24
     64e:	60 34       	cpi	r22, 0x40	; 64
     650:	71 05       	cpc	r23, r1
     652:	40 f4       	brcc	.+16     	; 0x664 <Make_Packet+0x4a>
     654:	fa 01       	movw	r30, r20
     656:	ab 01       	movw	r20, r22
     658:	bf 01       	movw	r22, r30
     65a:	8f e6       	ldi	r24, 0x6F	; 111
     65c:	94 e0       	ldi	r25, 0x04	; 4
     65e:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <memcpy>
     662:	08 95       	ret
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	fa 01       	movw	r30, r20
     668:	af e6       	ldi	r26, 0x6F	; 111
     66a:	b4 e0       	ldi	r27, 0x04	; 4
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <Make_Packet+0x52>
     674:	08 95       	ret

00000676 <FP_writeStructuredPacket>:
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	c6 e6       	ldi	r28, 0x66	; 102
     68e:	d4 e0       	ldi	r29, 0x04	; 4
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	e5 d7       	rcall	.+4042   	; 0x165e <fp_putch>
     694:	88 81       	ld	r24, Y
     696:	e3 d7       	rcall	.+4038   	; 0x165e <fp_putch>
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	e1 d7       	rcall	.+4034   	; 0x165e <fp_putch>
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	df d7       	rcall	.+4030   	; 0x165e <fp_putch>
     6a0:	8c 81       	ldd	r24, Y+4	; 0x04
     6a2:	dd d7       	rcall	.+4026   	; 0x165e <fp_putch>
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	db d7       	rcall	.+4022   	; 0x165e <fp_putch>
     6a8:	8e 81       	ldd	r24, Y+6	; 0x06
     6aa:	d9 d7       	rcall	.+4018   	; 0x165e <fp_putch>
     6ac:	cf 80       	ldd	r12, Y+7	; 0x07
     6ae:	d8 84       	ldd	r13, Y+8	; 0x08
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	c8 0e       	add	r12, r24
     6b4:	d1 1c       	adc	r13, r1
     6b6:	ed 2c       	mov	r14, r13
     6b8:	ff 24       	eor	r15, r15
     6ba:	8e 2d       	mov	r24, r14
     6bc:	d0 d7       	rcall	.+4000   	; 0x165e <fp_putch>
     6be:	8c 2d       	mov	r24, r12
     6c0:	ce d7       	rcall	.+3996   	; 0x165e <fp_putch>
     6c2:	8f e7       	ldi	r24, 0x7F	; 127
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	1f 92       	push	r1
     6d2:	8f 93       	push	r24
     6d4:	8c e7       	ldi	r24, 0x7C	; 124
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     6e0:	87 e7       	ldi	r24, 0x77	; 119
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     6ec:	88 81       	ld	r24, Y
     6ee:	99 81       	ldd	r25, Y+1	; 0x01
     6f0:	99 27       	eor	r25, r25
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	84 e7       	ldi	r24, 0x74	; 116
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     702:	8f e6       	ldi	r24, 0x6F	; 111
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	1f 92       	push	r1
     712:	8f 93       	push	r24
     714:	8c e6       	ldi	r24, 0x6C	; 108
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     720:	87 e6       	ldi	r24, 0x67	; 103
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	1f 92       	push	r1
     730:	8f 93       	push	r24
     732:	84 e6       	ldi	r24, 0x64	; 100
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     73e:	8f e5       	ldi	r24, 0x5F	; 95
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     74a:	8c 81       	ldd	r24, Y+4	; 0x04
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	8c e5       	ldi	r24, 0x5C	; 92
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     75c:	87 e5       	ldi	r24, 0x57	; 87
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     768:	ed b7       	in	r30, 0x3d	; 61
     76a:	fe b7       	in	r31, 0x3e	; 62
     76c:	b0 96       	adiw	r30, 0x20	; 32
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	fe bf       	out	0x3e, r31	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	ed bf       	out	0x3d, r30	; 61
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	84 e5       	ldi	r24, 0x54	; 84
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     78a:	8f e4       	ldi	r24, 0x4F	; 79
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	1f 92       	push	r1
     79a:	8f 93       	push	r24
     79c:	8c e4       	ldi	r24, 0x4C	; 76
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     7a8:	87 e4       	ldi	r24, 0x47	; 71
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     7b4:	ff 92       	push	r15
     7b6:	ef 92       	push	r14
     7b8:	84 e4       	ldi	r24, 0x44	; 68
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	9f 93       	push	r25
     7be:	8f 93       	push	r24
     7c0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     7c4:	8f e3       	ldi	r24, 0x3F	; 63
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     7d0:	dd 24       	eor	r13, r13
     7d2:	df 92       	push	r13
     7d4:	cf 92       	push	r12
     7d6:	8c e3       	ldi	r24, 0x3C	; 60
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     7e2:	ce 0c       	add	r12, r14
     7e4:	df 1c       	adc	r13, r15
     7e6:	8e 81       	ldd	r24, Y+6	; 0x06
     7e8:	76 01       	movw	r14, r12
     7ea:	e8 0e       	add	r14, r24
     7ec:	f1 1c       	adc	r15, r1
     7ee:	8d b7       	in	r24, 0x3d	; 61
     7f0:	9e b7       	in	r25, 0x3e	; 62
     7f2:	46 96       	adiw	r24, 0x16	; 22
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	9e bf       	out	0x3e, r25	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	8d bf       	out	0x3d, r24	; 61
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	89 2b       	or	r24, r25
     804:	89 f1       	breq	.+98     	; 0x868 <FP_writeStructuredPacket+0x1f2>
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	4e 01       	movw	r8, r28
     80a:	0f 2e       	mov	r0, r31
     80c:	f7 e3       	ldi	r31, 0x37	; 55
     80e:	af 2e       	mov	r10, r31
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	bf 2e       	mov	r11, r31
     814:	f0 2d       	mov	r31, r0
     816:	0f 2e       	mov	r0, r31
     818:	f4 e3       	ldi	r31, 0x34	; 52
     81a:	cf 2e       	mov	r12, r31
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	df 2e       	mov	r13, r31
     820:	f0 2d       	mov	r31, r0
     822:	c1 2f       	mov	r28, r17
     824:	d0 e0       	ldi	r29, 0x00	; 0
     826:	ca 59       	subi	r28, 0x9A	; 154
     828:	db 4f       	sbci	r29, 0xFB	; 251
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	18 d7       	rcall	.+3632   	; 0x165e <fp_putch>
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	e8 0e       	add	r14, r24
     832:	f1 1c       	adc	r15, r1
     834:	bf 92       	push	r11
     836:	af 92       	push	r10
     838:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     83c:	89 85       	ldd	r24, Y+9	; 0x09
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	df 92       	push	r13
     844:	cf 92       	push	r12
     846:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     84a:	1f 5f       	subi	r17, 0xFF	; 255
     84c:	21 2f       	mov	r18, r17
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	f4 01       	movw	r30, r8
     85e:	87 81       	ldd	r24, Z+7	; 0x07
     860:	90 85       	ldd	r25, Z+8	; 0x08
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	e8 f2       	brcs	.-70     	; 0x822 <FP_writeStructuredPacket+0x1ac>
     868:	8f 2d       	mov	r24, r15
     86a:	f9 d6       	rcall	.+3570   	; 0x165e <fp_putch>
     86c:	8e 2d       	mov	r24, r14
     86e:	f7 d6       	rcall	.+3566   	; 0x165e <fp_putch>
     870:	8f e2       	ldi	r24, 0x2F	; 47
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     87c:	1f 92       	push	r1
     87e:	ff 92       	push	r15
     880:	8c e2       	ldi	r24, 0x2C	; 44
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     88c:	87 e2       	ldi	r24, 0x27	; 39
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     898:	ff 24       	eor	r15, r15
     89a:	ff 92       	push	r15
     89c:	ef 92       	push	r14
     89e:	82 e2       	ldi	r24, 0x22	; 34
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	9f 93       	push	r25
     8a4:	8f 93       	push	r24
     8a6:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     8aa:	8d b7       	in	r24, 0x3d	; 61
     8ac:	9e b7       	in	r25, 0x3e	; 62
     8ae:	0c 96       	adiw	r24, 0x0c	; 12
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	9e bf       	out	0x3e, r25	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	8d bf       	out	0x3d, r24	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	08 95       	ret

000008d2 <FP_getStructuredPacket>:
     8d2:	3f 92       	push	r3
     8d4:	4f 92       	push	r4
     8d6:	5f 92       	push	r5
     8d8:	6f 92       	push	r6
     8da:	7f 92       	push	r7
     8dc:	8f 92       	push	r8
     8de:	9f 92       	push	r9
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	4c 01       	movw	r8, r24
     8f6:	8e e1       	ldi	r24, 0x1E	; 30
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	c0 e0       	ldi	r28, 0x00	; 0
     90c:	d0 e0       	ldi	r29, 0x00	; 0
     90e:	0f 2e       	mov	r0, r31
     910:	ff e0       	ldi	r31, 0x0F	; 15
     912:	cf 2e       	mov	r12, r31
     914:	f1 e0       	ldi	r31, 0x01	; 1
     916:	df 2e       	mov	r13, r31
     918:	f0 2d       	mov	r31, r0
     91a:	0f 2e       	mov	r0, r31
     91c:	fc e0       	ldi	r31, 0x0C	; 12
     91e:	ef 2e       	mov	r14, r31
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	ff 2e       	mov	r15, r31
     924:	f0 2d       	mov	r31, r0
     926:	0f 2e       	mov	r0, r31
     928:	f9 e0       	ldi	r31, 0x09	; 9
     92a:	6f 2e       	mov	r6, r31
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	7f 2e       	mov	r7, r31
     930:	f0 2d       	mov	r31, r0
     932:	0f 2e       	mov	r0, r31
     934:	f6 e6       	ldi	r31, 0x66	; 102
     936:	af 2e       	mov	r10, r31
     938:	f4 e0       	ldi	r31, 0x04	; 4
     93a:	bf 2e       	mov	r11, r31
     93c:	f0 2d       	mov	r31, r0
     93e:	0f 2e       	mov	r0, r31
     940:	41 2c       	mov	r4, r1
     942:	ff ee       	ldi	r31, 0xEF	; 239
     944:	5f 2e       	mov	r5, r31
     946:	f0 2d       	mov	r31, r0
     948:	15 c0       	rjmp	.+42     	; 0x974 <FP_getStructuredPacket+0xa2>
     94a:	8f e9       	ldi	r24, 0x9F	; 159
     94c:	9f e0       	ldi	r25, 0x0F	; 15
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <FP_getStructuredPacket+0x7c>
     952:	00 c0       	rjmp	.+0      	; 0x954 <FP_getStructuredPacket+0x82>
     954:	00 00       	nop
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	1f 4f       	sbci	r17, 0xFF	; 255
     95a:	08 15       	cp	r16, r8
     95c:	19 05       	cpc	r17, r9
     95e:	50 f0       	brcs	.+20     	; 0x974 <FP_getStructuredPacket+0xa2>
     960:	82 e1       	ldi	r24, 0x12	; 18
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	62 c0       	rjmp	.+196    	; 0xa38 <FP_getStructuredPacket+0x166>
     974:	49 d6       	rcall	.+3218   	; 0x1608 <fp_available>
     976:	88 23       	and	r24, r24
     978:	41 f3       	breq	.-48     	; 0x94a <FP_getStructuredPacket+0x78>
     97a:	4f d6       	rcall	.+3230   	; 0x161a <fp_read>
     97c:	38 2e       	mov	r3, r24
     97e:	df 92       	push	r13
     980:	cf 92       	push	r12
     982:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     986:	1f 92       	push	r1
     988:	3f 92       	push	r3
     98a:	ff 92       	push	r15
     98c:	ef 92       	push	r14
     98e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     992:	7f 92       	push	r7
     994:	6f 92       	push	r6
     996:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     99a:	ed b7       	in	r30, 0x3d	; 61
     99c:	fe b7       	in	r31, 0x3e	; 62
     99e:	38 96       	adiw	r30, 0x08	; 8
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	fe bf       	out	0x3e, r31	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	ed bf       	out	0x3d, r30	; 61
     9aa:	c9 30       	cpi	r28, 0x09	; 9
     9ac:	d1 05       	cpc	r29, r1
     9ae:	58 f5       	brcc	.+86     	; 0xa06 <FP_getStructuredPacket+0x134>
     9b0:	fe 01       	movw	r30, r28
     9b2:	88 27       	eor	r24, r24
     9b4:	ee 58       	subi	r30, 0x8E	; 142
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ba:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__tablejump2__>
     9be:	ff ee       	ldi	r31, 0xEF	; 239
     9c0:	3f 12       	cpse	r3, r31
     9c2:	d8 cf       	rjmp	.-80     	; 0x974 <FP_getStructuredPacket+0xa2>
     9c4:	f5 01       	movw	r30, r10
     9c6:	51 82       	std	Z+1, r5	; 0x01
     9c8:	40 82       	st	Z, r4
     9ca:	33 c0       	rjmp	.+102    	; 0xa32 <FP_getStructuredPacket+0x160>
     9cc:	f5 01       	movw	r30, r10
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	83 29       	or	r24, r3
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	80 83       	st	Z, r24
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	9f 4e       	sbci	r25, 0xEF	; 239
     9dc:	51 f1       	breq	.+84     	; 0xa32 <FP_getStructuredPacket+0x160>
     9de:	2b c0       	rjmp	.+86     	; 0xa36 <FP_getStructuredPacket+0x164>
     9e0:	fe 01       	movw	r30, r28
     9e2:	ea 59       	subi	r30, 0x9A	; 154
     9e4:	fb 4f       	sbci	r31, 0xFB	; 251
     9e6:	30 82       	st	Z, r3
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <FP_getStructuredPacket+0x160>
     9ea:	f5 01       	movw	r30, r10
     9ec:	36 82       	std	Z+6, r3	; 0x06
     9ee:	21 c0       	rjmp	.+66     	; 0xa32 <FP_getStructuredPacket+0x160>
     9f0:	f5 01       	movw	r30, r10
     9f2:	17 82       	std	Z+7, r1	; 0x07
     9f4:	30 86       	std	Z+8, r3	; 0x08
     9f6:	1d c0       	rjmp	.+58     	; 0xa32 <FP_getStructuredPacket+0x160>
     9f8:	f5 01       	movw	r30, r10
     9fa:	87 81       	ldd	r24, Z+7	; 0x07
     9fc:	90 85       	ldd	r25, Z+8	; 0x08
     9fe:	83 29       	or	r24, r3
     a00:	90 87       	std	Z+8, r25	; 0x08
     a02:	87 83       	std	Z+7, r24	; 0x07
     a04:	16 c0       	rjmp	.+44     	; 0xa32 <FP_getStructuredPacket+0x160>
     a06:	fe 01       	movw	r30, r28
     a08:	ea 59       	subi	r30, 0x9A	; 154
     a0a:	fb 4f       	sbci	r31, 0xFB	; 251
     a0c:	30 82       	st	Z, r3
     a0e:	f5 01       	movw	r30, r10
     a10:	27 81       	ldd	r18, Z+7	; 0x07
     a12:	30 85       	ldd	r19, Z+8	; 0x08
     a14:	ce 01       	movw	r24, r28
     a16:	08 97       	sbiw	r24, 0x08	; 8
     a18:	82 17       	cp	r24, r18
     a1a:	93 07       	cpc	r25, r19
     a1c:	51 f4       	brne	.+20     	; 0xa32 <FP_getStructuredPacket+0x160>
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9f 93       	push	r25
     a24:	8f 93       	push	r24
     a26:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <FP_getStructuredPacket+0x166>
     a32:	21 96       	adiw	r28, 0x01	; 1
     a34:	9f cf       	rjmp	.-194    	; 0x974 <FP_getStructuredPacket+0xa2>
     a36:	8e ef       	ldi	r24, 0xFE	; 254
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	8f 90       	pop	r8
     a50:	7f 90       	pop	r7
     a52:	6f 90       	pop	r6
     a54:	5f 90       	pop	r5
     a56:	4f 90       	pop	r4
     a58:	3f 90       	pop	r3
     a5a:	08 95       	ret

00000a5c <FP_checkPassword>:
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	00 d0       	rcall	.+0      	; 0xa62 <FP_checkPassword+0x6>
     a62:	1f 92       	push	r1
     a64:	1f 92       	push	r1
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	83 e1       	ldi	r24, 0x13	; 19
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <thePassword>
     a72:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <thePassword+0x1>
     a76:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <thePassword+0x2>
     a7a:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <thePassword+0x3>
     a7e:	3a 83       	std	Y+2, r19	; 0x02
     a80:	2b 83       	std	Y+3, r18	; 0x03
     a82:	9c 83       	std	Y+4, r25	; 0x04
     a84:	8d 83       	std	Y+5, r24	; 0x05
     a86:	ae 01       	movw	r20, r28
     a88:	4f 5f       	subi	r20, 0xFF	; 255
     a8a:	5f 4f       	sbci	r21, 0xFF	; 255
     a8c:	65 e0       	ldi	r22, 0x05	; 5
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	c3 dd       	rcall	.-1146   	; 0x61a <Make_Packet>
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	81 ee       	ldi	r24, 0xE1	; 225
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <FP_checkPassword+0x3e>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <FP_checkPassword+0x48>
     aa4:	00 00       	nop
     aa6:	e7 dd       	rcall	.-1074   	; 0x676 <FP_writeStructuredPacket>
     aa8:	88 ee       	ldi	r24, 0xE8	; 232
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	12 df       	rcall	.-476    	; 0x8d2 <FP_getStructuredPacket>
     aae:	81 11       	cpse	r24, r1
     ab0:	0b c0       	rjmp	.+22     	; 0xac8 <FP_checkPassword+0x6c>
     ab2:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     ab6:	87 30       	cpi	r24, 0x07	; 7
     ab8:	49 f4       	brne	.+18     	; 0xacc <FP_checkPassword+0x70>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <__data_end+0x9>
     ac0:	91 11       	cpse	r25, r1
     ac2:	05 c0       	rjmp	.+10     	; 0xace <FP_checkPassword+0x72>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	03 c0       	rjmp	.+6      	; 0xace <FP_checkPassword+0x72>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	01 c0       	rjmp	.+2      	; 0xace <FP_checkPassword+0x72>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <FP_verifyPassword>:
     ade:	be df       	rcall	.-132    	; 0xa5c <FP_checkPassword>
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	81 11       	cpse	r24, r1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	89 2f       	mov	r24, r25
     ae8:	08 95       	ret

00000aea <verifyPassword>:
     aea:	cf 93       	push	r28
     aec:	f8 df       	rcall	.-16     	; 0xade <FP_verifyPassword>
     aee:	c8 2f       	mov	r28, r24
     af0:	88 23       	and	r24, r24
     af2:	49 f0       	breq	.+18     	; 0xb06 <verifyPassword+0x1c>
     af4:	8c e5       	ldi	r24, 0x5C	; 92
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	08 c0       	rjmp	.+16     	; 0xb16 <verifyPassword+0x2c>
     b06:	87 e3       	ldi	r24, 0x37	; 55
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	8c 2f       	mov	r24, r28
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <FP_getParameters>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	8f e0       	ldi	r24, 0x0F	; 15
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	ae 01       	movw	r20, r28
     b2c:	4f 5f       	subi	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	71 dd       	rcall	.-1310   	; 0x61a <Make_Packet>
     b38:	2f ef       	ldi	r18, 0xFF	; 255
     b3a:	81 ee       	ldi	r24, 0xE1	; 225
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	90 40       	sbci	r25, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <FP_getParameters+0x22>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <FP_getParameters+0x2c>
     b48:	00 00       	nop
     b4a:	95 dd       	rcall	.-1238   	; 0x676 <FP_writeStructuredPacket>
     b4c:	88 ee       	ldi	r24, 0xE8	; 232
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	c0 de       	rcall	.-640    	; 0x8d2 <FP_getStructuredPacket>
     b52:	81 11       	cpse	r24, r1
     b54:	8c c0       	rjmp	.+280    	; 0xc6e <FP_getParameters+0x152>
     b56:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     b5a:	87 30       	cpi	r24, 0x07	; 7
     b5c:	09 f0       	breq	.+2      	; 0xb60 <FP_getParameters+0x44>
     b5e:	89 c0       	rjmp	.+274    	; 0xc72 <FP_getParameters+0x156>
     b60:	e6 e6       	ldi	r30, 0x66	; 102
     b62:	f4 e0       	ldi	r31, 0x04	; 4
     b64:	82 85       	ldd	r24, Z+10	; 0x0a
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	98 2f       	mov	r25, r24
     b6a:	88 27       	eor	r24, r24
     b6c:	23 85       	ldd	r18, Z+11	; 0x0b
     b6e:	82 2b       	or	r24, r18
     b70:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <status_reg+0x1>
     b74:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <status_reg>
     b78:	84 85       	ldd	r24, Z+12	; 0x0c
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	98 2f       	mov	r25, r24
     b7e:	88 27       	eor	r24, r24
     b80:	25 85       	ldd	r18, Z+13	; 0x0d
     b82:	82 2b       	or	r24, r18
     b84:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <system_id+0x1>
     b88:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <system_id>
     b8c:	86 85       	ldd	r24, Z+14	; 0x0e
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	98 2f       	mov	r25, r24
     b92:	88 27       	eor	r24, r24
     b94:	27 85       	ldd	r18, Z+15	; 0x0f
     b96:	82 2b       	or	r24, r18
     b98:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <capacity+0x1>
     b9c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <capacity>
     ba0:	80 89       	ldd	r24, Z+16	; 0x10
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	98 2f       	mov	r25, r24
     ba6:	88 27       	eor	r24, r24
     ba8:	21 89       	ldd	r18, Z+17	; 0x11
     baa:	82 2b       	or	r24, r18
     bac:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <security_level+0x1>
     bb0:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <security_level>
     bb4:	22 89       	ldd	r18, Z+18	; 0x12
     bb6:	83 89       	ldd	r24, Z+19	; 0x13
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	dc 01       	movw	r26, r24
     bc0:	99 27       	eor	r25, r25
     bc2:	88 27       	eor	r24, r24
     bc4:	b2 2b       	or	r27, r18
     bc6:	25 89       	ldd	r18, Z+21	; 0x15
     bc8:	82 2b       	or	r24, r18
     bca:	24 89       	ldd	r18, Z+20	; 0x14
     bcc:	92 2b       	or	r25, r18
     bce:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <device_addr>
     bd2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <device_addr+0x1>
     bd6:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <device_addr+0x2>
     bda:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <device_addr+0x3>
     bde:	86 89       	ldd	r24, Z+22	; 0x16
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	98 2f       	mov	r25, r24
     be4:	88 27       	eor	r24, r24
     be6:	27 89       	ldd	r18, Z+23	; 0x17
     be8:	82 2b       	or	r24, r18
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	39 f4       	brne	.+14     	; 0xbfc <FP_getParameters+0xe0>
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <packet_len+0x1>
     bf6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <packet_len>
     bfa:	22 c0       	rjmp	.+68     	; 0xc40 <FP_getParameters+0x124>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	91 05       	cpc	r25, r1
     c00:	39 f4       	brne	.+14     	; 0xc10 <FP_getParameters+0xf4>
     c02:	80 e4       	ldi	r24, 0x40	; 64
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <packet_len+0x1>
     c0a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <packet_len>
     c0e:	18 c0       	rjmp	.+48     	; 0xc40 <FP_getParameters+0x124>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	91 05       	cpc	r25, r1
     c14:	39 f4       	brne	.+14     	; 0xc24 <FP_getParameters+0x108>
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <packet_len+0x1>
     c1e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <packet_len>
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <FP_getParameters+0x124>
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	91 05       	cpc	r25, r1
     c28:	29 f0       	breq	.+10     	; 0xc34 <FP_getParameters+0x118>
     c2a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <packet_len+0x1>
     c2e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <packet_len>
     c32:	06 c0       	rjmp	.+12     	; 0xc40 <FP_getParameters+0x124>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <packet_len+0x1>
     c3c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <packet_len>
     c40:	e6 e6       	ldi	r30, 0x66	; 102
     c42:	f4 e0       	ldi	r31, 0x04	; 4
     c44:	80 8d       	ldd	r24, Z+24	; 0x18
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	98 2f       	mov	r25, r24
     c4a:	88 27       	eor	r24, r24
     c4c:	21 8d       	ldd	r18, Z+25	; 0x19
     c4e:	82 2b       	or	r24, r18
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	55 e2       	ldi	r21, 0x25	; 37
     c54:	84 9f       	mul	r24, r20
     c56:	90 01       	movw	r18, r0
     c58:	85 9f       	mul	r24, r21
     c5a:	30 0d       	add	r19, r0
     c5c:	94 9f       	mul	r25, r20
     c5e:	30 0d       	add	r19, r0
     c60:	11 24       	eor	r1, r1
     c62:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     c66:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c6a:	81 85       	ldd	r24, Z+9	; 0x09
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <FP_getParameters+0x158>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <FP_getParameters+0x158>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0f 90       	pop	r0
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <read_config>:
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     c88:	49 df       	rcall	.-366    	; 0xb1c <FP_getParameters>
     c8a:	8a ef       	ldi	r24, 0xFA	; 250
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     c96:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <status_reg+0x1>
     c9a:	8f 93       	push	r24
     c9c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <status_reg>
     ca0:	8f 93       	push	r24
     ca2:	85 ef       	ldi	r24, 0xF5	; 245
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     cae:	8a ee       	ldi	r24, 0xEA	; 234
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     cba:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <system_id+0x1>
     cbe:	8f 93       	push	r24
     cc0:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <system_id>
     cc4:	8f 93       	push	r24
     cc6:	85 ee       	ldi	r24, 0xE5	; 229
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     cd2:	8a ed       	ldi	r24, 0xDA	; 218
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     cde:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <capacity+0x1>
     ce2:	8f 93       	push	r24
     ce4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <capacity>
     ce8:	8f 93       	push	r24
     cea:	85 ed       	ldi	r24, 0xD5	; 213
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     cf6:	84 ec       	ldi	r24, 0xC4	; 196
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d02:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <security_level+0x1>
     d06:	8f 93       	push	r24
     d08:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <security_level>
     d0c:	8f 93       	push	r24
     d0e:	8f eb       	ldi	r24, 0xBF	; 191
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d1a:	8e ea       	ldi	r24, 0xAE	; 174
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d26:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <device_addr+0x3>
     d2a:	8f 93       	push	r24
     d2c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <device_addr+0x2>
     d30:	8f 93       	push	r24
     d32:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <device_addr+0x1>
     d36:	8f 93       	push	r24
     d38:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <device_addr>
     d3c:	8f 93       	push	r24
     d3e:	88 ea       	ldi	r24, 0xA8	; 168
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d4a:	8d b7       	in	r24, 0x3d	; 61
     d4c:	9e b7       	in	r25, 0x3e	; 62
     d4e:	82 96       	adiw	r24, 0x22	; 34
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	9e bf       	out	0x3e, r25	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	8d bf       	out	0x3d, r24	; 61
     d5a:	8b e9       	ldi	r24, 0x9B	; 155
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d66:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <packet_len+0x1>
     d6a:	8f 93       	push	r24
     d6c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <packet_len>
     d70:	8f 93       	push	r24
     d72:	86 e9       	ldi	r24, 0x96	; 150
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	9f 93       	push	r25
     d78:	8f 93       	push	r24
     d7a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d7e:	8a e8       	ldi	r24, 0x8A	; 138
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     d8a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     d8e:	8f 93       	push	r24
     d90:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     d94:	8f 93       	push	r24
     d96:	85 e8       	ldi	r24, 0x85	; 133
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	9f 93       	push	r25
     d9c:	8f 93       	push	r24
     d9e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <printf_P>
     da2:	8d b7       	in	r24, 0x3d	; 61
     da4:	9e b7       	in	r25, 0x3e	; 62
     da6:	0c 96       	adiw	r24, 0x0c	; 12
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	9e bf       	out	0x3e, r25	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	8d bf       	out	0x3d, r24	; 61
     db2:	08 95       	ret

00000db4 <FP_getImage>:
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	1f 92       	push	r1
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	ae 01       	movw	r20, r28
     dc4:	4f 5f       	subi	r20, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	26 dc       	rcall	.-1972   	; 0x61a <Make_Packet>
     dce:	2f ef       	ldi	r18, 0xFF	; 255
     dd0:	81 ee       	ldi	r24, 0xE1	; 225
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	80 40       	sbci	r24, 0x00	; 0
     dd8:	90 40       	sbci	r25, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <FP_getImage+0x20>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <FP_getImage+0x2a>
     dde:	00 00       	nop
     de0:	4a dc       	rcall	.-1900   	; 0x676 <FP_writeStructuredPacket>
     de2:	88 ee       	ldi	r24, 0xE8	; 232
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	75 dd       	rcall	.-1302   	; 0x8d2 <FP_getStructuredPacket>
     de8:	81 11       	cpse	r24, r1
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <FP_getImage+0x46>
     dec:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     df0:	87 30       	cpi	r24, 0x07	; 7
     df2:	29 f4       	brne	.+10     	; 0xdfe <FP_getImage+0x4a>
     df4:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <__data_end+0x9>
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <FP_getImage+0x4c>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <FP_getImage+0x4c>
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <FP_image2Tz>:
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	1f 92       	push	r1
     e0e:	1f 92       	push	r1
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	99 83       	std	Y+1, r25	; 0x01
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	ae 01       	movw	r20, r28
     e1c:	4f 5f       	subi	r20, 0xFF	; 255
     e1e:	5f 4f       	sbci	r21, 0xFF	; 255
     e20:	62 e0       	ldi	r22, 0x02	; 2
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	f9 db       	rcall	.-2062   	; 0x61a <Make_Packet>
     e28:	2f ef       	ldi	r18, 0xFF	; 255
     e2a:	81 ee       	ldi	r24, 0xE1	; 225
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	21 50       	subi	r18, 0x01	; 1
     e30:	80 40       	sbci	r24, 0x00	; 0
     e32:	90 40       	sbci	r25, 0x00	; 0
     e34:	e1 f7       	brne	.-8      	; 0xe2e <FP_image2Tz+0x26>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <FP_image2Tz+0x30>
     e38:	00 00       	nop
     e3a:	1d dc       	rcall	.-1990   	; 0x676 <FP_writeStructuredPacket>
     e3c:	88 ee       	ldi	r24, 0xE8	; 232
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	48 dd       	rcall	.-1392   	; 0x8d2 <FP_getStructuredPacket>
     e42:	81 11       	cpse	r24, r1
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <FP_image2Tz+0x4c>
     e46:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     e4a:	87 30       	cpi	r24, 0x07	; 7
     e4c:	29 f4       	brne	.+10     	; 0xe58 <FP_image2Tz+0x50>
     e4e:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <__data_end+0x9>
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <FP_image2Tz+0x52>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <FP_image2Tz+0x52>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <FP_createModel>:
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	85 e0       	ldi	r24, 0x05	; 5
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	ae 01       	movw	r20, r28
     e74:	4f 5f       	subi	r20, 0xFF	; 255
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	cd db       	rcall	.-2150   	; 0x61a <Make_Packet>
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	81 ee       	ldi	r24, 0xE1	; 225
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <FP_createModel+0x22>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <FP_createModel+0x2c>
     e90:	00 00       	nop
     e92:	f1 db       	rcall	.-2078   	; 0x676 <FP_writeStructuredPacket>
     e94:	88 ee       	ldi	r24, 0xE8	; 232
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	1c dd       	rcall	.-1480   	; 0x8d2 <FP_getStructuredPacket>
     e9a:	81 11       	cpse	r24, r1
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <FP_createModel+0x48>
     e9e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     ea2:	87 30       	cpi	r24, 0x07	; 7
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <FP_createModel+0x4c>
     ea6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <__data_end+0x9>
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <FP_createModel+0x4e>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <FP_createModel+0x4e>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <FP_storeModel>:
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <FP_storeModel+0x6>
     ec0:	1f 92       	push	r1
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	26 e0       	ldi	r18, 0x06	; 6
     ec8:	29 83       	std	Y+1, r18	; 0x01
     eca:	21 e0       	ldi	r18, 0x01	; 1
     ecc:	2a 83       	std	Y+2, r18	; 0x02
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8c 83       	std	Y+4, r24	; 0x04
     ed2:	ae 01       	movw	r20, r28
     ed4:	4f 5f       	subi	r20, 0xFF	; 255
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	64 e0       	ldi	r22, 0x04	; 4
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	9d db       	rcall	.-2246   	; 0x61a <Make_Packet>
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	81 ee       	ldi	r24, 0xE1	; 225
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	21 50       	subi	r18, 0x01	; 1
     ee8:	80 40       	sbci	r24, 0x00	; 0
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <FP_storeModel+0x2c>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <FP_storeModel+0x36>
     ef0:	00 00       	nop
     ef2:	c1 db       	rcall	.-2174   	; 0x676 <FP_writeStructuredPacket>
     ef4:	88 ee       	ldi	r24, 0xE8	; 232
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	ec dc       	rcall	.-1576   	; 0x8d2 <FP_getStructuredPacket>
     efa:	81 11       	cpse	r24, r1
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <FP_storeModel+0x52>
     efe:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	29 f4       	brne	.+10     	; 0xf10 <FP_storeModel+0x56>
     f06:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <__data_end+0x9>
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <FP_storeModel+0x58>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <FP_storeModel+0x58>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <FP_fingerFastSearch>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <FP_fingerFastSearch+0x6>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <FP_fingerFastSearch+0x8>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	86 e0       	ldi	r24, 0x06	; 6
     f2e:	ea e1       	ldi	r30, 0x1A	; 26
     f30:	f2 e0       	ldi	r31, 0x02	; 2
     f32:	de 01       	movw	r26, r28
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <FP_fingerFastSearch+0x16>
     f3e:	ae 01       	movw	r20, r28
     f40:	4f 5f       	subi	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	66 e0       	ldi	r22, 0x06	; 6
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	67 db       	rcall	.-2354   	; 0x61a <Make_Packet>
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	81 ee       	ldi	r24, 0xE1	; 225
     f50:	94 e0       	ldi	r25, 0x04	; 4
     f52:	21 50       	subi	r18, 0x01	; 1
     f54:	80 40       	sbci	r24, 0x00	; 0
     f56:	90 40       	sbci	r25, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <FP_fingerFastSearch+0x32>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <FP_fingerFastSearch+0x3c>
     f5c:	00 00       	nop
     f5e:	8b db       	rcall	.-2282   	; 0x676 <FP_writeStructuredPacket>
     f60:	88 ee       	ldi	r24, 0xE8	; 232
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	b6 dc       	rcall	.-1684   	; 0x8d2 <FP_getStructuredPacket>
     f66:	81 11       	cpse	r24, r1
     f68:	1c c0       	rjmp	.+56     	; 0xfa2 <FP_fingerFastSearch+0x82>
     f6a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
     f6e:	87 30       	cpi	r24, 0x07	; 7
     f70:	d1 f4       	brne	.+52     	; 0xfa6 <FP_fingerFastSearch+0x86>
     f72:	e6 e6       	ldi	r30, 0x66	; 102
     f74:	f4 e0       	ldi	r31, 0x04	; 4
     f76:	82 85       	ldd	r24, Z+10	; 0x0a
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	98 2f       	mov	r25, r24
     f7c:	88 27       	eor	r24, r24
     f7e:	23 85       	ldd	r18, Z+11	; 0x0b
     f80:	82 2b       	or	r24, r18
     f82:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <fingerID+0x1>
     f86:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <fingerID>
     f8a:	84 85       	ldd	r24, Z+12	; 0x0c
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	98 2f       	mov	r25, r24
     f90:	88 27       	eor	r24, r24
     f92:	25 85       	ldd	r18, Z+13	; 0x0d
     f94:	82 2b       	or	r24, r18
     f96:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <confidence+0x1>
     f9a:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <confidence>
     f9e:	81 85       	ldd	r24, Z+9	; 0x09
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <FP_fingerFastSearch+0x88>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <FP_fingerFastSearch+0x88>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	26 96       	adiw	r28, 0x06	; 6
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <getFingerprintIDez>:
     fba:	fc de       	rcall	.-520    	; 0xdb4 <FP_getImage>
     fbc:	81 11       	cpse	r24, r1
     fbe:	35 c0       	rjmp	.+106    	; 0x102a <getFingerprintIDez+0x70>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	22 df       	rcall	.-444    	; 0xe08 <FP_image2Tz>
     fc4:	81 11       	cpse	r24, r1
     fc6:	34 c0       	rjmp	.+104    	; 0x1030 <getFingerprintIDez+0x76>
     fc8:	ab df       	rcall	.-170    	; 0xf20 <FP_fingerFastSearch>
     fca:	81 11       	cpse	r24, r1
     fcc:	34 c0       	rjmp	.+104    	; 0x1036 <getFingerprintIDez+0x7c>
     fce:	88 e9       	ldi	r24, 0x98	; 152
     fd0:	95 e0       	ldi	r25, 0x05	; 5
     fd2:	9f 93       	push	r25
     fd4:	8f 93       	push	r24
     fd6:	26 d7       	rcall	.+3660   	; 0x1e24 <printf_P>
     fd8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <fingerID+0x1>
     fdc:	8f 93       	push	r24
     fde:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <fingerID>
     fe2:	8f 93       	push	r24
     fe4:	83 e9       	ldi	r24, 0x93	; 147
     fe6:	95 e0       	ldi	r25, 0x05	; 5
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	1b d7       	rcall	.+3638   	; 0x1e24 <printf_P>
     fee:	8e e7       	ldi	r24, 0x7E	; 126
     ff0:	95 e0       	ldi	r25, 0x05	; 5
     ff2:	9f 93       	push	r25
     ff4:	8f 93       	push	r24
     ff6:	16 d7       	rcall	.+3628   	; 0x1e24 <printf_P>
     ff8:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <confidence+0x1>
     ffc:	8f 93       	push	r24
     ffe:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <confidence>
    1002:	8f 93       	push	r24
    1004:	89 e7       	ldi	r24, 0x79	; 121
    1006:	95 e0       	ldi	r25, 0x05	; 5
    1008:	9f 93       	push	r25
    100a:	8f 93       	push	r24
    100c:	0b d7       	rcall	.+3606   	; 0x1e24 <printf_P>
    100e:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <fingerID>
    1012:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <fingerID+0x1>
    1016:	2d b7       	in	r18, 0x3d	; 61
    1018:	3e b7       	in	r19, 0x3e	; 62
    101a:	24 5f       	subi	r18, 0xF4	; 244
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	3e bf       	out	0x3e, r19	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	2d bf       	out	0x3d, r18	; 61
    1028:	08 95       	ret
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	08 95       	ret
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9f ef       	ldi	r25, 0xFF	; 255
    1034:	08 95       	ret
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	9f ef       	ldi	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <FP_getTemplateCount>:
   number is stored in <b>templateCount</b> on success.
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t FP_getTemplateCount(void) {
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	1f 92       	push	r1
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
  GET_CMD_PACKET(FINGERPRINT_TEMPLATECOUNT);
    1046:	8d e1       	ldi	r24, 0x1D	; 29
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	ae 01       	movw	r20, r28
    104c:	4f 5f       	subi	r20, 0xFF	; 255
    104e:	5f 4f       	sbci	r21, 0xFF	; 255
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	e1 da       	rcall	.-2622   	; 0x61a <Make_Packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	81 ee       	ldi	r24, 0xE1	; 225
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	21 50       	subi	r18, 0x01	; 1
    1060:	80 40       	sbci	r24, 0x00	; 0
    1062:	90 40       	sbci	r25, 0x00	; 0
    1064:	e1 f7       	brne	.-8      	; 0x105e <FP_getTemplateCount+0x22>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <FP_getTemplateCount+0x2c>
    1068:	00 00       	nop
    106a:	05 db       	rcall	.-2550   	; 0x676 <FP_writeStructuredPacket>
    106c:	88 ee       	ldi	r24, 0xE8	; 232
    106e:	93 e0       	ldi	r25, 0x03	; 3
    1070:	30 dc       	rcall	.-1952   	; 0x8d2 <FP_getStructuredPacket>
    1072:	81 11       	cpse	r24, r1
    1074:	12 c0       	rjmp	.+36     	; 0x109a <FP_getTemplateCount+0x5e>
    1076:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__data_end+0x6>
    107a:	87 30       	cpi	r24, 0x07	; 7
    107c:	81 f4       	brne	.+32     	; 0x109e <FP_getTemplateCount+0x62>

  templateCount = packet.data[1];
    107e:	e6 e6       	ldi	r30, 0x66	; 102
    1080:	f4 e0       	ldi	r31, 0x04	; 4
  templateCount <<= 8;
  templateCount |= packet.data[2];
    1082:	82 85       	ldd	r24, Z+10	; 0x0a
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	98 2f       	mov	r25, r24
    1088:	88 27       	eor	r24, r24
    108a:	23 85       	ldd	r18, Z+11	; 0x0b
    108c:	82 2b       	or	r24, r18
    108e:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <templateCount+0x1>
    1092:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <templateCount>

  return packet.data[0];
    1096:	81 85       	ldd	r24, Z+9	; 0x09
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <FP_getTemplateCount+0x64>
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t FP_getTemplateCount(void) {
  GET_CMD_PACKET(FINGERPRINT_TEMPLATECOUNT);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <FP_getTemplateCount+0x64>
    109e:	81 e0       	ldi	r24, 0x01	; 1
  templateCount = packet.data[1];
  templateCount <<= 8;
  templateCount |= packet.data[2];

  return packet.data[0];
}
    10a0:	0f 90       	pop	r0
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <getTemplateCount>:
	}
}

uint16_t getTemplateCount(void)
{
	FP_getTemplateCount();	
    10a8:	c9 df       	rcall	.-110    	; 0x103c <FP_getTemplateCount>
	#ifdef FINGERPRINT_DEBUG
		printf_P(PSTR("Template Count: ")); printf_P(PSTR("%i\r\n"),templateCount);
    10aa:	86 e2       	ldi	r24, 0x26	; 38
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	9f 93       	push	r25
    10b0:	8f 93       	push	r24
    10b2:	b8 d6       	rcall	.+3440   	; 0x1e24 <printf_P>
    10b4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <templateCount+0x1>
    10b8:	8f 93       	push	r24
    10ba:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <templateCount>
    10be:	8f 93       	push	r24
    10c0:	81 e2       	ldi	r24, 0x21	; 33
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	9f 93       	push	r25
    10c6:	8f 93       	push	r24
    10c8:	ad d6       	rcall	.+3418   	; 0x1e24 <printf_P>
	#endif
	return templateCount;		
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
}
    10d6:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <templateCount>
    10da:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <templateCount+0x1>
    10de:	08 95       	ret

000010e0 <getFingerprintEnroll>:
	return fingerID;
}


bool getFingerprintEnroll(void) 
{
    10e0:	4f 92       	push	r4
    10e2:	5f 92       	push	r5
    10e4:	6f 92       	push	r6
    10e6:	7f 92       	push	r7
    10e8:	8f 92       	push	r8
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	64 97       	sbiw	r28, 0x14	; 20
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
	char lcd_buffer[20];
	int16_t p = -1;
	uint8_t id = getTemplateCount() + 1;
    1110:	cb df       	rcall	.-106    	; 0x10a8 <getTemplateCount>
    1112:	01 e0       	ldi	r16, 0x01	; 1
    1114:	08 0f       	add	r16, r24
	uint32_t now = millis();
    1116:	ef d5       	rcall	.+3038   	; 0x1cf6 <millis>
    1118:	2b 01       	movw	r4, r22
    111a:	3c 01       	movw	r6, r24
    111c:	81 e5       	ldi	r24, 0x51	; 81
	// place finger in 10 seconds
	uint32_t timeout = 10000;
	printf_P(PSTR("Waiting for valid finger to enroll as #")); printf_P(PSTR("%x\r\n"),id);
    111e:	95 e0       	ldi	r25, 0x05	; 5
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	7f d6       	rcall	.+3326   	; 0x1e24 <printf_P>
    1126:	1f 92       	push	r1
    1128:	0f 93       	push	r16
    112a:	8c e4       	ldi	r24, 0x4C	; 76
    112c:	95 e0       	ldi	r25, 0x05	; 5
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	78 d6       	rcall	.+3312   	; 0x1e24 <printf_P>
    1134:	60 e8       	ldi	r22, 0x80	; 128
	lcd_msg((uint8_t *)" Place a Finger ",lcd_LineOne);
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	77 d3       	rcall	.+1774   	; 0x182a <lcd_msg>
    113c:	1f 92       	push	r1
    113e:	1f 92       	push	r1

	snprintf(lcd_buffer,sizeof(lcd_buffer)," in %02lu Seconds    ",(timeout/1000));
    1140:	1f 92       	push	r1
    1142:	8a e0       	ldi	r24, 0x0A	; 10
    1144:	8f 93       	push	r24
    1146:	81 e3       	ldi	r24, 0x31	; 49
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	1f 92       	push	r1
    1150:	84 e1       	ldi	r24, 0x14	; 20
    1152:	8f 93       	push	r24
    1154:	9e 01       	movw	r18, r28
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	79 01       	movw	r14, r18
    115c:	3f 93       	push	r19
    115e:	2f 93       	push	r18
    1160:	9b d6       	rcall	.+3382   	; 0x1e98 <snprintf>
    1162:	60 ec       	ldi	r22, 0xC0	; 192
	lcd_msg((uint8_t *)lcd_buffer,lcd_LineTwo);
    1164:	c7 01       	movw	r24, r14
    1166:	61 d3       	rcall	.+1730   	; 0x182a <lcd_msg>
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	0f 2e       	mov	r0, r31
    1174:	f4 e2       	ldi	r31, 0x24	; 36
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
			break;
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
    1176:	8f 2e       	mov	r8, r31
    1178:	f5 e0       	ldi	r31, 0x05	; 5
    117a:	9f 2e       	mov	r9, r31
    117c:	f0 2d       	mov	r31, r0
    117e:	0f 2e       	mov	r0, r31
    1180:	fa e3       	ldi	r31, 0x3A	; 58
		{
			case FINGERPRINT_OK:
			printf_P(PSTR("Image taken\r\n"));
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
    1182:	af 2e       	mov	r10, r31
    1184:	f5 e0       	ldi	r31, 0x05	; 5
    1186:	bf 2e       	mov	r11, r31
    1188:	f0 2d       	mov	r31, r0
    118a:	0f 2e       	mov	r0, r31
    118c:	f4 e0       	ldi	r31, 0x04	; 4
			break;
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
			break;
			default:
			printf_P(PSTR("Unknown error\r\n"));
    118e:	cf 2e       	mov	r12, r31
    1190:	f5 e0       	ldi	r31, 0x05	; 5
    1192:	df 2e       	mov	r13, r31
    1194:	f0 2d       	mov	r31, r0
    1196:	0f 2e       	mov	r0, r31
			break;
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
			break;
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
    1198:	f4 e1       	ldi	r31, 0x14	; 20
    119a:	ef 2e       	mov	r14, r31
    119c:	f5 e0       	ldi	r31, 0x05	; 5
    119e:	ff 2e       	mov	r15, r31
    11a0:	f0 2d       	mov	r31, r0

	snprintf(lcd_buffer,sizeof(lcd_buffer)," in %02lu Seconds    ",(timeout/1000));
	lcd_msg((uint8_t *)lcd_buffer,lcd_LineTwo);

	while (p != FINGERPRINT_OK) {
		p = FP_getImage();
    11a2:	08 de       	rcall	.-1008   	; 0xdb4 <FP_getImage>
    11a4:	18 2f       	mov	r17, r24
    11a6:	a7 d5       	rcall	.+2894   	; 0x1cf6 <millis>
		// timeout implementation
		if((millis() - now) > timeout) 
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	84 19       	sub	r24, r4
    11ae:	95 09       	sbc	r25, r5
    11b0:	a6 09       	sbc	r26, r6
    11b2:	b7 09       	sbc	r27, r7
    11b4:	81 31       	cpi	r24, 0x11	; 17
    11b6:	97 42       	sbci	r25, 0x27	; 39
    11b8:	a1 05       	cpc	r26, r1
    11ba:	b1 05       	cpc	r27, r1
    11bc:	30 f0       	brcs	.+12     	; 0x11ca <getFingerprintEnroll+0xea>
    11be:	60 e8       	ldi	r22, 0x80	; 128
		{
			lcd_msg((uint8_t *)" TimeOut Occur ",lcd_LineOne);
    11c0:	87 e4       	ldi	r24, 0x47	; 71
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	32 d3       	rcall	.+1636   	; 0x182a <lcd_msg>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 c2       	rjmp	.+1040   	; 0x15da <getFingerprintEnroll+0x4fa>
			return false;
    11ca:	11 30       	cpi	r17, 0x01	; 1
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <getFingerprintEnroll+0x116>
		}
		switch (p) 
    11ce:	28 f0       	brcs	.+10     	; 0x11da <getFingerprintEnroll+0xfa>
    11d0:	12 30       	cpi	r17, 0x02	; 2
    11d2:	59 f0       	breq	.+22     	; 0x11ea <getFingerprintEnroll+0x10a>
    11d4:	13 30       	cpi	r17, 0x03	; 3
    11d6:	a9 f0       	breq	.+42     	; 0x1202 <getFingerprintEnroll+0x122>
    11d8:	1a c0       	rjmp	.+52     	; 0x120e <getFingerprintEnroll+0x12e>
    11da:	8e e3       	ldi	r24, 0x3E	; 62
		{
			case FINGERPRINT_OK:
			printf_P(PSTR("Image taken\r\n"));
    11dc:	95 e0       	ldi	r25, 0x05	; 5
    11de:	9f 93       	push	r25
    11e0:	8f 93       	push	r24
    11e2:	20 d6       	rcall	.+3136   	; 0x1e24 <printf_P>
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <getFingerprintEnroll+0x13c>
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
    11ea:	bf 92       	push	r11
    11ec:	af 92       	push	r10
    11ee:	1a d6       	rcall	.+3124   	; 0x1e24 <printf_P>
			break;
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	d6 cf       	rjmp	.-84     	; 0x11a2 <getFingerprintEnroll+0xc2>
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
    11f6:	9f 92       	push	r9
    11f8:	8f 92       	push	r8
    11fa:	14 d6       	rcall	.+3112   	; 0x1e24 <printf_P>
			break;
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	d0 cf       	rjmp	.-96     	; 0x11a2 <getFingerprintEnroll+0xc2>
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
    1202:	ff 92       	push	r15
    1204:	ef 92       	push	r14
    1206:	0e d6       	rcall	.+3100   	; 0x1e24 <printf_P>
			break;
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	ca cf       	rjmp	.-108    	; 0x11a2 <getFingerprintEnroll+0xc2>
			default:
			printf_P(PSTR("Unknown error\r\n"));
    120e:	df 92       	push	r13
    1210:	cf 92       	push	r12
    1212:	08 d6       	rcall	.+3088   	; 0x1e24 <printf_P>
    1214:	0f 90       	pop	r0
	lcd_msg((uint8_t *)" Place a Finger ",lcd_LineOne);

	snprintf(lcd_buffer,sizeof(lcd_buffer)," in %02lu Seconds    ",(timeout/1000));
	lcd_msg((uint8_t *)lcd_buffer,lcd_LineTwo);

	while (p != FINGERPRINT_OK) {
    1216:	0f 90       	pop	r0
    1218:	11 11       	cpse	r17, r1
    121a:	c3 cf       	rjmp	.-122    	; 0x11a2 <getFingerprintEnroll+0xc2>
    121c:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}

	// OK success!
	p = FP_image2Tz(1);
    121e:	f4 dd       	rcall	.-1048   	; 0xe08 <FP_image2Tz>
    1220:	86 30       	cpi	r24, 0x06	; 6
    1222:	49 f1       	breq	.+82     	; 0x1276 <getFingerprintEnroll+0x196>
	switch (p) {
    1224:	28 f4       	brcc	.+10     	; 0x1230 <getFingerprintEnroll+0x150>
    1226:	88 23       	and	r24, r24
    1228:	51 f0       	breq	.+20     	; 0x123e <getFingerprintEnroll+0x15e>
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	89 f1       	breq	.+98     	; 0x1290 <getFingerprintEnroll+0x1b0>
    122e:	57 c0       	rjmp	.+174    	; 0x12de <getFingerprintEnroll+0x1fe>
    1230:	87 30       	cpi	r24, 0x07	; 7
    1232:	09 f4       	brne	.+2      	; 0x1236 <getFingerprintEnroll+0x156>
    1234:	3a c0       	rjmp	.+116    	; 0x12aa <getFingerprintEnroll+0x1ca>
    1236:	85 31       	cpi	r24, 0x15	; 21
    1238:	09 f4       	brne	.+2      	; 0x123c <getFingerprintEnroll+0x15c>
    123a:	44 c0       	rjmp	.+136    	; 0x12c4 <getFingerprintEnroll+0x1e4>
		case FINGERPRINT_OK:
		printf_P(PSTR("Image converted\r\n"));
    123c:	50 c0       	rjmp	.+160    	; 0x12de <getFingerprintEnroll+0x1fe>
    123e:	82 ef       	ldi	r24, 0xF2	; 242
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	ee d5       	rcall	.+3036   	; 0x1e24 <printf_P>
		printf_P(PSTR("Unknown error\r\n"));
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
		return false;
	}

	printf_P(PSTR("Remove finger\r\n"));
    1248:	82 ee       	ldi	r24, 0xE2	; 226
    124a:	94 e0       	ldi	r25, 0x04	; 4
    124c:	9f 93       	push	r25
    124e:	8f 93       	push	r24
    1250:	e9 d5       	rcall	.+3026   	; 0x1e24 <printf_P>
    1252:	60 e8       	ldi	r22, 0x80	; 128
	lcd_msg((uint8_t *)" Remove Finger  ",lcd_LineOne);
    1254:	87 e5       	ldi	r24, 0x57	; 87
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	e8 d2       	rcall	.+1488   	; 0x182a <lcd_msg>
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	87 ea       	ldi	r24, 0xA7	; 167
    125e:	91 e6       	ldi	r25, 0x61	; 97
    1260:	31 50       	subi	r19, 0x01	; 1
    1262:	80 40       	sbci	r24, 0x00	; 0
    1264:	90 40       	sbci	r25, 0x00	; 0
    1266:	e1 f7       	brne	.-8      	; 0x1260 <getFingerprintEnroll+0x180>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <getFingerprintEnroll+0x18a>
    126a:	00 00       	nop
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
	switch (p) {
		case FINGERPRINT_OK:
		printf_P(PSTR("Image converted\r\n"));
		break;
		case FINGERPRINT_IMAGEMESS:
		printf_P(PSTR("Image too messy\r\n"));
    1274:	41 c0       	rjmp	.+130    	; 0x12f8 <getFingerprintEnroll+0x218>
    1276:	80 ed       	ldi	r24, 0xD0	; 208
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	9f 93       	push	r25
    127c:	8f 93       	push	r24
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    127e:	d2 d5       	rcall	.+2980   	; 0x1e24 <printf_P>
    1280:	60 e8       	ldi	r22, 0x80	; 128
    1282:	88 e6       	ldi	r24, 0x68	; 104
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	d1 d2       	rcall	.+1442   	; 0x182a <lcd_msg>
		return false;
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	80 e0       	ldi	r24, 0x00	; 0
		case FINGERPRINT_PACKETRECIEVEERR:
		printf_P(PSTR("Communication error\r\n"));
    128e:	a5 c1       	rjmp	.+842    	; 0x15da <getFingerprintEnroll+0x4fa>
    1290:	8a eb       	ldi	r24, 0xBA	; 186
    1292:	94 e0       	ldi	r25, 0x04	; 4
    1294:	9f 93       	push	r25
    1296:	8f 93       	push	r24
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    1298:	c5 d5       	rcall	.+2954   	; 0x1e24 <printf_P>
    129a:	60 e8       	ldi	r22, 0x80	; 128
    129c:	88 e6       	ldi	r24, 0x68	; 104
    129e:	92 e0       	ldi	r25, 0x02	; 2
		return false;
    12a0:	c4 d2       	rcall	.+1416   	; 0x182a <lcd_msg>
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
		case FINGERPRINT_FEATUREFAIL:
		printf_P(PSTR("Could not find fingerprint features\r\n"));
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	98 c1       	rjmp	.+816    	; 0x15da <getFingerprintEnroll+0x4fa>
    12aa:	84 e9       	ldi	r24, 0x94	; 148
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    12b2:	b8 d5       	rcall	.+2928   	; 0x1e24 <printf_P>
    12b4:	60 e8       	ldi	r22, 0x80	; 128
    12b6:	88 e6       	ldi	r24, 0x68	; 104
    12b8:	92 e0       	ldi	r25, 0x02	; 2
		return false;
    12ba:	b7 d2       	rcall	.+1390   	; 0x182a <lcd_msg>
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
		case FINGERPRINT_INVALIDIMAGE:
		printf_P(PSTR("Could not find fingerprint features\r\n"));
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	8b c1       	rjmp	.+790    	; 0x15da <getFingerprintEnroll+0x4fa>
    12c4:	8e e6       	ldi	r24, 0x6E	; 110
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	9f 93       	push	r25
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    12ca:	8f 93       	push	r24
    12cc:	ab d5       	rcall	.+2902   	; 0x1e24 <printf_P>
    12ce:	60 e8       	ldi	r22, 0x80	; 128
    12d0:	88 e6       	ldi	r24, 0x68	; 104
		return false;
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	aa d2       	rcall	.+1364   	; 0x182a <lcd_msg>
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
		default:
		printf_P(PSTR("Unknown error\r\n"));
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	7e c1       	rjmp	.+764    	; 0x15da <getFingerprintEnroll+0x4fa>
    12de:	8e e5       	ldi	r24, 0x5E	; 94
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	9f 93       	push	r25
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    12e4:	8f 93       	push	r24
    12e6:	9e d5       	rcall	.+2876   	; 0x1e24 <printf_P>
    12e8:	60 e8       	ldi	r22, 0x80	; 128
    12ea:	88 e6       	ldi	r24, 0x68	; 104
		return false;
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	9d d2       	rcall	.+1338   	; 0x182a <lcd_msg>
    12f0:	0f 90       	pop	r0
	printf_P(PSTR("Remove finger\r\n"));
	lcd_msg((uint8_t *)" Remove Finger  ",lcd_LineOne);
	_delay_ms(2000);
	p = 0;
	while (p != FINGERPRINT_NOFINGER) {
		p = FP_getImage();
    12f2:	0f 90       	pop	r0
    12f4:	80 e0       	ldi	r24, 0x00	; 0

	printf_P(PSTR("Remove finger\r\n"));
	lcd_msg((uint8_t *)" Remove Finger  ",lcd_LineOne);
	_delay_ms(2000);
	p = 0;
	while (p != FINGERPRINT_NOFINGER) {
    12f6:	71 c1       	rjmp	.+738    	; 0x15da <getFingerprintEnroll+0x4fa>
    12f8:	5d dd       	rcall	.-1350   	; 0xdb4 <FP_getImage>
		p = FP_getImage();
	}
	printf_P(PSTR("ID ")); printf_P(PSTR("%i\r\n"),id);
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	e9 f7       	brne	.-6      	; 0x12f8 <getFingerprintEnroll+0x218>
    12fe:	8a e5       	ldi	r24, 0x5A	; 90
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	9f 93       	push	r25
    1304:	8f 93       	push	r24
    1306:	8e d5       	rcall	.+2844   	; 0x1e24 <printf_P>
    1308:	1f 92       	push	r1
    130a:	0f 93       	push	r16
    130c:	85 e5       	ldi	r24, 0x55	; 85
    130e:	94 e0       	ldi	r25, 0x04	; 4
    1310:	9f 93       	push	r25
    1312:	8f 93       	push	r24
    1314:	87 d5       	rcall	.+2830   	; 0x1e24 <printf_P>
	p = -1;
	printf_P(PSTR("Place same finger again\r\n"));
    1316:	8b e3       	ldi	r24, 0x3B	; 59
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	9f 93       	push	r25
    131c:	8f 93       	push	r24
    131e:	82 d5       	rcall	.+2820   	; 0x1e24 <printf_P>
    1320:	60 e8       	ldi	r22, 0x80	; 128
	lcd_msg((uint8_t *)"  Place Same    ",lcd_LineOne);
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	81 d2       	rcall	.+1282   	; 0x182a <lcd_msg>
    1328:	60 ec       	ldi	r22, 0xC0	; 192
	lcd_msg((uint8_t *)"  Finger Again  ",lcd_LineTwo);
    132a:	89 e8       	ldi	r24, 0x89	; 137
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	7d d2       	rcall	.+1274   	; 0x182a <lcd_msg>
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	0f 2e       	mov	r0, r31
    133c:	f9 e2       	ldi	r31, 0x29	; 41
		switch (p) {
			case FINGERPRINT_OK:
			printf_P(PSTR("Image taken\r\n"));
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
    133e:	8f 2e       	mov	r8, r31
    1340:	f4 e0       	ldi	r31, 0x04	; 4
    1342:	9f 2e       	mov	r9, r31
    1344:	f0 2d       	mov	r31, r0
    1346:	0f 2e       	mov	r0, r31
			break;
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
			break;
			default:
			printf_P(PSTR("Unknown error\r\n"));
    1348:	f3 ef       	ldi	r31, 0xF3	; 243
    134a:	af 2e       	mov	r10, r31
    134c:	f3 e0       	ldi	r31, 0x03	; 3
    134e:	bf 2e       	mov	r11, r31
    1350:	f0 2d       	mov	r31, r0
			break;
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
			break;
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
    1352:	0f 2e       	mov	r0, r31
    1354:	f3 e0       	ldi	r31, 0x03	; 3
    1356:	cf 2e       	mov	r12, r31
    1358:	f4 e0       	ldi	r31, 0x04	; 4
    135a:	df 2e       	mov	r13, r31
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
			break;
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
    135c:	f0 2d       	mov	r31, r0
    135e:	0f 2e       	mov	r0, r31
    1360:	f3 e1       	ldi	r31, 0x13	; 19
    1362:	ef 2e       	mov	r14, r31
    1364:	f4 e0       	ldi	r31, 0x04	; 4
	p = -1;
	printf_P(PSTR("Place same finger again\r\n"));
	lcd_msg((uint8_t *)"  Place Same    ",lcd_LineOne);
	lcd_msg((uint8_t *)"  Finger Again  ",lcd_LineTwo);
	while (p != FINGERPRINT_OK) {
		p = FP_getImage();
    1366:	ff 2e       	mov	r15, r31
    1368:	f0 2d       	mov	r31, r0
    136a:	24 dd       	rcall	.-1464   	; 0xdb4 <FP_getImage>
		switch (p) {
    136c:	18 2f       	mov	r17, r24
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	a1 f0       	breq	.+40     	; 0x139a <getFingerprintEnroll+0x2ba>
    1372:	28 f0       	brcs	.+10     	; 0x137e <getFingerprintEnroll+0x29e>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	59 f0       	breq	.+22     	; 0x138e <getFingerprintEnroll+0x2ae>
			case FINGERPRINT_OK:
			printf_P(PSTR("Image taken\r\n"));
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	a9 f0       	breq	.+42     	; 0x13a6 <getFingerprintEnroll+0x2c6>
    137c:	1a c0       	rjmp	.+52     	; 0x13b2 <getFingerprintEnroll+0x2d2>
    137e:	8d e2       	ldi	r24, 0x2D	; 45
    1380:	94 e0       	ldi	r25, 0x04	; 4
    1382:	9f 93       	push	r25
    1384:	8f 93       	push	r24
    1386:	4e d5       	rcall	.+2716   	; 0x1e24 <printf_P>
    1388:	0f 90       	pop	r0
			break;
			case FINGERPRINT_NOFINGER:
			printf_P(PSTR(".\r\n"));
    138a:	0f 90       	pop	r0
    138c:	19 c0       	rjmp	.+50     	; 0x13c0 <getFingerprintEnroll+0x2e0>
    138e:	9f 92       	push	r9
    1390:	8f 92       	push	r8
			break;
    1392:	48 d5       	rcall	.+2704   	; 0x1e24 <printf_P>
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
			case FINGERPRINT_PACKETRECIEVEERR:
			printf_P(PSTR("Communication error\r\n"));
    1398:	e8 cf       	rjmp	.-48     	; 0x136a <getFingerprintEnroll+0x28a>
    139a:	ff 92       	push	r15
    139c:	ef 92       	push	r14
			break;
    139e:	42 d5       	rcall	.+2692   	; 0x1e24 <printf_P>
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
			case FINGERPRINT_IMAGEFAIL:
			printf_P(PSTR("Imaging error\r\n"));
    13a4:	e2 cf       	rjmp	.-60     	; 0x136a <getFingerprintEnroll+0x28a>
    13a6:	df 92       	push	r13
    13a8:	cf 92       	push	r12
			break;
    13aa:	3c d5       	rcall	.+2680   	; 0x1e24 <printf_P>
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
			default:
			printf_P(PSTR("Unknown error\r\n"));
    13b0:	dc cf       	rjmp	.-72     	; 0x136a <getFingerprintEnroll+0x28a>
    13b2:	bf 92       	push	r11
	printf_P(PSTR("ID ")); printf_P(PSTR("%i\r\n"),id);
	p = -1;
	printf_P(PSTR("Place same finger again\r\n"));
	lcd_msg((uint8_t *)"  Place Same    ",lcd_LineOne);
	lcd_msg((uint8_t *)"  Finger Again  ",lcd_LineTwo);
	while (p != FINGERPRINT_OK) {
    13b4:	af 92       	push	r10
    13b6:	36 d5       	rcall	.+2668   	; 0x1e24 <printf_P>
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
			break;
		}
	}

	// OK success!
	p = FP_image2Tz(2);
    13bc:	11 11       	cpse	r17, r1
    13be:	d5 cf       	rjmp	.-86     	; 0x136a <getFingerprintEnroll+0x28a>
    13c0:	82 e0       	ldi	r24, 0x02	; 2
	switch (p) {
    13c2:	22 dd       	rcall	.-1468   	; 0xe08 <FP_image2Tz>
    13c4:	86 30       	cpi	r24, 0x06	; 6
    13c6:	49 f1       	breq	.+82     	; 0x141a <getFingerprintEnroll+0x33a>
    13c8:	28 f4       	brcc	.+10     	; 0x13d4 <getFingerprintEnroll+0x2f4>
    13ca:	88 23       	and	r24, r24
    13cc:	51 f0       	breq	.+20     	; 0x13e2 <getFingerprintEnroll+0x302>
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	89 f1       	breq	.+98     	; 0x1434 <getFingerprintEnroll+0x354>
    13d2:	57 c0       	rjmp	.+174    	; 0x1482 <getFingerprintEnroll+0x3a2>
    13d4:	87 30       	cpi	r24, 0x07	; 7
    13d6:	09 f4       	brne	.+2      	; 0x13da <getFingerprintEnroll+0x2fa>
    13d8:	3a c0       	rjmp	.+116    	; 0x144e <getFingerprintEnroll+0x36e>
    13da:	85 31       	cpi	r24, 0x15	; 21
		case FINGERPRINT_OK:
		printf_P(PSTR("Image converted\r\n"));
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <getFingerprintEnroll+0x300>
    13de:	44 c0       	rjmp	.+136    	; 0x1468 <getFingerprintEnroll+0x388>
    13e0:	50 c0       	rjmp	.+160    	; 0x1482 <getFingerprintEnroll+0x3a2>
    13e2:	81 ee       	ldi	r24, 0xE1	; 225
    13e4:	93 e0       	ldi	r25, 0x03	; 3
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
		return false;
	}

	// OK converted!
	printf_P(PSTR("Creating model for # "));  printf_P(PSTR("%i\r\n"),id);
    13e6:	9f 93       	push	r25
    13e8:	8f 93       	push	r24
    13ea:	1c d5       	rcall	.+2616   	; 0x1e24 <printf_P>
    13ec:	8b ec       	ldi	r24, 0xCB	; 203
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	17 d5       	rcall	.+2606   	; 0x1e24 <printf_P>
    13f6:	1f 92       	push	r1
    13f8:	0f 93       	push	r16
    13fa:	86 ec       	ldi	r24, 0xC6	; 198
    13fc:	93 e0       	ldi	r25, 0x03	; 3

	p = FP_createModel();
    13fe:	9f 93       	push	r25
    1400:	8f 93       	push	r24
	if (p == FINGERPRINT_OK) {
    1402:	10 d5       	rcall	.+2592   	; 0x1e24 <printf_P>
    1404:	2f dd       	rcall	.-1442   	; 0xe64 <FP_createModel>
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
	switch (p) {
		case FINGERPRINT_OK:
		printf_P(PSTR("Image converted\r\n"));
		break;
		case FINGERPRINT_IMAGEMESS:
		printf_P(PSTR("Image too messy\r\n"));
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	09 f0       	breq	.+2      	; 0x1418 <getFingerprintEnroll+0x338>
    1416:	60 c0       	rjmp	.+192    	; 0x14d8 <getFingerprintEnroll+0x3f8>
    1418:	41 c0       	rjmp	.+130    	; 0x149c <getFingerprintEnroll+0x3bc>
    141a:	84 eb       	ldi	r24, 0xB4	; 180
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	9f 93       	push	r25
    1420:	8f 93       	push	r24
    1422:	00 d5       	rcall	.+2560   	; 0x1e24 <printf_P>
		return false;
    1424:	60 e8       	ldi	r22, 0x80	; 128
    1426:	88 e6       	ldi	r24, 0x68	; 104
    1428:	92 e0       	ldi	r25, 0x02	; 2
		case FINGERPRINT_PACKETRECIEVEERR:
		printf_P(PSTR("Communication error\r\n"));
    142a:	ff d1       	rcall	.+1022   	; 0x182a <lcd_msg>
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	d3 c0       	rjmp	.+422    	; 0x15da <getFingerprintEnroll+0x4fa>
    1434:	8e e9       	ldi	r24, 0x9E	; 158
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	f3 d4       	rcall	.+2534   	; 0x1e24 <printf_P>
		return false;
    143e:	60 e8       	ldi	r22, 0x80	; 128
    1440:	88 e6       	ldi	r24, 0x68	; 104
    1442:	92 e0       	ldi	r25, 0x02	; 2
		case FINGERPRINT_FEATUREFAIL:
		printf_P(PSTR("Could not find fingerprint features\r\n"));
    1444:	f2 d1       	rcall	.+996    	; 0x182a <lcd_msg>
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	c6 c0       	rjmp	.+396    	; 0x15da <getFingerprintEnroll+0x4fa>
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    144e:	88 e7       	ldi	r24, 0x78	; 120
    1450:	93 e0       	ldi	r25, 0x03	; 3
    1452:	9f 93       	push	r25
    1454:	8f 93       	push	r24
		return false;
    1456:	e6 d4       	rcall	.+2508   	; 0x1e24 <printf_P>
    1458:	60 e8       	ldi	r22, 0x80	; 128
    145a:	88 e6       	ldi	r24, 0x68	; 104
    145c:	92 e0       	ldi	r25, 0x02	; 2
		case FINGERPRINT_INVALIDIMAGE:
		printf_P(PSTR("Could not find fingerprint features\r\n"));
    145e:	e5 d1       	rcall	.+970    	; 0x182a <lcd_msg>
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	b9 c0       	rjmp	.+370    	; 0x15da <getFingerprintEnroll+0x4fa>
    1468:	82 e5       	ldi	r24, 0x52	; 82
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    146a:	93 e0       	ldi	r25, 0x03	; 3
    146c:	9f 93       	push	r25
    146e:	8f 93       	push	r24
    1470:	d9 d4       	rcall	.+2482   	; 0x1e24 <printf_P>
    1472:	60 e8       	ldi	r22, 0x80	; 128
		return false;
    1474:	88 e6       	ldi	r24, 0x68	; 104
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	d8 d1       	rcall	.+944    	; 0x182a <lcd_msg>
		default:
		printf_P(PSTR("Unknown error\r\n"));
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	ac c0       	rjmp	.+344    	; 0x15da <getFingerprintEnroll+0x4fa>
    1482:	82 e4       	ldi	r24, 0x42	; 66
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    1484:	93 e0       	ldi	r25, 0x03	; 3
    1486:	9f 93       	push	r25
    1488:	8f 93       	push	r24
    148a:	cc d4       	rcall	.+2456   	; 0x1e24 <printf_P>
    148c:	60 e8       	ldi	r22, 0x80	; 128
		return false;
    148e:	88 e6       	ldi	r24, 0x68	; 104
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	cb d1       	rcall	.+918    	; 0x182a <lcd_msg>
	// OK converted!
	printf_P(PSTR("Creating model for # "));  printf_P(PSTR("%i\r\n"),id);

	p = FP_createModel();
	if (p == FINGERPRINT_OK) {
		printf_P(PSTR("Prints matched!\r\n"));
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	9f c0       	rjmp	.+318    	; 0x15da <getFingerprintEnroll+0x4fa>
    149c:	80 e3       	ldi	r24, 0x30	; 48
		printf_P(PSTR("Unknown error\r\n"));
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
		return false;
	}

	printf_P(PSTR("ID ")); printf_P(PSTR("%i\r\n"),id);
    149e:	93 e0       	ldi	r25, 0x03	; 3
    14a0:	9f 93       	push	r25
    14a2:	8f 93       	push	r24
    14a4:	bf d4       	rcall	.+2430   	; 0x1e24 <printf_P>
    14a6:	8c e2       	ldi	r24, 0x2C	; 44
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	9f 93       	push	r25
    14ac:	8f 93       	push	r24
    14ae:	ba d4       	rcall	.+2420   	; 0x1e24 <printf_P>
    14b0:	1f 92       	push	r1
    14b2:	0f 93       	push	r16
    14b4:	87 e2       	ldi	r24, 0x27	; 39
	p = FP_storeModel(id);
    14b6:	93 e0       	ldi	r25, 0x03	; 3
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	b3 d4       	rcall	.+2406   	; 0x1e24 <printf_P>
	if (p == FINGERPRINT_OK) {
    14be:	80 2f       	mov	r24, r16
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	fb dc       	rcall	.-1546   	; 0xeba <FP_storeModel>
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
	printf_P(PSTR("Creating model for # "));  printf_P(PSTR("%i\r\n"),id);

	p = FP_createModel();
	if (p == FINGERPRINT_OK) {
		printf_P(PSTR("Prints matched!\r\n"));
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	00 97       	sbiw	r24, 0x00	; 0
		printf_P(PSTR("Communication error\r\n"));
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <getFingerprintEnroll+0x3f6>
    14d4:	47 c0       	rjmp	.+142    	; 0x1564 <getFingerprintEnroll+0x484>
    14d6:	2c c0       	rjmp	.+88     	; 0x1530 <getFingerprintEnroll+0x450>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	69 f4       	brne	.+26     	; 0x14f8 <getFingerprintEnroll+0x418>
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    14de:	81 e1       	ldi	r24, 0x11	; 17
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	9f 93       	push	r25
    14e4:	8f 93       	push	r24
    14e6:	9e d4       	rcall	.+2364   	; 0x1e24 <printf_P>
		return false;
    14e8:	60 e8       	ldi	r22, 0x80	; 128
    14ea:	88 e6       	ldi	r24, 0x68	; 104
    14ec:	92 e0       	ldi	r25, 0x02	; 2
		} else if (p == FINGERPRINT_ENROLLMISMATCH) {
    14ee:	9d d1       	rcall	.+826    	; 0x182a <lcd_msg>
    14f0:	0f 90       	pop	r0
		printf_P(PSTR("Fingerprints did not match\r\n"));
    14f2:	0f 90       	pop	r0
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	71 c0       	rjmp	.+226    	; 0x15da <getFingerprintEnroll+0x4fa>
    14f8:	0a 97       	sbiw	r24, 0x0a	; 10
    14fa:	69 f4       	brne	.+26     	; 0x1516 <getFingerprintEnroll+0x436>
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    14fc:	84 ef       	ldi	r24, 0xF4	; 244
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	9f 93       	push	r25
    1502:	8f 93       	push	r24
    1504:	8f d4       	rcall	.+2334   	; 0x1e24 <printf_P>
		return false;
    1506:	60 e8       	ldi	r22, 0x80	; 128
    1508:	88 e6       	ldi	r24, 0x68	; 104
    150a:	92 e0       	ldi	r25, 0x02	; 2
		} else {
		printf_P(PSTR("Unknown error\r\n"));
    150c:	8e d1       	rcall	.+796    	; 0x182a <lcd_msg>
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	62 c0       	rjmp	.+196    	; 0x15da <getFingerprintEnroll+0x4fa>
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    1516:	84 ee       	ldi	r24, 0xE4	; 228
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	9f 93       	push	r25
    151c:	8f 93       	push	r24
    151e:	82 d4       	rcall	.+2308   	; 0x1e24 <printf_P>
		return false;
    1520:	60 e8       	ldi	r22, 0x80	; 128
    1522:	88 e6       	ldi	r24, 0x68	; 104
    1524:	92 e0       	ldi	r25, 0x02	; 2
	}

	printf_P(PSTR("ID ")); printf_P(PSTR("%i\r\n"),id);
	p = FP_storeModel(id);
	if (p == FINGERPRINT_OK) {
		printf_P(PSTR("Stored!\r\n"));
    1526:	81 d1       	rcall	.+770    	; 0x182a <lcd_msg>
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	55 c0       	rjmp	.+170    	; 0x15da <getFingerprintEnroll+0x4fa>
		printf_P(PSTR("Unknown error\r\n"));
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
		return false;
	}

	lcd_msg((uint8_t *)"   Successfully  ",lcd_LineOne);
    1530:	8a ed       	ldi	r24, 0xDA	; 218
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	9f 93       	push	r25
    1536:	8f 93       	push	r24
    1538:	75 d4       	rcall	.+2282   	; 0x1e24 <printf_P>
	lcd_msg((uint8_t *)"    Registered   ",lcd_LineTwo);
    153a:	60 e8       	ldi	r22, 0x80	; 128
    153c:	8a e9       	ldi	r24, 0x9A	; 154
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	74 d1       	rcall	.+744    	; 0x182a <lcd_msg>
    1542:	60 ec       	ldi	r22, 0xC0	; 192
    1544:	8c ea       	ldi	r24, 0xAC	; 172
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	70 d1       	rcall	.+736    	; 0x182a <lcd_msg>
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	83 ed       	ldi	r24, 0xD3	; 211
    154e:	90 e3       	ldi	r25, 0x30	; 48
    1550:	31 50       	subi	r19, 0x01	; 1
    1552:	80 40       	sbci	r24, 0x00	; 0
	_delay_ms(1000);
	return true;
    1554:	90 40       	sbci	r25, 0x00	; 0
    1556:	e1 f7       	brne	.-8      	; 0x1550 <getFingerprintEnroll+0x470>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <getFingerprintEnroll+0x47a>
    155a:	00 00       	nop

	printf_P(PSTR("ID ")); printf_P(PSTR("%i\r\n"),id);
	p = FP_storeModel(id);
	if (p == FINGERPRINT_OK) {
		printf_P(PSTR("Stored!\r\n"));
		} else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	81 e0       	ldi	r24, 0x01	; 1
		printf_P(PSTR("Communication error\r\n"));
    1562:	3b c0       	rjmp	.+118    	; 0x15da <getFingerprintEnroll+0x4fa>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	69 f4       	brne	.+26     	; 0x1584 <getFingerprintEnroll+0x4a4>
    156a:	84 ec       	ldi	r24, 0xC4	; 196
    156c:	92 e0       	ldi	r25, 0x02	; 2
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    156e:	9f 93       	push	r25
    1570:	8f 93       	push	r24
    1572:	58 d4       	rcall	.+2224   	; 0x1e24 <printf_P>
    1574:	60 e8       	ldi	r22, 0x80	; 128
    1576:	88 e6       	ldi	r24, 0x68	; 104
		return false;
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	57 d1       	rcall	.+686    	; 0x182a <lcd_msg>
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
		} else if (p == FINGERPRINT_BADLOCATION) {
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	2b c0       	rjmp	.+86     	; 0x15da <getFingerprintEnroll+0x4fa>
    1584:	8b 30       	cpi	r24, 0x0B	; 11
		printf_P(PSTR("Could not store in that location\r\n"));
    1586:	91 05       	cpc	r25, r1
    1588:	69 f4       	brne	.+26     	; 0x15a4 <getFingerprintEnroll+0x4c4>
    158a:	81 ea       	ldi	r24, 0xA1	; 161
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    1592:	48 d4       	rcall	.+2192   	; 0x1e24 <printf_P>
    1594:	60 e8       	ldi	r22, 0x80	; 128
    1596:	88 e6       	ldi	r24, 0x68	; 104
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	47 d1       	rcall	.+654    	; 0x182a <lcd_msg>
		return false;
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <getFingerprintEnroll+0x4fa>
		} else if (p == FINGERPRINT_FLASHERR) {
    15a4:	48 97       	sbiw	r24, 0x18	; 24
    15a6:	69 f4       	brne	.+26     	; 0x15c2 <getFingerprintEnroll+0x4e2>
		printf_P(PSTR("Error writing to flash\r\n"));
    15a8:	88 e8       	ldi	r24, 0x88	; 136
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	9f 93       	push	r25
    15ae:	8f 93       	push	r24
    15b0:	39 d4       	rcall	.+2162   	; 0x1e24 <printf_P>
    15b2:	60 e8       	ldi	r22, 0x80	; 128
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    15b4:	88 e6       	ldi	r24, 0x68	; 104
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	38 d1       	rcall	.+624    	; 0x182a <lcd_msg>
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
		return false;
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <getFingerprintEnroll+0x4fa>
    15c2:	88 e7       	ldi	r24, 0x78	; 120
    15c4:	92 e0       	ldi	r25, 0x02	; 2
		} else {
		printf_P(PSTR("Unknown error\r\n"));
    15c6:	9f 93       	push	r25
    15c8:	8f 93       	push	r24
    15ca:	2c d4       	rcall	.+2136   	; 0x1e24 <printf_P>
    15cc:	60 e8       	ldi	r22, 0x80	; 128
    15ce:	88 e6       	ldi	r24, 0x68	; 104
    15d0:	92 e0       	ldi	r25, 0x02	; 2
		lcd_msg((uint8_t *)"  Error Occur  ",lcd_LineOne);
    15d2:	2b d1       	rcall	.+598    	; 0x182a <lcd_msg>
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	64 96       	adiw	r28, 0x14	; 20
		return false;
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62

	lcd_msg((uint8_t *)"   Successfully  ",lcd_LineOne);
	lcd_msg((uint8_t *)"    Registered   ",lcd_LineTwo);
	_delay_ms(1000);
	return true;
}
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	7f 90       	pop	r7
    1600:	6f 90       	pop	r6
    1602:	5f 90       	pop	r5
    1604:	4f 90       	pop	r4
    1606:	08 95       	ret

00001608 <fp_available>:
    1608:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <write_buffer_pointer>
    160c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <read_buffer_pointer>

uint8_t fp_getch(void)
{
	while (!(UCSR1A & (1<<RXC1)));		// Wait until a byte is received, always true on ISR call
	return UDR1;						// Return the received byte
}
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	29 13       	cpse	r18, r25
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <fp_available+0x10>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	08 95       	ret

0000161a <fp_read>:
    161a:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <read_buffer_pointer>
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	e8 53       	subi	r30, 0x38	; 56
    1622:	fb 4f       	sbci	r31, 0xFB	; 251
    1624:	80 81       	ld	r24, Z
    1626:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <read_buffer_pointer>
    162a:	9f 5f       	subi	r25, 0xFF	; 255
    162c:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <read_buffer_pointer>
    1630:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <read_buffer_pointer>
    1634:	91 34       	cpi	r25, 0x41	; 65
    1636:	10 f0       	brcs	.+4      	; 0x163c <fp_read+0x22>
    1638:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <read_buffer_pointer>
    163c:	08 95       	ret

0000163e <fp_uartInit>:
    163e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1642:	80 e1       	ldi	r24, 0x10	; 16
    1644:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1648:	ea ec       	ldi	r30, 0xCA	; 202
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	86 60       	ori	r24, 0x06	; 6
    1650:	80 83       	st	Z, r24
    1652:	e9 ec       	ldi	r30, 0xC9	; 201
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	88 69       	ori	r24, 0x98	; 152
    165a:	80 83       	st	Z, r24
    165c:	08 95       	ret

0000165e <fp_putch>:
    165e:	e8 ec       	ldi	r30, 0xC8	; 200
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	90 81       	ld	r25, Z
    1664:	95 ff       	sbrs	r25, 5
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <fp_putch+0x4>
    1668:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    166c:	08 95       	ret

0000166e <__vector_36>:

// ISR for UART1
ISR(USART1_RX_vect) 
{
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	0b b6       	in	r0, 0x3b	; 59
    167a:	0f 92       	push	r0
    167c:	8f 93       	push	r24
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
	ser_buff_in[write_buffer_pointer] = UDR1;   // put received char in circular buffer
    1682:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <write_buffer_pointer>
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    168c:	e8 53       	subi	r30, 0x38	; 56
    168e:	fb 4f       	sbci	r31, 0xFB	; 251
    1690:	80 83       	st	Z, r24
	write_buffer_pointer++;						// increment pointer
    1692:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <write_buffer_pointer>
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <write_buffer_pointer>
	if (write_buffer_pointer > RXBUFFER)
    169c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <write_buffer_pointer>
    16a0:	81 34       	cpi	r24, 0x41	; 65
    16a2:	10 f0       	brcs	.+4      	; 0x16a8 <__vector_36+0x3a>
	{
		write_buffer_pointer = 0;            // reset pointer
    16a4:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <write_buffer_pointer>
	}
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	8f 91       	pop	r24
    16ae:	0f 90       	pop	r0
    16b0:	0b be       	out	0x3b, r0	; 59
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
    16bc:	2f 98       	cbi	0x05, 7	; 5
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
    16be:	88 23       	and	r24, r24
    16c0:	0c f4       	brge	.+2      	; 0x16c4 <lcd_write_4+0x8>
    16c2:	2f 9a       	sbi	0x05, 7	; 5

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
    16c4:	2e 98       	cbi	0x05, 6	; 5
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
    16c6:	86 fd       	sbrc	r24, 6
    16c8:	2e 9a       	sbi	0x05, 6	; 5

    lcd_D5_port &= ~(1<<lcd_D5_bit);
    16ca:	2d 98       	cbi	0x05, 5	; 5
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
    16cc:	85 fd       	sbrc	r24, 5
    16ce:	2d 9a       	sbi	0x05, 5	; 5

    lcd_D4_port &= ~(1<<lcd_D4_bit);
    16d0:	2c 98       	cbi	0x05, 4	; 5
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
    16d2:	84 fd       	sbrc	r24, 4
    16d4:	2c 9a       	sbi	0x05, 4	; 5

	// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
    16d6:	e2 e0       	ldi	r30, 0x02	; 2
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	80 81       	ld	r24, Z
    16dc:	80 64       	ori	r24, 0x40	; 64
    16de:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16e0:	85 e3       	ldi	r24, 0x35	; 53
    16e2:	8a 95       	dec	r24
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <lcd_write_4+0x26>
    16e6:	00 00       	nop
    _delay_us(10);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7b       	andi	r24, 0xBF	; 191
    16ec:	80 83       	st	Z, r24
    16ee:	85 e3       	ldi	r24, 0x35	; 53
    16f0:	8a 95       	dec	r24
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <lcd_write_4+0x34>
    16f4:	00 00       	nop
    16f6:	08 95       	ret

000016f8 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
    16f8:	cf 93       	push	r28
    16fa:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
    16fc:	e2 e0       	ldi	r30, 0x02	; 2
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	80 81       	ld	r24, Z
    1702:	80 62       	ori	r24, 0x20	; 32
    1704:	80 83       	st	Z, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1706:	80 81       	ld	r24, Z
    1708:	8f 7b       	andi	r24, 0xBF	; 191
    170a:	80 83       	st	Z, r24
    lcd_write_4(theData);                           // write the upper 4-bits of the data
    170c:	8c 2f       	mov	r24, r28
    170e:	d6 df       	rcall	.-84     	; 0x16bc <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
    1710:	8c 2f       	mov	r24, r28
    1712:	82 95       	swap	r24
    1714:	80 7f       	andi	r24, 0xF0	; 240
    1716:	d2 df       	rcall	.-92     	; 0x16bc <lcd_write_4>
}
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	fc 01       	movw	r30, r24
    uint8_t i = 0;                             // character counter*/
    while (theString[i] != 0)
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	81 f0       	breq	.+32     	; 0x174a <lcd_write_string_4d+0x2e>
    172a:	8f 01       	movw	r16, r30
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        lcd_write_character_4d(theString[i]);
    172e:	e4 df       	rcall	.-56     	; 0x16f8 <lcd_write_character_4d>
        i++;
    1730:	cf 5f       	subi	r28, 0xFF	; 255
    1732:	8f e3       	ldi	r24, 0x3F	; 63
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <lcd_write_string_4d+0x1a>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <lcd_write_string_4d+0x20>
    173c:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    uint8_t i = 0;                             // character counter*/
    while (theString[i] != 0)
    173e:	f8 01       	movw	r30, r16
    1740:	ec 0f       	add	r30, r28
    1742:	f1 1d       	adc	r31, r1
    1744:	80 81       	ld	r24, Z
    1746:	81 11       	cpse	r24, r1
    1748:	f2 cf       	rjmp	.-28     	; 0x172e <lcd_write_string_4d+0x12>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
    1752:	cf 93       	push	r28
    1754:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    1756:	e2 e0       	ldi	r30, 0x02	; 2
    1758:	f1 e0       	ldi	r31, 0x01	; 1
    175a:	80 81       	ld	r24, Z
    175c:	8f 7d       	andi	r24, 0xDF	; 223
    175e:	80 83       	st	Z, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1760:	80 81       	ld	r24, Z
    1762:	8f 7b       	andi	r24, 0xBF	; 191
    1764:	80 83       	st	Z, r24
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
    1766:	8c 2f       	mov	r24, r28
    1768:	a9 df       	rcall	.-174    	; 0x16bc <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
    176a:	8c 2f       	mov	r24, r28
    176c:	82 95       	swap	r24
    176e:	80 7f       	andi	r24, 0xF0	; 240
    1770:	a5 df       	rcall	.-182    	; 0x16bc <lcd_write_4>
}
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1776:	2f ef       	ldi	r18, 0xFF	; 255
    1778:	81 ee       	ldi	r24, 0xE1	; 225
    177a:	94 e0       	ldi	r25, 0x04	; 4
    177c:	21 50       	subi	r18, 0x01	; 1
    177e:	80 40       	sbci	r24, 0x00	; 0
    1780:	90 40       	sbci	r25, 0x00	; 0
    1782:	e1 f7       	brne	.-8      	; 0x177c <lcd_init_4d+0x6>
    1784:	00 c0       	rjmp	.+0      	; 0x1786 <lcd_init_4d+0x10>
    1786:	00 00       	nop
{
	// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    1788:	e2 e0       	ldi	r30, 0x02	; 2
    178a:	f1 e0       	ldi	r31, 0x01	; 1
    178c:	80 81       	ld	r24, Z
    178e:	8f 7d       	andi	r24, 0xDF	; 223
    1790:	80 83       	st	Z, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1792:	80 81       	ld	r24, Z
    1794:	8f 7b       	andi	r24, 0xBF	; 191
    1796:	80 83       	st	Z, r24

	// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
    1798:	80 e3       	ldi	r24, 0x30	; 48
    179a:	90 df       	rcall	.-224    	; 0x16bc <lcd_write_4>
    179c:	8f e3       	ldi	r24, 0x3F	; 63
    179e:	9c e9       	ldi	r25, 0x9C	; 156
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <lcd_init_4d+0x2a>
    17a4:	00 c0       	rjmp	.+0      	; 0x17a6 <lcd_init_4d+0x30>
    17a6:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
    17a8:	80 e3       	ldi	r24, 0x30	; 48
    17aa:	88 df       	rcall	.-240    	; 0x16bc <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17ac:	8f e1       	ldi	r24, 0x1F	; 31
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <lcd_init_4d+0x3a>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <lcd_init_4d+0x40>
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
    17b6:	00 00       	nop
    17b8:	80 e3       	ldi	r24, 0x30	; 48
    17ba:	80 df       	rcall	.-256    	; 0x16bc <lcd_write_4>
    17bc:	8f e1       	ldi	r24, 0x1F	; 31
    17be:	93 e0       	ldi	r25, 0x03	; 3
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <lcd_init_4d+0x4a>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <lcd_init_4d+0x50>
	// Preliminary Function Set instruction - used only to set the 4-bit mode.
	// The number of lines or the font cannot be set at this time since the controller is still in the
	//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
	//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
    17c6:	00 00       	nop
    17c8:	88 e2       	ldi	r24, 0x28	; 40
    17ca:	78 df       	rcall	.-272    	; 0x16bc <lcd_write_4>
    17cc:	8f e3       	ldi	r24, 0x3F	; 63
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <lcd_init_4d+0x5a>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <lcd_init_4d+0x60>
    _delay_us(80);                                  // 40uS delay (min)

	// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
    17d6:	00 00       	nop
    17d8:	88 e2       	ldi	r24, 0x28	; 40
    17da:	bb df       	rcall	.-138    	; 0x1752 <lcd_write_instruction_4d>
    17dc:	8f e3       	ldi	r24, 0x3F	; 63
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <lcd_init_4d+0x6a>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <lcd_init_4d+0x70>
	// The next three instructions are specified in the data sheet as part of the initialization routine, 
	//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
	//  later if the application requires a different configuration.

	// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
    17e6:	00 00       	nop
    17e8:	88 e0       	ldi	r24, 0x08	; 8
    17ea:	b3 df       	rcall	.-154    	; 0x1752 <lcd_write_instruction_4d>
    17ec:	8f e3       	ldi	r24, 0x3F	; 63
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <lcd_init_4d+0x7a>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <lcd_init_4d+0x80>
    _delay_us(80);                                   // 40uS delay (min)

	// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
    17f6:	00 00       	nop
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	ab df       	rcall	.-170    	; 0x1752 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17fc:	8f e7       	ldi	r24, 0x7F	; 127
    17fe:	9e e3       	ldi	r25, 0x3E	; 62
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <lcd_init_4d+0x8a>
    1804:	00 c0       	rjmp	.+0      	; 0x1806 <lcd_init_4d+0x90>
    _delay_ms(4);                                    // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
    1806:	00 00       	nop
    1808:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    180a:	a3 df       	rcall	.-186    	; 0x1752 <lcd_write_instruction_4d>
    180c:	8f e3       	ldi	r24, 0x3F	; 63
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <lcd_init_4d+0x9a>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <lcd_init_4d+0xa0>

	// This is the end of the LCD controller initialization as specified in the data sheet, but the display
	//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
	// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);        // turn the display ON
    1816:	00 00       	nop
    1818:	8c e0       	ldi	r24, 0x0C	; 12
    181a:	9b df       	rcall	.-202    	; 0x1752 <lcd_write_instruction_4d>
    181c:	8f e3       	ldi	r24, 0x3F	; 63
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <lcd_init_4d+0xaa>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <lcd_init_4d+0xb0>
    1826:	00 00       	nop
    1828:	08 95       	ret

0000182a <lcd_msg>:
    _delay_us(10);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}


void lcd_msg (uint8_t str[],uint8_t line) 
{
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
	uint8_t line_no = lcd_LineTwo;
	if(line == lcd_LineOne)  
    1830:	60 38       	cpi	r22, 0x80	; 128
    1832:	51 f4       	brne	.+20     	; 0x1848 <lcd_msg+0x1e>
	{
		// Clear Display instruction
		lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	8d df       	rcall	.-230    	; 0x1752 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1838:	8f e7       	ldi	r24, 0x7F	; 127
    183a:	9e e3       	ldi	r25, 0x3E	; 62
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <lcd_msg+0x12>
    1840:	00 c0       	rjmp	.+0      	; 0x1842 <lcd_msg+0x18>
    1842:	00 00       	nop
		_delay_ms(4);                                    // 1.64 mS delay (min)
		line_no = lcd_LineOne;
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	01 c0       	rjmp	.+2      	; 0x184a <lcd_msg+0x20>
	}
	lcd_write_instruction_4d(line_no);
    1848:	80 ec       	ldi	r24, 0xC0	; 192
    184a:	83 df       	rcall	.-250    	; 0x1752 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    184c:	8f e3       	ldi	r24, 0x3F	; 63
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <lcd_msg+0x26>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <lcd_msg+0x2c>
	 _delay_us(80);										// 40 uS delay (min)
	lcd_write_string_4d(str);
    1856:	00 00       	nop
    1858:	ce 01       	movw	r24, r28
    185a:	60 df       	rcall	.-320    	; 0x171c <lcd_write_string_4d>
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <lcd_init>:

/******************************* Main Program Code *************************/
void lcd_init(void)
{
	// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
    1862:	27 9a       	sbi	0x04, 7	; 4
    lcd_D6_ddr |= (1<<lcd_D6_bit);
    1864:	26 9a       	sbi	0x04, 6	; 4
    lcd_D5_ddr |= (1<<lcd_D5_bit);
    1866:	25 9a       	sbi	0x04, 5	; 4
    lcd_D4_ddr |= (1<<lcd_D4_bit);
    1868:	24 9a       	sbi	0x04, 4	; 4

	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
    186a:	e1 e0       	ldi	r30, 0x01	; 1
    186c:	f1 e0       	ldi	r31, 0x01	; 1
    186e:	80 81       	ld	r24, Z
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	80 83       	st	Z, r24
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
    1874:	80 81       	ld	r24, Z
    1876:	80 62       	ori	r24, 0x20	; 32
    1878:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    187a:	2f ef       	ldi	r18, 0xFF	; 255
    187c:	89 e6       	ldi	r24, 0x69	; 105
    187e:	98 e1       	ldi	r25, 0x18	; 24
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	80 40       	sbci	r24, 0x00	; 0
    1884:	90 40       	sbci	r25, 0x00	; 0
    1886:	e1 f7       	brne	.-8      	; 0x1880 <lcd_init+0x1e>
    1888:	00 c0       	rjmp	.+0      	; 0x188a <lcd_init+0x28>
    188a:	00 00       	nop
	
	_delay_ms(500);
	// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface
    188c:	74 df       	rcall	.-280    	; 0x1776 <lcd_init_4d>

	// set cursor to start of first line and display the information
	lcd_msg(program_str1,lcd_LineOne);
    188e:	60 e8       	ldi	r22, 0x80	; 128
    1890:	8e eb       	ldi	r24, 0xBE	; 190
    1892:	92 e0       	ldi	r25, 0x02	; 2
    1894:	ca df       	rcall	.-108    	; 0x182a <lcd_msg>

	// set cursor to start of second line and display the information
	lcd_msg(program_str2,lcd_LineTwo);
    1896:	60 ec       	ldi	r22, 0xC0	; 192
    1898:	8f ec       	ldi	r24, 0xCF	; 207
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	c6 cf       	rjmp	.-116    	; 0x182a <lcd_msg>
    189e:	08 95       	ret

000018a0 <config_keypad>:
void config_keypad(void);

void config_keypad(void)
{
	// configure the microprocessor pins for inputs
	key1_ddr &= ~(1<<key1_bit);
    18a0:	6d 98       	cbi	0x0d, 5	; 13
	key2_ddr &= ~(1<<key2_bit);
    18a2:	6c 98       	cbi	0x0d, 4	; 13
	key3_ddr &= ~(1<<key3_bit);
    18a4:	6b 98       	cbi	0x0d, 3	; 13
	key4_ddr &= ~(1<<key4_bit);
    18a6:	9d 98       	cbi	0x13, 5	; 19
	// enable pull up resistors
	key1_port |= (1<<key1_bit);
    18a8:	75 9a       	sbi	0x0e, 5	; 14
	key2_port |= (1<<key2_bit);
    18aa:	74 9a       	sbi	0x0e, 4	; 14
	key3_port |= (1<<key3_bit);
    18ac:	73 9a       	sbi	0x0e, 3	; 14
	key4_port |= (1<<key4_bit);
    18ae:	a5 9a       	sbi	0x14, 5	; 20

	// writing high on relay port to make it off initially
	pump1_port |= (1<<pump1_bit);
    18b0:	11 9a       	sbi	0x02, 1	; 2
	pump2_port |= (1<<pump2_bit);
    18b2:	13 9a       	sbi	0x02, 3	; 2
	pump3_port |= (1<<pump3_bit);
    18b4:	15 9a       	sbi	0x02, 5	; 2
	pump4_port |= (1<<pump4_bit);
    18b6:	17 9a       	sbi	0x02, 7	; 2
	// configuring pins as a output
	pump1_ddr |= (1<<pump1_bit);
    18b8:	09 9a       	sbi	0x01, 1	; 1
	pump2_ddr |= (1<<pump2_bit);
    18ba:	0b 9a       	sbi	0x01, 3	; 1
	pump3_ddr |= (1<<pump3_bit);
    18bc:	0d 9a       	sbi	0x01, 5	; 1
	pump4_ddr |= (1<<pump4_bit);
    18be:	0f 9a       	sbi	0x01, 7	; 1
    18c0:	08 95       	ret

000018c2 <manage_eeprom>:
}

void manage_eeprom(uint8_t finger_ID)
{
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	64 97       	sbiw	r28, 0x14	; 20
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
	char lcd_buffer[20];
	uint8_t id = finger_ID - 1;
	uint16_t base_add = id * 2;
    18de:	81 50       	subi	r24, 0x01	; 1
    18e0:	08 2f       	mov	r16, r24
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	00 0f       	add	r16, r16
    18e6:	11 1f       	adc	r17, r17

	// base address is address in eeprom
	// which contains the drink choice
	// and base + 1 contains remaining turns

	uint8_t choice = eeprom_read_byte((uint8_t *)(base_add));
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <eeprom_read_byte>
    18ee:	e8 2e       	mov	r14, r24
	uint8_t turns  = eeprom_read_byte((uint8_t *)(base_add + 1));
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	c8 01       	movw	r24, r16
    18f6:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <eeprom_read_byte>
    18fa:	f8 2e       	mov	r15, r24

	if(turns > 0) // turns are there
    18fc:	88 23       	and	r24, r24
    18fe:	09 f4       	brne	.+2      	; 0x1902 <manage_eeprom+0x40>
    1900:	6b c0       	rjmp	.+214    	; 0x19d8 <manage_eeprom+0x116>
	{
		lcd_msg((uint8_t *)" Opening Valve ",lcd_LineOne);
    1902:	60 e8       	ldi	r22, 0x80	; 128
    1904:	80 ee       	ldi	r24, 0xE0	; 224
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	90 df       	rcall	.-224    	; 0x182a <lcd_msg>
		lcd_msg((uint8_t *)"w.r.t to choice",lcd_LineTwo);
    190a:	60 ec       	ldi	r22, 0xC0	; 192
    190c:	80 ef       	ldi	r24, 0xF0	; 240
    190e:	92 e0       	ldi	r25, 0x02	; 2
    1910:	8c df       	rcall	.-232    	; 0x182a <lcd_msg>
		// open valve for set amount of time according to choice
		switch(choice)
    1912:	22 e0       	ldi	r18, 0x02	; 2
    1914:	e2 16       	cp	r14, r18
    1916:	c9 f0       	breq	.+50     	; 0x194a <manage_eeprom+0x88>
    1918:	2e 15       	cp	r18, r14
    191a:	20 f0       	brcs	.+8      	; 0x1924 <manage_eeprom+0x62>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	e8 16       	cp	r14, r24
    1920:	41 f0       	breq	.+16     	; 0x1932 <manage_eeprom+0x70>
    1922:	36 c0       	rjmp	.+108    	; 0x1990 <manage_eeprom+0xce>
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	e9 16       	cp	r14, r25
    1928:	e1 f0       	breq	.+56     	; 0x1962 <manage_eeprom+0xa0>
    192a:	24 e0       	ldi	r18, 0x04	; 4
    192c:	e2 16       	cp	r14, r18
    192e:	29 f1       	breq	.+74     	; 0x197a <manage_eeprom+0xb8>
    1930:	2f c0       	rjmp	.+94     	; 0x1990 <manage_eeprom+0xce>
		{
			case 1:
				pump1_port &= ~(1<<pump1_bit);	// on relay on low logic
    1932:	11 98       	cbi	0x02, 1	; 2
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9b e7       	ldi	r25, 0x7B	; 123
    1938:	22 e9       	ldi	r18, 0x92	; 146
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	90 40       	sbci	r25, 0x00	; 0
    193e:	20 40       	sbci	r18, 0x00	; 0
    1940:	e1 f7       	brne	.-8      	; 0x193a <manage_eeprom+0x78>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <manage_eeprom+0x82>
    1944:	00 00       	nop
				_delay_ms(pump_on_time);		// delay
				pump1_port |= (1<<pump1_bit);	// off the relay on high logic
    1946:	11 9a       	sbi	0x02, 1	; 2
			break;
    1948:	23 c0       	rjmp	.+70     	; 0x1990 <manage_eeprom+0xce>

			case 2:
				pump2_port &= ~(1<<pump2_bit);	// on relay on low logic
    194a:	13 98       	cbi	0x02, 3	; 2
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	9b e7       	ldi	r25, 0x7B	; 123
    1950:	22 e9       	ldi	r18, 0x92	; 146
    1952:	81 50       	subi	r24, 0x01	; 1
    1954:	90 40       	sbci	r25, 0x00	; 0
    1956:	20 40       	sbci	r18, 0x00	; 0
    1958:	e1 f7       	brne	.-8      	; 0x1952 <manage_eeprom+0x90>
    195a:	00 c0       	rjmp	.+0      	; 0x195c <manage_eeprom+0x9a>
    195c:	00 00       	nop
				_delay_ms(pump_on_time);		// delay
				pump2_port |= (1<<pump2_bit);	// off the relay on high logic
    195e:	13 9a       	sbi	0x02, 3	; 2
			break;
    1960:	17 c0       	rjmp	.+46     	; 0x1990 <manage_eeprom+0xce>

			case 3:
				pump3_port &= ~(1<<pump3_bit);	// on relay on low logic
    1962:	15 98       	cbi	0x02, 5	; 2
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9b e7       	ldi	r25, 0x7B	; 123
    1968:	22 e9       	ldi	r18, 0x92	; 146
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	90 40       	sbci	r25, 0x00	; 0
    196e:	20 40       	sbci	r18, 0x00	; 0
    1970:	e1 f7       	brne	.-8      	; 0x196a <manage_eeprom+0xa8>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <manage_eeprom+0xb2>
    1974:	00 00       	nop
				_delay_ms(pump_on_time);		// delay
				pump3_port |= (1<<pump3_bit);	// off the relay on high logic
    1976:	15 9a       	sbi	0x02, 5	; 2
			break;
    1978:	0b c0       	rjmp	.+22     	; 0x1990 <manage_eeprom+0xce>

			case 4:
				pump4_port &= ~(1<<pump4_bit);	// on relay on low logic
    197a:	17 98       	cbi	0x02, 7	; 2
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	9b e7       	ldi	r25, 0x7B	; 123
    1980:	22 e9       	ldi	r18, 0x92	; 146
    1982:	81 50       	subi	r24, 0x01	; 1
    1984:	90 40       	sbci	r25, 0x00	; 0
    1986:	20 40       	sbci	r18, 0x00	; 0
    1988:	e1 f7       	brne	.-8      	; 0x1982 <manage_eeprom+0xc0>
    198a:	00 c0       	rjmp	.+0      	; 0x198c <manage_eeprom+0xca>
    198c:	00 00       	nop
				_delay_ms(pump_on_time);		// delay
				pump4_port |= (1<<pump4_bit);	// off the relay on high logic
    198e:	17 9a       	sbi	0x02, 7	; 2

			default:
			break;
		}
		// update turn in eeprom
		eeprom_update_byte((uint8_t *)(base_add + 1),(turns - 1));
    1990:	6f ef       	ldi	r22, 0xFF	; 255
    1992:	6f 0d       	add	r22, r15
    1994:	c8 01       	movw	r24, r16
    1996:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <eeprom_update_byte>
		lcd_msg((uint8_t *)"Remaining Tries",lcd_LineOne);
    199a:	60 e8       	ldi	r22, 0x80	; 128
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	93 e0       	ldi	r25, 0x03	; 3
    19a0:	44 df       	rcall	.-376    	; 0x182a <lcd_msg>
		snprintf(lcd_buffer,sizeof(lcd_buffer),"        %i       ",(turns - 1));
    19a2:	8f 2d       	mov	r24, r15
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	80 e1       	ldi	r24, 0x10	; 16
    19ae:	93 e0       	ldi	r25, 0x03	; 3
    19b0:	9f 93       	push	r25
    19b2:	8f 93       	push	r24
    19b4:	1f 92       	push	r1
    19b6:	84 e1       	ldi	r24, 0x14	; 20
    19b8:	8f 93       	push	r24
    19ba:	8e 01       	movw	r16, r28
    19bc:	0f 5f       	subi	r16, 0xFF	; 255
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	1f 93       	push	r17
    19c2:	0f 93       	push	r16
		lcd_msg((uint8_t *)lcd_buffer,lcd_LineTwo);
    19c4:	69 d2       	rcall	.+1234   	; 0x1e98 <snprintf>
    19c6:	60 ec       	ldi	r22, 0xC0	; 192
    19c8:	c8 01       	movw	r24, r16
    19ca:	2f df       	rcall	.-418    	; 0x182a <lcd_msg>
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
	}
	else // turns expires
	{
		printf_P(PSTR("All Tries Expired\r\n"));
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <manage_eeprom+0x12c>
    19d8:	81 ec       	ldi	r24, 0xC1	; 193
    19da:	95 e0       	ldi	r25, 0x05	; 5
    19dc:	9f 93       	push	r25
    19de:	8f 93       	push	r24
		lcd_msg((uint8_t *)" Tries Expired ",lcd_LineOne);
    19e0:	21 d2       	rcall	.+1090   	; 0x1e24 <printf_P>
    19e2:	60 e8       	ldi	r22, 0x80	; 128
    19e4:	82 e2       	ldi	r24, 0x22	; 34
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	20 df       	rcall	.-448    	; 0x182a <lcd_msg>
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
	}
}
    19ee:	64 96       	adiw	r28, 0x14	; 20
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	08 95       	ret

00001a08 <manage_choices>:

void manage_choices(void)
{
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	64 97       	sbiw	r28, 0x14	; 20
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
	uint8_t id = getTemplateCount();
    1a26:	40 db       	rcall	.-2432   	; 0x10a8 <getTemplateCount>
	uint16_t base_add = id * 2;
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	7c 01       	movw	r14, r24
    1a2e:	e8 94       	clt
    1a30:	e0 f8       	bld	r14, 0
    1a32:	21 e0       	ldi	r18, 0x01	; 1
    1a34:	f2 22       	and	r15, r18
	uint8_t turns = 5;
	uint8_t choice = 0;
	char lcd_buffer[20];

	lcd_msg((uint8_t *)"  Enter Options ",lcd_LineOne);
    1a36:	60 e8       	ldi	r22, 0x80	; 128
    1a38:	82 e3       	ldi	r24, 0x32	; 50
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	f6 de       	rcall	.-532    	; 0x182a <lcd_msg>
	lcd_msg((uint8_t *)"Press 1,2,3 or 4",lcd_LineTwo);
    1a3e:	60 ec       	ldi	r22, 0xC0	; 192
    1a40:	83 e4       	ldi	r24, 0x43	; 67
    1a42:	93 e0       	ldi	r25, 0x03	; 3
    1a44:	f2 de       	rcall	.-540    	; 0x182a <lcd_msg>
	// wait here to press for key to consider a choice
	while (is_key1_press && is_key2_press && is_key3_press && is_key4_press);
    1a46:	65 9b       	sbis	0x0c, 5	; 12
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <manage_choices+0x4e>
    1a4a:	64 9b       	sbis	0x0c, 4	; 12
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <manage_choices+0x4e>
    1a4e:	63 9b       	sbis	0x0c, 3	; 12
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <manage_choices+0x4e>
    1a52:	95 99       	sbic	0x12, 5	; 18
    1a54:	f8 cf       	rjmp	.-16     	; 0x1a46 <manage_choices+0x3e>
	// see which pin is pressed
	if(!is_key1_press) choice = 1;
    1a56:	1c b1       	in	r17, 0x0c	; 12
	if(!is_key2_press) choice = 2;
    1a58:	64 9b       	sbis	0x0c, 4	; 12
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <manage_choices+0x60>
void manage_choices(void)
{
	uint8_t id = getTemplateCount();
	uint16_t base_add = id * 2;
	uint8_t turns = 5;
	uint8_t choice = 0;
    1a5c:	15 fb       	bst	r17, 5
    1a5e:	11 27       	eor	r17, r17
    1a60:	10 f9       	bld	r17, 0
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	19 27       	eor	r17, r25
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <manage_choices+0x62>
	lcd_msg((uint8_t *)"Press 1,2,3 or 4",lcd_LineTwo);
	// wait here to press for key to consider a choice
	while (is_key1_press && is_key2_press && is_key3_press && is_key4_press);
	// see which pin is pressed
	if(!is_key1_press) choice = 1;
	if(!is_key2_press) choice = 2;
    1a68:	12 e0       	ldi	r17, 0x02	; 2
	if(!is_key3_press) choice = 3;
    1a6a:	63 9b       	sbis	0x0c, 3	; 12
    1a6c:	13 e0       	ldi	r17, 0x03	; 3
	if(!is_key4_press) choice = 4;
    1a6e:	95 9b       	sbis	0x12, 5	; 18
    1a70:	14 e0       	ldi	r17, 0x04	; 4

	snprintf(lcd_buffer,sizeof(lcd_buffer),"        %i       ",choice);
    1a72:	1f 92       	push	r1
    1a74:	1f 93       	push	r17
    1a76:	80 e1       	ldi	r24, 0x10	; 16
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	9f 93       	push	r25
    1a7c:	8f 93       	push	r24
    1a7e:	1f 92       	push	r1
    1a80:	84 e1       	ldi	r24, 0x14	; 20
    1a82:	8f 93       	push	r24
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	6c 01       	movw	r12, r24
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
	lcd_msg((uint8_t *)lcd_buffer,lcd_LineOne);
    1a8e:	04 d2       	rcall	.+1032   	; 0x1e98 <snprintf>
    1a90:	60 e8       	ldi	r22, 0x80	; 128
    1a92:	c6 01       	movw	r24, r12
	lcd_msg((uint8_t *)"  is selected   ",lcd_LineTwo);
    1a94:	ca de       	rcall	.-620    	; 0x182a <lcd_msg>
    1a96:	60 ec       	ldi	r22, 0xC0	; 192
    1a98:	84 e5       	ldi	r24, 0x54	; 84
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	c6 de       	rcall	.-628    	; 0x182a <lcd_msg>

	// update values in eeprom
	eeprom_update_byte((uint8_t *)(base_add),choice);
    1a9e:	61 2f       	mov	r22, r17
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)(base_add + 1),turns);
    1aa6:	65 e0       	ldi	r22, 0x05	; 5
    1aa8:	c7 01       	movw	r24, r14
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <eeprom_update_byte>
}
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	64 96       	adiw	r28, 0x14	; 20
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <main>:

int main(void)
{
	config_keypad();			// configure keypad pins
    1ad6:	e4 de       	rcall	.-568    	; 0x18a0 <config_keypad>
	init_millis(16000000UL);	// frequency at which atmega2560 is running
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	74 e2       	ldi	r23, 0x24	; 36
    1adc:	84 ef       	ldi	r24, 0xF4	; 244
    1ade:	90 e0       	ldi	r25, 0x00	; 0
	USART0Init();				// hardware serial port for 9600 bps
    1ae0:	f2 d0       	rcall	.+484    	; 0x1cc6 <init_millis>
    1ae2:	2d d1       	rcall	.+602    	; 0x1d3e <USART0Init>
	lcd_init();					// initialize the 16*2 lcd
    1ae4:	be de       	rcall	.-644    	; 0x1862 <lcd_init>
    1ae6:	2f ef       	ldi	r18, 0xFF	; 255
    1ae8:	83 ed       	ldi	r24, 0xD3	; 211
    1aea:	90 e3       	ldi	r25, 0x30	; 48
    1aec:	21 50       	subi	r18, 0x01	; 1
    1aee:	80 40       	sbci	r24, 0x00	; 0
    1af0:	90 40       	sbci	r25, 0x00	; 0
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <main+0x16>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <main+0x20>
    1af6:	00 00       	nop
	_delay_ms(1000);
	fp_uartInit();				// finger print module for 57600 bps
    1af8:	a2 dd       	rcall	.-1212   	; 0x163e <fp_uartInit>
    1afa:	8f e1       	ldi	r24, 0x1F	; 31
    1afc:	9e e4       	ldi	r25, 0x4E	; 78
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <main+0x28>
    1b02:	00 c0       	rjmp	.+0      	; 0x1b04 <main+0x2e>
    1b04:	00 00       	nop
    1b06:	78 94       	sei
	_delay_ms(5);
	sei();
    1b08:	0e 94 75 05 	call	0xaea	; 0xaea <verifyPassword>

	// for verification that module is connected
	if(verifyPassword())
    1b0c:	88 23       	and	r24, r24
    1b0e:	49 f0       	breq	.+18     	; 0x1b22 <main+0x4c>
	{
		lcd_msg((uint8_t *)"  FingerPrint  ",lcd_LineOne);
    1b10:	60 e8       	ldi	r22, 0x80	; 128
    1b12:	85 e6       	ldi	r24, 0x65	; 101
    1b14:	93 e0       	ldi	r25, 0x03	; 3
    1b16:	89 de       	rcall	.-750    	; 0x182a <lcd_msg>
		lcd_msg((uint8_t *)"  Sensor Found ",lcd_LineTwo);
    1b18:	60 ec       	ldi	r22, 0xC0	; 192
    1b1a:	85 e7       	ldi	r24, 0x75	; 117
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	85 de       	rcall	.-758    	; 0x182a <lcd_msg>
    1b20:	08 c0       	rjmp	.+16     	; 0x1b32 <main+0x5c>
	}
	else
	{
		lcd_msg((uint8_t *)"  FingerPrint  ",lcd_LineOne);
    1b22:	60 e8       	ldi	r22, 0x80	; 128
    1b24:	85 e6       	ldi	r24, 0x65	; 101
		lcd_msg((uint8_t *)"   Not Found   ",lcd_LineTwo);
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	80 de       	rcall	.-768    	; 0x182a <lcd_msg>
    1b2a:	60 ec       	ldi	r22, 0xC0	; 192
    1b2c:	85 e8       	ldi	r24, 0x85	; 133
	}
	// read fp configurations
	read_config();
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	7c de       	rcall	.-776    	; 0x182a <lcd_msg>
	// get already saved template
	template_cnt = getTemplateCount();
    1b32:	a4 d8       	rcall	.-3768   	; 0xc7c <read_config>
    1b34:	b9 da       	rcall	.-2702   	; 0x10a8 <getTemplateCount>
    1b36:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <template_cnt+0x1>
    1b3a:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <template_cnt>

	// if user want to delete any id then uncomment below function deleteFingerprint(id) 
	// id is a number > 0
	//deleteFingerprint(id);

	Home_Millis = millis();
    1b3e:	db d0       	rcall	.+438    	; 0x1cf6 <millis>
    1b40:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Home_Millis>
    1b44:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Home_Millis+0x1>
    1b48:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <Home_Millis+0x2>
    1b4c:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <Home_Millis+0x3>
		if((millis() - Home_Millis) >= 2000) // update lcd after 2 seconds
		{
			if(!clear)
			{
				lcd_msg((uint8_t *)" 16*2 LCD Demo  ",lcd_LineOne);				
				clear = true;
    1b50:	ff 24       	eor	r15, r15
    1b52:	f3 94       	inc	r15
			Home_Millis = millis();
		}

		if(getch())
		{
			printf_P(PSTR("clearing all finger prints\r\n"));
    1b54:	c4 ea       	ldi	r28, 0xA4	; 164
    1b56:	d5 e0       	ldi	r29, 0x05	; 5
	Home_Millis = millis();
	
    // Replace with your application code
    while (1) 
    {
		if(template_cnt > 0) // if there are already saved finger prints in database
    1b58:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <template_cnt>
    1b5c:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <template_cnt+0x1>
    1b60:	89 2b       	or	r24, r25
		{
			finger_ID = getFingerprintIDez();
    1b62:	e9 f0       	breq	.+58     	; 0x1b9e <main+0xc8>
    1b64:	2a da       	rcall	.-2988   	; 0xfba <getFingerprintIDez>
    1b66:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <finger_ID+0x1>
    1b6a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <finger_ID>
			// the below is alternate function that can also be used
			//finger_ID = getFingerprintID();
			// its found a valid finger print
			if(finger_ID > 0)
    1b6e:	18 16       	cp	r1, r24
    1b70:	19 06       	cpc	r1, r25
			{
				// now check condition either selected drink can be issued or not
				manage_eeprom(finger_ID);
    1b72:	64 f4       	brge	.+24     	; 0x1b8c <main+0xb6>
    1b74:	a6 de       	rcall	.-692    	; 0x18c2 <manage_eeprom>
				clear = false;
    1b76:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <clear>
				Home_Millis = millis();
    1b7a:	bd d0       	rcall	.+378    	; 0x1cf6 <millis>
    1b7c:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Home_Millis>
    1b80:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Home_Millis+0x1>
    1b84:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <Home_Millis+0x2>
    1b88:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <Home_Millis+0x3>
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	20 e7       	ldi	r18, 0x70	; 112
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	91 50       	subi	r25, 0x01	; 1
    1b94:	20 40       	sbci	r18, 0x00	; 0
    1b96:	80 40       	sbci	r24, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <main+0xbc>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <main+0xc6>
			}
			_delay_ms(50);
		}
		// if any key is press it is consider to register
		if(!(is_key1_press && is_key2_press && is_key3_press && is_key4_press))
    1b9c:	00 00       	nop
    1b9e:	65 9b       	sbis	0x0c, 5	; 12
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <main+0xd8>
    1ba2:	64 9b       	sbis	0x0c, 4	; 12
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <main+0xd8>
    1ba6:	63 9b       	sbis	0x0c, 3	; 12
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <main+0xd8>
		{
			// check either id already exist
			if(getFingerprintIDez() < 0)
    1baa:	95 99       	sbic	0x12, 5	; 18
    1bac:	20 c0       	rjmp	.+64     	; 0x1bee <main+0x118>
    1bae:	05 da       	rcall	.-3062   	; 0xfba <getFingerprintIDez>
			{			
				// it means user want to enroll finger
				if(getFingerprintEnroll() == true) // if successful
    1bb0:	99 23       	and	r25, r25
    1bb2:	54 f4       	brge	.+20     	; 0x1bc8 <main+0xf2>
    1bb4:	95 da       	rcall	.-2774   	; 0x10e0 <getFingerprintEnroll>
				{
					manage_choices();
    1bb6:	88 23       	and	r24, r24
    1bb8:	79 f0       	breq	.+30     	; 0x1bd8 <main+0x102>
					template_cnt = getTemplateCount();
    1bba:	26 df       	rcall	.-436    	; 0x1a08 <manage_choices>
    1bbc:	75 da       	rcall	.-2838   	; 0x10a8 <getTemplateCount>
    1bbe:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <template_cnt+0x1>
    1bc2:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <template_cnt>
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <main+0x102>
				}
			}
			else // if already exist
			{				
				lcd_msg((uint8_t *)"  User Already  ",lcd_LineOne);
    1bc8:	60 e8       	ldi	r22, 0x80	; 128
    1bca:	85 e9       	ldi	r24, 0x95	; 149
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	2d de       	rcall	.-934    	; 0x182a <lcd_msg>
				lcd_msg((uint8_t *)"   Registered   ",lcd_LineTwo);		
    1bd0:	60 ec       	ldi	r22, 0xC0	; 192
    1bd2:	8d ea       	ldi	r24, 0xAD	; 173
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
    1bd6:	29 de       	rcall	.-942    	; 0x182a <lcd_msg>
    1bd8:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <clear>
			}
			clear = false;
    1bdc:	9f ef       	ldi	r25, 0xFF	; 255
    1bde:	27 ea       	ldi	r18, 0xA7	; 167
    1be0:	81 e6       	ldi	r24, 0x61	; 97
    1be2:	91 50       	subi	r25, 0x01	; 1
    1be4:	20 40       	sbci	r18, 0x00	; 0
    1be6:	80 40       	sbci	r24, 0x00	; 0
    1be8:	e1 f7       	brne	.-8      	; 0x1be2 <main+0x10c>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <main+0x116>
    1bec:	00 00       	nop
    1bee:	83 d0       	rcall	.+262    	; 0x1cf6 <millis>
			_delay_ms(2000);
		}
		
		if((millis() - Home_Millis) >= 2000) // update lcd after 2 seconds
    1bf0:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <Home_Millis>
    1bf4:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <Home_Millis+0x1>
    1bf8:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <Home_Millis+0x2>
    1bfc:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <Home_Millis+0x3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	80 1b       	sub	r24, r16
    1c06:	91 0b       	sbc	r25, r17
    1c08:	a2 0b       	sbc	r26, r18
    1c0a:	b3 0b       	sbc	r27, r19
    1c0c:	80 3d       	cpi	r24, 0xD0	; 208
    1c0e:	97 40       	sbci	r25, 0x07	; 7
    1c10:	a1 05       	cpc	r26, r1
    1c12:	b1 05       	cpc	r27, r1
		{
			if(!clear)
    1c14:	b8 f0       	brcs	.+46     	; 0x1c44 <main+0x16e>
    1c16:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <clear>
			{
				lcd_msg((uint8_t *)" 16*2 LCD Demo  ",lcd_LineOne);				
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <main+0x154>
    1c1e:	60 e8       	ldi	r22, 0x80	; 128
    1c20:	8e eb       	ldi	r24, 0xBE	; 190
				clear = true;
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	02 de       	rcall	.-1020   	; 0x182a <lcd_msg>
			}
			lcd_msg((uint8_t *)" with FP Module ",lcd_LineTwo);
    1c26:	f0 92 bb 04 	sts	0x04BB, r15	; 0x8004bb <clear>
    1c2a:	60 ec       	ldi	r22, 0xC0	; 192
			Home_Millis = millis();
    1c2c:	8f ec       	ldi	r24, 0xCF	; 207
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	fc dd       	rcall	.-1032   	; 0x182a <lcd_msg>
    1c32:	61 d0       	rcall	.+194    	; 0x1cf6 <millis>
    1c34:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Home_Millis>
    1c38:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Home_Millis+0x1>
    1c3c:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <Home_Millis+0x2>
		}

		if(getch())
    1c40:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <Home_Millis+0x3>
    1c44:	9a d0       	rcall	.+308    	; 0x1d7a <getch>
    1c46:	88 23       	and	r24, r24
		{
			printf_P(PSTR("clearing all finger prints\r\n"));
    1c48:	91 f0       	breq	.+36     	; 0x1c6e <main+0x198>
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	ea d0       	rcall	.+468    	; 0x1e24 <printf_P>
			lcd_msg((uint8_t *)"Clearing Memory ",lcd_LineOne);
    1c50:	60 e8       	ldi	r22, 0x80	; 128
    1c52:	86 ea       	ldi	r24, 0xA6	; 166
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	e9 dd       	rcall	.-1070   	; 0x182a <lcd_msg>
    1c58:	4e d0       	rcall	.+156    	; 0x1cf6 <millis>
			Home_Millis = millis();
    1c5a:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Home_Millis>
    1c5e:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Home_Millis+0x1>
    1c62:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <Home_Millis+0x2>
    1c66:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <Home_Millis+0x3>
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	8f e3       	ldi	r24, 0x3F	; 63
    1c70:	9c e9       	ldi	r25, 0x9C	; 156
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <main+0x19c>
    1c76:	00 c0       	rjmp	.+0      	; 0x1c78 <main+0x1a2>
    1c78:	00 00       	nop
    1c7a:	6e cf       	rjmp	.-292    	; 0x1b58 <main+0x82>

00001c7c <__vector_17>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
  timer1_millis++;
    1c8e:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <timer1_millis>
    1c92:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <timer1_millis+0x1>
    1c96:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <timer1_millis+0x2>
    1c9a:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <timer1_millis+0x3>
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	b1 1d       	adc	r27, r1
    1ca4:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <timer1_millis>
    1ca8:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <timer1_millis+0x1>
    1cac:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <timer1_millis+0x2>
    1cb0:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <timer1_millis+0x3>
}
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    1cc6:	20 e4       	ldi	r18, 0x40	; 64
    1cc8:	3f e1       	ldi	r19, 0x1F	; 31
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	77 d0       	rcall	.+238    	; 0x1dbe <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    1cd0:	e1 e8       	ldi	r30, 0x81	; 129
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8a 60       	ori	r24, 0x0A	; 10
    1cd8:	80 83       	st	Z, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    1cda:	bb 27       	eor	r27, r27
    1cdc:	a5 2f       	mov	r26, r21
    1cde:	94 2f       	mov	r25, r20
    1ce0:	83 2f       	mov	r24, r19
    1ce2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
  OCR1AL = ctc_match_overflow;
    1ce6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

  // Enable the compare match interrupt
  TIMSK1 |= (1 << OCIE1A);
    1cea:	ef e6       	ldi	r30, 0x6F	; 111
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	82 60       	ori	r24, 0x02	; 2
    1cf2:	80 83       	st	Z, r24
    1cf4:	08 95       	ret

00001cf6 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cf6:	f8 94       	cli
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    millis_return = timer1_millis;
    1cf8:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <timer1_millis>
    1cfc:	70 91 09 05 	lds	r23, 0x0509	; 0x800509 <timer1_millis+0x1>
    1d00:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <timer1_millis+0x2>
    1d04:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1d08:	78 94       	sei
  }
  return millis_return;
}
    1d0a:	08 95       	ret

00001d0c <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
    1d0c:	e0 ec       	ldi	r30, 0xC0	; 192
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	90 81       	ld	r25, Z
    1d12:	95 ff       	sbrs	r25, 5
    1d14:	fd cf       	rjmp	.-6      	; 0x1d10 <USART0SendByte+0x4>
	// Transmit data
	UDR0 = u8Data;
    1d16:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	08 95       	ret

00001d20 <USART0ReceiveByte>:

int USART0ReceiveByte(FILE *stream)
{
    1d20:	cf 93       	push	r28
    1d22:	bc 01       	movw	r22, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while(!(UCSR0A&(1 << RXC0))){};
    1d24:	e0 ec       	ldi	r30, 0xC0	; 192
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	90 81       	ld	r25, Z
    1d2a:	99 23       	and	r25, r25
    1d2c:	ec f7       	brge	.-6      	; 0x1d28 <USART0ReceiveByte+0x8>
	u8Data=UDR0;
    1d2e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//echo input data
	USART0SendByte(u8Data,stream);
    1d32:	8c 2f       	mov	r24, r28
    1d34:	eb df       	rcall	.-42     	; 0x1d0c <USART0SendByte>
	// Return received data
	return u8Data;
}
    1d36:	8c 2f       	mov	r24, r28
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <USART0Init>:
FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, USART0ReceiveByte, _FDEV_SETUP_RW);

void USART0Init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    1d3e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
    1d42:	87 e6       	ldi	r24, 0x67	; 103
    1d44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    1d48:	e2 ec       	ldi	r30, 0xC2	; 194
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	86 60       	ori	r24, 0x06	; 6
    1d50:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1d52:	e1 ec       	ldi	r30, 0xC1	; 193
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 61       	ori	r24, 0x18	; 24
    1d5a:	80 83       	st	Z, r24
	//assign our stream to standard I/O streams
	stdin=stdout = &usart0_str;
    1d5c:	ec e0       	ldi	r30, 0x0C	; 12
    1d5e:	f5 e0       	ldi	r31, 0x05	; 5
    1d60:	8c e0       	ldi	r24, 0x0C	; 12
    1d62:	92 e0       	ldi	r25, 0x02	; 2
    1d64:	93 83       	std	Z+3, r25	; 0x03
    1d66:	82 83       	std	Z+2, r24	; 0x02
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	08 95       	ret

00001d6e <kbhit>:
	return u8Data;
}

bool kbhit (void)
{
	if (bit_is_set (UCSR0A, RXC0))
    1d6e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		return true;
	else
		return false;
}
    1d72:	88 1f       	adc	r24, r24
    1d74:	88 27       	eor	r24, r24
    1d76:	88 1f       	adc	r24, r24
    1d78:	08 95       	ret

00001d7a <getch>:

bool getch(void)
{
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	1f 92       	push	r1
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8Data = 0;
    1d84:	19 82       	std	Y+1, r1	; 0x01
	bool valid = false;
	if(kbhit())
    1d86:	f3 df       	rcall	.-26     	; 0x1d6e <kbhit>
    1d88:	88 23       	and	r24, r24
    1d8a:	a1 f0       	breq	.+40     	; 0x1db4 <getch+0x3a>
	{
		//scan standard stream (USART)
		scanf("%c",&u8Data);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	9f 93       	push	r25
    1d92:	8f 93       	push	r24
    1d94:	87 eb       	ldi	r24, 0xB7	; 183
    1d96:	93 e0       	ldi	r25, 0x03	; 3
    1d98:	9f 93       	push	r25
    1d9a:	8f 93       	push	r24
    1d9c:	6a d0       	rcall	.+212    	; 0x1e72 <scanf>
		if(u8Data == 'D' || u8Data == 'd') valid = true;
    1d9e:	99 81       	ldd	r25, Y+1	; 0x01
    1da0:	9f 7d       	andi	r25, 0xDF	; 223
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	94 34       	cpi	r25, 0x44	; 68
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <getch+0x3c>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <getch+0x3c>
}

bool getch(void)
{
	uint8_t u8Data = 0;
	bool valid = false;
    1db4:	80 e0       	ldi	r24, 0x00	; 0
		//scan standard stream (USART)
		scanf("%c",&u8Data);
		if(u8Data == 'D' || u8Data == 'd') valid = true;
	}
	return valid;
}
    1db6:	0f 90       	pop	r0
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	08 95       	ret

00001dbe <__udivmodsi4>:
    1dbe:	a1 e2       	ldi	r26, 0x21	; 33
    1dc0:	1a 2e       	mov	r1, r26
    1dc2:	aa 1b       	sub	r26, r26
    1dc4:	bb 1b       	sub	r27, r27
    1dc6:	fd 01       	movw	r30, r26
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <__udivmodsi4_ep>

00001dca <__udivmodsi4_loop>:
    1dca:	aa 1f       	adc	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	ee 1f       	adc	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	a2 17       	cp	r26, r18
    1dd4:	b3 07       	cpc	r27, r19
    1dd6:	e4 07       	cpc	r30, r20
    1dd8:	f5 07       	cpc	r31, r21
    1dda:	20 f0       	brcs	.+8      	; 0x1de4 <__udivmodsi4_ep>
    1ddc:	a2 1b       	sub	r26, r18
    1dde:	b3 0b       	sbc	r27, r19
    1de0:	e4 0b       	sbc	r30, r20
    1de2:	f5 0b       	sbc	r31, r21

00001de4 <__udivmodsi4_ep>:
    1de4:	66 1f       	adc	r22, r22
    1de6:	77 1f       	adc	r23, r23
    1de8:	88 1f       	adc	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	1a 94       	dec	r1
    1dee:	69 f7       	brne	.-38     	; 0x1dca <__udivmodsi4_loop>
    1df0:	60 95       	com	r22
    1df2:	70 95       	com	r23
    1df4:	80 95       	com	r24
    1df6:	90 95       	com	r25
    1df8:	9b 01       	movw	r18, r22
    1dfa:	ac 01       	movw	r20, r24
    1dfc:	bd 01       	movw	r22, r26
    1dfe:	cf 01       	movw	r24, r30
    1e00:	08 95       	ret

00001e02 <__tablejump2__>:
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	88 1f       	adc	r24, r24
    1e08:	8b bf       	out	0x3b, r24	; 59
    1e0a:	07 90       	elpm	r0, Z+
    1e0c:	f6 91       	elpm	r31, Z
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	19 94       	eijmp

00001e12 <memcpy>:
    1e12:	fb 01       	movw	r30, r22
    1e14:	dc 01       	movw	r26, r24
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <memcpy+0xa>
    1e18:	01 90       	ld	r0, Z+
    1e1a:	0d 92       	st	X+, r0
    1e1c:	41 50       	subi	r20, 0x01	; 1
    1e1e:	50 40       	sbci	r21, 0x00	; 0
    1e20:	d8 f7       	brcc	.-10     	; 0x1e18 <memcpy+0x6>
    1e22:	08 95       	ret

00001e24 <printf_P>:
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	ae 01       	movw	r20, r28
    1e32:	48 5f       	subi	r20, 0xF8	; 248
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	da 01       	movw	r26, r20
    1e38:	6d 91       	ld	r22, X+
    1e3a:	7d 91       	ld	r23, X+
    1e3c:	ad 01       	movw	r20, r26
    1e3e:	0c e0       	ldi	r16, 0x0C	; 12
    1e40:	15 e0       	ldi	r17, 0x05	; 5
    1e42:	f8 01       	movw	r30, r16
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	dc 01       	movw	r26, r24
    1e4a:	13 96       	adiw	r26, 0x03	; 3
    1e4c:	2c 91       	ld	r18, X
    1e4e:	13 97       	sbiw	r26, 0x03	; 3
    1e50:	28 60       	ori	r18, 0x08	; 8
    1e52:	13 96       	adiw	r26, 0x03	; 3
    1e54:	2c 93       	st	X, r18
    1e56:	5c d0       	rcall	.+184    	; 0x1f10 <vfprintf>
    1e58:	d8 01       	movw	r26, r16
    1e5a:	12 96       	adiw	r26, 0x02	; 2
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	13 97       	sbiw	r26, 0x03	; 3
    1e62:	23 81       	ldd	r18, Z+3	; 0x03
    1e64:	27 7f       	andi	r18, 0xF7	; 247
    1e66:	23 83       	std	Z+3, r18	; 0x03
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	08 95       	ret

00001e72 <scanf>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	ae 01       	movw	r20, r28
    1e7c:	4a 5f       	subi	r20, 0xFA	; 250
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	fa 01       	movw	r30, r20
    1e82:	61 91       	ld	r22, Z+
    1e84:	71 91       	ld	r23, Z+
    1e86:	af 01       	movw	r20, r30
    1e88:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <__iob>
    1e8c:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <__iob+0x1>
    1e90:	ee d3       	rcall	.+2012   	; 0x266e <vfscanf>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <snprintf>:
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	0e 89       	ldd	r16, Y+22	; 0x16
    1eb2:	1f 89       	ldd	r17, Y+23	; 0x17
    1eb4:	88 8d       	ldd	r24, Y+24	; 0x18
    1eb6:	99 8d       	ldd	r25, Y+25	; 0x19
    1eb8:	26 e0       	ldi	r18, 0x06	; 6
    1eba:	2c 83       	std	Y+4, r18	; 0x04
    1ebc:	1a 83       	std	Y+2, r17	; 0x02
    1ebe:	09 83       	std	Y+1, r16	; 0x01
    1ec0:	97 ff       	sbrs	r25, 7
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <snprintf+0x30>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e8       	ldi	r25, 0x80	; 128
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	ae 01       	movw	r20, r28
    1ed0:	44 5e       	subi	r20, 0xE4	; 228
    1ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ed6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ed8:	ce 01       	movw	r24, r28
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	19 d0       	rcall	.+50     	; 0x1f10 <vfprintf>
    1ede:	4d 81       	ldd	r20, Y+5	; 0x05
    1ee0:	5e 81       	ldd	r21, Y+6	; 0x06
    1ee2:	57 fd       	sbrc	r21, 7
    1ee4:	0a c0       	rjmp	.+20     	; 0x1efa <snprintf+0x62>
    1ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee8:	38 85       	ldd	r19, Y+8	; 0x08
    1eea:	42 17       	cp	r20, r18
    1eec:	53 07       	cpc	r21, r19
    1eee:	0c f4       	brge	.+2      	; 0x1ef2 <snprintf+0x5a>
    1ef0:	9a 01       	movw	r18, r20
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	e2 0f       	add	r30, r18
    1ef6:	f3 1f       	adc	r31, r19
    1ef8:	10 82       	st	Z, r1
    1efa:	2e 96       	adiw	r28, 0x0e	; 14
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	08 95       	ret

00001f10 <vfprintf>:
    1f10:	2f 92       	push	r2
    1f12:	3f 92       	push	r3
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	2b 97       	sbiw	r28, 0x0b	; 11
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	6c 01       	movw	r12, r24
    1f46:	7b 01       	movw	r14, r22
    1f48:	8a 01       	movw	r16, r20
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	17 82       	std	Z+7, r1	; 0x07
    1f4e:	16 82       	std	Z+6, r1	; 0x06
    1f50:	83 81       	ldd	r24, Z+3	; 0x03
    1f52:	81 ff       	sbrs	r24, 1
    1f54:	bf c1       	rjmp	.+894    	; 0x22d4 <__stack+0xd5>
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	3c 01       	movw	r6, r24
    1f5c:	f6 01       	movw	r30, r12
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	f7 01       	movw	r30, r14
    1f62:	93 fd       	sbrc	r25, 3
    1f64:	85 91       	lpm	r24, Z+
    1f66:	93 ff       	sbrs	r25, 3
    1f68:	81 91       	ld	r24, Z+
    1f6a:	7f 01       	movw	r14, r30
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <vfprintf+0x62>
    1f70:	ad c1       	rjmp	.+858    	; 0x22cc <__stack+0xcd>
    1f72:	85 32       	cpi	r24, 0x25	; 37
    1f74:	39 f4       	brne	.+14     	; 0x1f84 <vfprintf+0x74>
    1f76:	93 fd       	sbrc	r25, 3
    1f78:	85 91       	lpm	r24, Z+
    1f7a:	93 ff       	sbrs	r25, 3
    1f7c:	81 91       	ld	r24, Z+
    1f7e:	7f 01       	movw	r14, r30
    1f80:	85 32       	cpi	r24, 0x25	; 37
    1f82:	21 f4       	brne	.+8      	; 0x1f8c <vfprintf+0x7c>
    1f84:	b6 01       	movw	r22, r12
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	f0 d4       	rcall	.+2528   	; 0x296a <fputc>
    1f8a:	e8 cf       	rjmp	.-48     	; 0x1f5c <vfprintf+0x4c>
    1f8c:	91 2c       	mov	r9, r1
    1f8e:	21 2c       	mov	r2, r1
    1f90:	31 2c       	mov	r3, r1
    1f92:	ff e1       	ldi	r31, 0x1F	; 31
    1f94:	f3 15       	cp	r31, r3
    1f96:	d8 f0       	brcs	.+54     	; 0x1fce <vfprintf+0xbe>
    1f98:	8b 32       	cpi	r24, 0x2B	; 43
    1f9a:	79 f0       	breq	.+30     	; 0x1fba <vfprintf+0xaa>
    1f9c:	38 f4       	brcc	.+14     	; 0x1fac <vfprintf+0x9c>
    1f9e:	80 32       	cpi	r24, 0x20	; 32
    1fa0:	79 f0       	breq	.+30     	; 0x1fc0 <vfprintf+0xb0>
    1fa2:	83 32       	cpi	r24, 0x23	; 35
    1fa4:	a1 f4       	brne	.+40     	; 0x1fce <vfprintf+0xbe>
    1fa6:	23 2d       	mov	r18, r3
    1fa8:	20 61       	ori	r18, 0x10	; 16
    1faa:	1d c0       	rjmp	.+58     	; 0x1fe6 <vfprintf+0xd6>
    1fac:	8d 32       	cpi	r24, 0x2D	; 45
    1fae:	61 f0       	breq	.+24     	; 0x1fc8 <vfprintf+0xb8>
    1fb0:	80 33       	cpi	r24, 0x30	; 48
    1fb2:	69 f4       	brne	.+26     	; 0x1fce <vfprintf+0xbe>
    1fb4:	23 2d       	mov	r18, r3
    1fb6:	21 60       	ori	r18, 0x01	; 1
    1fb8:	16 c0       	rjmp	.+44     	; 0x1fe6 <vfprintf+0xd6>
    1fba:	83 2d       	mov	r24, r3
    1fbc:	82 60       	ori	r24, 0x02	; 2
    1fbe:	38 2e       	mov	r3, r24
    1fc0:	e3 2d       	mov	r30, r3
    1fc2:	e4 60       	ori	r30, 0x04	; 4
    1fc4:	3e 2e       	mov	r3, r30
    1fc6:	2a c0       	rjmp	.+84     	; 0x201c <vfprintf+0x10c>
    1fc8:	f3 2d       	mov	r31, r3
    1fca:	f8 60       	ori	r31, 0x08	; 8
    1fcc:	1d c0       	rjmp	.+58     	; 0x2008 <vfprintf+0xf8>
    1fce:	37 fc       	sbrc	r3, 7
    1fd0:	2d c0       	rjmp	.+90     	; 0x202c <vfprintf+0x11c>
    1fd2:	20 ed       	ldi	r18, 0xD0	; 208
    1fd4:	28 0f       	add	r18, r24
    1fd6:	2a 30       	cpi	r18, 0x0A	; 10
    1fd8:	40 f0       	brcs	.+16     	; 0x1fea <vfprintf+0xda>
    1fda:	8e 32       	cpi	r24, 0x2E	; 46
    1fdc:	b9 f4       	brne	.+46     	; 0x200c <vfprintf+0xfc>
    1fde:	36 fc       	sbrc	r3, 6
    1fe0:	75 c1       	rjmp	.+746    	; 0x22cc <__stack+0xcd>
    1fe2:	23 2d       	mov	r18, r3
    1fe4:	20 64       	ori	r18, 0x40	; 64
    1fe6:	32 2e       	mov	r3, r18
    1fe8:	19 c0       	rjmp	.+50     	; 0x201c <vfprintf+0x10c>
    1fea:	36 fe       	sbrs	r3, 6
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <vfprintf+0xea>
    1fee:	8a e0       	ldi	r24, 0x0A	; 10
    1ff0:	98 9e       	mul	r9, r24
    1ff2:	20 0d       	add	r18, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	92 2e       	mov	r9, r18
    1ff8:	11 c0       	rjmp	.+34     	; 0x201c <vfprintf+0x10c>
    1ffa:	ea e0       	ldi	r30, 0x0A	; 10
    1ffc:	2e 9e       	mul	r2, r30
    1ffe:	20 0d       	add	r18, r0
    2000:	11 24       	eor	r1, r1
    2002:	22 2e       	mov	r2, r18
    2004:	f3 2d       	mov	r31, r3
    2006:	f0 62       	ori	r31, 0x20	; 32
    2008:	3f 2e       	mov	r3, r31
    200a:	08 c0       	rjmp	.+16     	; 0x201c <vfprintf+0x10c>
    200c:	8c 36       	cpi	r24, 0x6C	; 108
    200e:	21 f4       	brne	.+8      	; 0x2018 <vfprintf+0x108>
    2010:	83 2d       	mov	r24, r3
    2012:	80 68       	ori	r24, 0x80	; 128
    2014:	38 2e       	mov	r3, r24
    2016:	02 c0       	rjmp	.+4      	; 0x201c <vfprintf+0x10c>
    2018:	88 36       	cpi	r24, 0x68	; 104
    201a:	41 f4       	brne	.+16     	; 0x202c <vfprintf+0x11c>
    201c:	f7 01       	movw	r30, r14
    201e:	93 fd       	sbrc	r25, 3
    2020:	85 91       	lpm	r24, Z+
    2022:	93 ff       	sbrs	r25, 3
    2024:	81 91       	ld	r24, Z+
    2026:	7f 01       	movw	r14, r30
    2028:	81 11       	cpse	r24, r1
    202a:	b3 cf       	rjmp	.-154    	; 0x1f92 <vfprintf+0x82>
    202c:	98 2f       	mov	r25, r24
    202e:	9f 7d       	andi	r25, 0xDF	; 223
    2030:	95 54       	subi	r25, 0x45	; 69
    2032:	93 30       	cpi	r25, 0x03	; 3
    2034:	28 f4       	brcc	.+10     	; 0x2040 <vfprintf+0x130>
    2036:	0c 5f       	subi	r16, 0xFC	; 252
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	9f e3       	ldi	r25, 0x3F	; 63
    203c:	99 83       	std	Y+1, r25	; 0x01
    203e:	0d c0       	rjmp	.+26     	; 0x205a <vfprintf+0x14a>
    2040:	83 36       	cpi	r24, 0x63	; 99
    2042:	31 f0       	breq	.+12     	; 0x2050 <vfprintf+0x140>
    2044:	83 37       	cpi	r24, 0x73	; 115
    2046:	71 f0       	breq	.+28     	; 0x2064 <vfprintf+0x154>
    2048:	83 35       	cpi	r24, 0x53	; 83
    204a:	09 f0       	breq	.+2      	; 0x204e <vfprintf+0x13e>
    204c:	55 c0       	rjmp	.+170    	; 0x20f8 <vfprintf+0x1e8>
    204e:	20 c0       	rjmp	.+64     	; 0x2090 <vfprintf+0x180>
    2050:	f8 01       	movw	r30, r16
    2052:	80 81       	ld	r24, Z
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	0e 5f       	subi	r16, 0xFE	; 254
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	88 24       	eor	r8, r8
    205c:	83 94       	inc	r8
    205e:	91 2c       	mov	r9, r1
    2060:	53 01       	movw	r10, r6
    2062:	12 c0       	rjmp	.+36     	; 0x2088 <vfprintf+0x178>
    2064:	28 01       	movw	r4, r16
    2066:	f2 e0       	ldi	r31, 0x02	; 2
    2068:	4f 0e       	add	r4, r31
    206a:	51 1c       	adc	r5, r1
    206c:	f8 01       	movw	r30, r16
    206e:	a0 80       	ld	r10, Z
    2070:	b1 80       	ldd	r11, Z+1	; 0x01
    2072:	36 fe       	sbrs	r3, 6
    2074:	03 c0       	rjmp	.+6      	; 0x207c <vfprintf+0x16c>
    2076:	69 2d       	mov	r22, r9
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <vfprintf+0x170>
    207c:	6f ef       	ldi	r22, 0xFF	; 255
    207e:	7f ef       	ldi	r23, 0xFF	; 255
    2080:	c5 01       	movw	r24, r10
    2082:	2a d4       	rcall	.+2132   	; 0x28d8 <strnlen>
    2084:	4c 01       	movw	r8, r24
    2086:	82 01       	movw	r16, r4
    2088:	f3 2d       	mov	r31, r3
    208a:	ff 77       	andi	r31, 0x7F	; 127
    208c:	3f 2e       	mov	r3, r31
    208e:	15 c0       	rjmp	.+42     	; 0x20ba <vfprintf+0x1aa>
    2090:	28 01       	movw	r4, r16
    2092:	22 e0       	ldi	r18, 0x02	; 2
    2094:	42 0e       	add	r4, r18
    2096:	51 1c       	adc	r5, r1
    2098:	f8 01       	movw	r30, r16
    209a:	a0 80       	ld	r10, Z
    209c:	b1 80       	ldd	r11, Z+1	; 0x01
    209e:	36 fe       	sbrs	r3, 6
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <vfprintf+0x198>
    20a2:	69 2d       	mov	r22, r9
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <vfprintf+0x19c>
    20a8:	6f ef       	ldi	r22, 0xFF	; 255
    20aa:	7f ef       	ldi	r23, 0xFF	; 255
    20ac:	c5 01       	movw	r24, r10
    20ae:	09 d4       	rcall	.+2066   	; 0x28c2 <strnlen_P>
    20b0:	4c 01       	movw	r8, r24
    20b2:	f3 2d       	mov	r31, r3
    20b4:	f0 68       	ori	r31, 0x80	; 128
    20b6:	3f 2e       	mov	r3, r31
    20b8:	82 01       	movw	r16, r4
    20ba:	33 fc       	sbrc	r3, 3
    20bc:	19 c0       	rjmp	.+50     	; 0x20f0 <vfprintf+0x1e0>
    20be:	82 2d       	mov	r24, r2
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	88 16       	cp	r8, r24
    20c4:	99 06       	cpc	r9, r25
    20c6:	a0 f4       	brcc	.+40     	; 0x20f0 <vfprintf+0x1e0>
    20c8:	b6 01       	movw	r22, r12
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	4d d4       	rcall	.+2202   	; 0x296a <fputc>
    20d0:	2a 94       	dec	r2
    20d2:	f5 cf       	rjmp	.-22     	; 0x20be <vfprintf+0x1ae>
    20d4:	f5 01       	movw	r30, r10
    20d6:	37 fc       	sbrc	r3, 7
    20d8:	85 91       	lpm	r24, Z+
    20da:	37 fe       	sbrs	r3, 7
    20dc:	81 91       	ld	r24, Z+
    20de:	5f 01       	movw	r10, r30
    20e0:	b6 01       	movw	r22, r12
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	42 d4       	rcall	.+2180   	; 0x296a <fputc>
    20e6:	21 10       	cpse	r2, r1
    20e8:	2a 94       	dec	r2
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	82 1a       	sub	r8, r18
    20ee:	91 08       	sbc	r9, r1
    20f0:	81 14       	cp	r8, r1
    20f2:	91 04       	cpc	r9, r1
    20f4:	79 f7       	brne	.-34     	; 0x20d4 <vfprintf+0x1c4>
    20f6:	e1 c0       	rjmp	.+450    	; 0x22ba <__stack+0xbb>
    20f8:	84 36       	cpi	r24, 0x64	; 100
    20fa:	11 f0       	breq	.+4      	; 0x2100 <vfprintf+0x1f0>
    20fc:	89 36       	cpi	r24, 0x69	; 105
    20fe:	39 f5       	brne	.+78     	; 0x214e <vfprintf+0x23e>
    2100:	f8 01       	movw	r30, r16
    2102:	37 fe       	sbrs	r3, 7
    2104:	07 c0       	rjmp	.+14     	; 0x2114 <vfprintf+0x204>
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	0c 5f       	subi	r16, 0xFC	; 252
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	08 c0       	rjmp	.+16     	; 0x2124 <vfprintf+0x214>
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	07 2e       	mov	r0, r23
    211a:	00 0c       	add	r0, r0
    211c:	88 0b       	sbc	r24, r24
    211e:	99 0b       	sbc	r25, r25
    2120:	0e 5f       	subi	r16, 0xFE	; 254
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	f3 2d       	mov	r31, r3
    2126:	ff 76       	andi	r31, 0x6F	; 111
    2128:	3f 2e       	mov	r3, r31
    212a:	97 ff       	sbrs	r25, 7
    212c:	09 c0       	rjmp	.+18     	; 0x2140 <vfprintf+0x230>
    212e:	90 95       	com	r25
    2130:	80 95       	com	r24
    2132:	70 95       	com	r23
    2134:	61 95       	neg	r22
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	8f 4f       	sbci	r24, 0xFF	; 255
    213a:	9f 4f       	sbci	r25, 0xFF	; 255
    213c:	f0 68       	ori	r31, 0x80	; 128
    213e:	3f 2e       	mov	r3, r31
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	a3 01       	movw	r20, r6
    2146:	66 d4       	rcall	.+2252   	; 0x2a14 <__ultoa_invert>
    2148:	88 2e       	mov	r8, r24
    214a:	86 18       	sub	r8, r6
    214c:	44 c0       	rjmp	.+136    	; 0x21d6 <vfprintf+0x2c6>
    214e:	85 37       	cpi	r24, 0x75	; 117
    2150:	31 f4       	brne	.+12     	; 0x215e <vfprintf+0x24e>
    2152:	23 2d       	mov	r18, r3
    2154:	2f 7e       	andi	r18, 0xEF	; 239
    2156:	b2 2e       	mov	r11, r18
    2158:	2a e0       	ldi	r18, 0x0A	; 10
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	25 c0       	rjmp	.+74     	; 0x21a8 <vfprintf+0x298>
    215e:	93 2d       	mov	r25, r3
    2160:	99 7f       	andi	r25, 0xF9	; 249
    2162:	b9 2e       	mov	r11, r25
    2164:	8f 36       	cpi	r24, 0x6F	; 111
    2166:	c1 f0       	breq	.+48     	; 0x2198 <vfprintf+0x288>
    2168:	18 f4       	brcc	.+6      	; 0x2170 <vfprintf+0x260>
    216a:	88 35       	cpi	r24, 0x58	; 88
    216c:	79 f0       	breq	.+30     	; 0x218c <vfprintf+0x27c>
    216e:	ae c0       	rjmp	.+348    	; 0x22cc <__stack+0xcd>
    2170:	80 37       	cpi	r24, 0x70	; 112
    2172:	19 f0       	breq	.+6      	; 0x217a <vfprintf+0x26a>
    2174:	88 37       	cpi	r24, 0x78	; 120
    2176:	21 f0       	breq	.+8      	; 0x2180 <vfprintf+0x270>
    2178:	a9 c0       	rjmp	.+338    	; 0x22cc <__stack+0xcd>
    217a:	e9 2f       	mov	r30, r25
    217c:	e0 61       	ori	r30, 0x10	; 16
    217e:	be 2e       	mov	r11, r30
    2180:	b4 fe       	sbrs	r11, 4
    2182:	0d c0       	rjmp	.+26     	; 0x219e <vfprintf+0x28e>
    2184:	fb 2d       	mov	r31, r11
    2186:	f4 60       	ori	r31, 0x04	; 4
    2188:	bf 2e       	mov	r11, r31
    218a:	09 c0       	rjmp	.+18     	; 0x219e <vfprintf+0x28e>
    218c:	34 fe       	sbrs	r3, 4
    218e:	0a c0       	rjmp	.+20     	; 0x21a4 <vfprintf+0x294>
    2190:	29 2f       	mov	r18, r25
    2192:	26 60       	ori	r18, 0x06	; 6
    2194:	b2 2e       	mov	r11, r18
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <vfprintf+0x294>
    2198:	28 e0       	ldi	r18, 0x08	; 8
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <vfprintf+0x298>
    219e:	20 e1       	ldi	r18, 0x10	; 16
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <vfprintf+0x298>
    21a4:	20 e1       	ldi	r18, 0x10	; 16
    21a6:	32 e0       	ldi	r19, 0x02	; 2
    21a8:	f8 01       	movw	r30, r16
    21aa:	b7 fe       	sbrs	r11, 7
    21ac:	07 c0       	rjmp	.+14     	; 0x21bc <vfprintf+0x2ac>
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0c 5f       	subi	r16, 0xFC	; 252
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <vfprintf+0x2b8>
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 5f       	subi	r16, 0xFE	; 254
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	a3 01       	movw	r20, r6
    21ca:	24 d4       	rcall	.+2120   	; 0x2a14 <__ultoa_invert>
    21cc:	88 2e       	mov	r8, r24
    21ce:	86 18       	sub	r8, r6
    21d0:	fb 2d       	mov	r31, r11
    21d2:	ff 77       	andi	r31, 0x7F	; 127
    21d4:	3f 2e       	mov	r3, r31
    21d6:	36 fe       	sbrs	r3, 6
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <vfprintf+0x2e4>
    21da:	23 2d       	mov	r18, r3
    21dc:	2e 7f       	andi	r18, 0xFE	; 254
    21de:	a2 2e       	mov	r10, r18
    21e0:	89 14       	cp	r8, r9
    21e2:	58 f4       	brcc	.+22     	; 0x21fa <vfprintf+0x2ea>
    21e4:	34 fe       	sbrs	r3, 4
    21e6:	0b c0       	rjmp	.+22     	; 0x21fe <vfprintf+0x2ee>
    21e8:	32 fc       	sbrc	r3, 2
    21ea:	09 c0       	rjmp	.+18     	; 0x21fe <vfprintf+0x2ee>
    21ec:	83 2d       	mov	r24, r3
    21ee:	8e 7e       	andi	r24, 0xEE	; 238
    21f0:	a8 2e       	mov	r10, r24
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <vfprintf+0x2ee>
    21f4:	b8 2c       	mov	r11, r8
    21f6:	a3 2c       	mov	r10, r3
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <__stack+0x1>
    21fa:	b8 2c       	mov	r11, r8
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <__stack+0x1>
    21fe:	b9 2c       	mov	r11, r9
    2200:	a4 fe       	sbrs	r10, 4
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <__stack+0x23>
    2204:	fe 01       	movw	r30, r28
    2206:	e8 0d       	add	r30, r8
    2208:	f1 1d       	adc	r31, r1
    220a:	80 81       	ld	r24, Z
    220c:	80 33       	cpi	r24, 0x30	; 48
    220e:	21 f4       	brne	.+8      	; 0x2218 <__stack+0x19>
    2210:	9a 2d       	mov	r25, r10
    2212:	99 7e       	andi	r25, 0xE9	; 233
    2214:	a9 2e       	mov	r10, r25
    2216:	09 c0       	rjmp	.+18     	; 0x222a <__stack+0x2b>
    2218:	a2 fe       	sbrs	r10, 2
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <__stack+0x29>
    221c:	b3 94       	inc	r11
    221e:	b3 94       	inc	r11
    2220:	04 c0       	rjmp	.+8      	; 0x222a <__stack+0x2b>
    2222:	8a 2d       	mov	r24, r10
    2224:	86 78       	andi	r24, 0x86	; 134
    2226:	09 f0       	breq	.+2      	; 0x222a <__stack+0x2b>
    2228:	b3 94       	inc	r11
    222a:	a3 fc       	sbrc	r10, 3
    222c:	10 c0       	rjmp	.+32     	; 0x224e <__stack+0x4f>
    222e:	a0 fe       	sbrs	r10, 0
    2230:	06 c0       	rjmp	.+12     	; 0x223e <__stack+0x3f>
    2232:	b2 14       	cp	r11, r2
    2234:	80 f4       	brcc	.+32     	; 0x2256 <__stack+0x57>
    2236:	28 0c       	add	r2, r8
    2238:	92 2c       	mov	r9, r2
    223a:	9b 18       	sub	r9, r11
    223c:	0d c0       	rjmp	.+26     	; 0x2258 <__stack+0x59>
    223e:	b2 14       	cp	r11, r2
    2240:	58 f4       	brcc	.+22     	; 0x2258 <__stack+0x59>
    2242:	b6 01       	movw	r22, r12
    2244:	80 e2       	ldi	r24, 0x20	; 32
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	90 d3       	rcall	.+1824   	; 0x296a <fputc>
    224a:	b3 94       	inc	r11
    224c:	f8 cf       	rjmp	.-16     	; 0x223e <__stack+0x3f>
    224e:	b2 14       	cp	r11, r2
    2250:	18 f4       	brcc	.+6      	; 0x2258 <__stack+0x59>
    2252:	2b 18       	sub	r2, r11
    2254:	02 c0       	rjmp	.+4      	; 0x225a <__stack+0x5b>
    2256:	98 2c       	mov	r9, r8
    2258:	21 2c       	mov	r2, r1
    225a:	a4 fe       	sbrs	r10, 4
    225c:	0f c0       	rjmp	.+30     	; 0x227c <__stack+0x7d>
    225e:	b6 01       	movw	r22, r12
    2260:	80 e3       	ldi	r24, 0x30	; 48
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	82 d3       	rcall	.+1796   	; 0x296a <fputc>
    2266:	a2 fe       	sbrs	r10, 2
    2268:	16 c0       	rjmp	.+44     	; 0x2296 <__stack+0x97>
    226a:	a1 fc       	sbrc	r10, 1
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <__stack+0x75>
    226e:	88 e7       	ldi	r24, 0x78	; 120
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <__stack+0x79>
    2274:	88 e5       	ldi	r24, 0x58	; 88
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	b6 01       	movw	r22, r12
    227a:	0c c0       	rjmp	.+24     	; 0x2294 <__stack+0x95>
    227c:	8a 2d       	mov	r24, r10
    227e:	86 78       	andi	r24, 0x86	; 134
    2280:	51 f0       	breq	.+20     	; 0x2296 <__stack+0x97>
    2282:	a1 fe       	sbrs	r10, 1
    2284:	02 c0       	rjmp	.+4      	; 0x228a <__stack+0x8b>
    2286:	8b e2       	ldi	r24, 0x2B	; 43
    2288:	01 c0       	rjmp	.+2      	; 0x228c <__stack+0x8d>
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	a7 fc       	sbrc	r10, 7
    228e:	8d e2       	ldi	r24, 0x2D	; 45
    2290:	b6 01       	movw	r22, r12
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	6a d3       	rcall	.+1748   	; 0x296a <fputc>
    2296:	89 14       	cp	r8, r9
    2298:	30 f4       	brcc	.+12     	; 0x22a6 <__stack+0xa7>
    229a:	b6 01       	movw	r22, r12
    229c:	80 e3       	ldi	r24, 0x30	; 48
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	64 d3       	rcall	.+1736   	; 0x296a <fputc>
    22a2:	9a 94       	dec	r9
    22a4:	f8 cf       	rjmp	.-16     	; 0x2296 <__stack+0x97>
    22a6:	8a 94       	dec	r8
    22a8:	f3 01       	movw	r30, r6
    22aa:	e8 0d       	add	r30, r8
    22ac:	f1 1d       	adc	r31, r1
    22ae:	80 81       	ld	r24, Z
    22b0:	b6 01       	movw	r22, r12
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	5a d3       	rcall	.+1716   	; 0x296a <fputc>
    22b6:	81 10       	cpse	r8, r1
    22b8:	f6 cf       	rjmp	.-20     	; 0x22a6 <__stack+0xa7>
    22ba:	22 20       	and	r2, r2
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	4e ce       	rjmp	.-868    	; 0x1f5c <vfprintf+0x4c>
    22c0:	b6 01       	movw	r22, r12
    22c2:	80 e2       	ldi	r24, 0x20	; 32
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	51 d3       	rcall	.+1698   	; 0x296a <fputc>
    22c8:	2a 94       	dec	r2
    22ca:	f7 cf       	rjmp	.-18     	; 0x22ba <__stack+0xbb>
    22cc:	f6 01       	movw	r30, r12
    22ce:	86 81       	ldd	r24, Z+6	; 0x06
    22d0:	97 81       	ldd	r25, Z+7	; 0x07
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__stack+0xd9>
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	2b 96       	adiw	r28, 0x0b	; 11
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	7f 90       	pop	r7
    22fe:	6f 90       	pop	r6
    2300:	5f 90       	pop	r5
    2302:	4f 90       	pop	r4
    2304:	3f 90       	pop	r3
    2306:	2f 90       	pop	r2
    2308:	08 95       	ret

0000230a <putval>:
    230a:	20 fd       	sbrc	r18, 0
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <putval+0x16>
    230e:	fc 01       	movw	r30, r24
    2310:	23 fd       	sbrc	r18, 3
    2312:	05 c0       	rjmp	.+10     	; 0x231e <putval+0x14>
    2314:	22 ff       	sbrs	r18, 2
    2316:	02 c0       	rjmp	.+4      	; 0x231c <putval+0x12>
    2318:	73 83       	std	Z+3, r23	; 0x03
    231a:	62 83       	std	Z+2, r22	; 0x02
    231c:	51 83       	std	Z+1, r21	; 0x01
    231e:	40 83       	st	Z, r20
    2320:	08 95       	ret

00002322 <mulacc>:
    2322:	44 fd       	sbrc	r20, 4
    2324:	17 c0       	rjmp	.+46     	; 0x2354 <mulacc+0x32>
    2326:	46 fd       	sbrc	r20, 6
    2328:	17 c0       	rjmp	.+46     	; 0x2358 <mulacc+0x36>
    232a:	ab 01       	movw	r20, r22
    232c:	bc 01       	movw	r22, r24
    232e:	da 01       	movw	r26, r20
    2330:	fb 01       	movw	r30, r22
    2332:	aa 0f       	add	r26, r26
    2334:	bb 1f       	adc	r27, r27
    2336:	ee 1f       	adc	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	10 94       	com	r1
    233c:	d1 f7       	brne	.-12     	; 0x2332 <mulacc+0x10>
    233e:	4a 0f       	add	r20, r26
    2340:	5b 1f       	adc	r21, r27
    2342:	6e 1f       	adc	r22, r30
    2344:	7f 1f       	adc	r23, r31
    2346:	cb 01       	movw	r24, r22
    2348:	ba 01       	movw	r22, r20
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <mulacc+0x44>
    2354:	33 e0       	ldi	r19, 0x03	; 3
    2356:	01 c0       	rjmp	.+2      	; 0x235a <mulacc+0x38>
    2358:	34 e0       	ldi	r19, 0x04	; 4
    235a:	66 0f       	add	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	31 50       	subi	r19, 0x01	; 1
    2364:	d1 f7       	brne	.-12     	; 0x235a <mulacc+0x38>
    2366:	62 0f       	add	r22, r18
    2368:	71 1d       	adc	r23, r1
    236a:	81 1d       	adc	r24, r1
    236c:	91 1d       	adc	r25, r1
    236e:	08 95       	ret

00002370 <skip_spaces>:
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	8c 01       	movw	r16, r24
    237a:	c8 01       	movw	r24, r16
    237c:	b8 d2       	rcall	.+1392   	; 0x28ee <fgetc>
    237e:	ec 01       	movw	r28, r24
    2380:	97 fd       	sbrc	r25, 7
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <skip_spaces+0x20>
    2384:	8b d2       	rcall	.+1302   	; 0x289c <isspace>
    2386:	89 2b       	or	r24, r25
    2388:	c1 f7       	brne	.-16     	; 0x237a <skip_spaces+0xa>
    238a:	b8 01       	movw	r22, r16
    238c:	ce 01       	movw	r24, r28
    238e:	29 d3       	rcall	.+1618   	; 0x29e2 <ungetc>
    2390:	ce 01       	movw	r24, r28
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <conv_int>:
    239c:	8f 92       	push	r8
    239e:	9f 92       	push	r9
    23a0:	af 92       	push	r10
    23a2:	bf 92       	push	r11
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	8c 01       	movw	r16, r24
    23b2:	d6 2f       	mov	r29, r22
    23b4:	7a 01       	movw	r14, r20
    23b6:	b2 2e       	mov	r11, r18
    23b8:	9a d2       	rcall	.+1332   	; 0x28ee <fgetc>
    23ba:	9c 01       	movw	r18, r24
    23bc:	33 27       	eor	r19, r19
    23be:	2b 32       	cpi	r18, 0x2B	; 43
    23c0:	31 05       	cpc	r19, r1
    23c2:	31 f0       	breq	.+12     	; 0x23d0 <conv_int+0x34>
    23c4:	2d 32       	cpi	r18, 0x2D	; 45
    23c6:	31 05       	cpc	r19, r1
    23c8:	59 f4       	brne	.+22     	; 0x23e0 <conv_int+0x44>
    23ca:	8b 2d       	mov	r24, r11
    23cc:	80 68       	ori	r24, 0x80	; 128
    23ce:	b8 2e       	mov	r11, r24
    23d0:	d1 50       	subi	r29, 0x01	; 1
    23d2:	11 f4       	brne	.+4      	; 0x23d8 <conv_int+0x3c>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	61 c0       	rjmp	.+194    	; 0x249a <conv_int+0xfe>
    23d8:	c8 01       	movw	r24, r16
    23da:	89 d2       	rcall	.+1298   	; 0x28ee <fgetc>
    23dc:	97 fd       	sbrc	r25, 7
    23de:	fa cf       	rjmp	.-12     	; 0x23d4 <conv_int+0x38>
    23e0:	cb 2d       	mov	r28, r11
    23e2:	cd 7f       	andi	r28, 0xFD	; 253
    23e4:	2b 2d       	mov	r18, r11
    23e6:	20 73       	andi	r18, 0x30	; 48
    23e8:	f9 f4       	brne	.+62     	; 0x2428 <conv_int+0x8c>
    23ea:	80 33       	cpi	r24, 0x30	; 48
    23ec:	e9 f4       	brne	.+58     	; 0x2428 <conv_int+0x8c>
    23ee:	aa 24       	eor	r10, r10
    23f0:	aa 94       	dec	r10
    23f2:	ad 0e       	add	r10, r29
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <conv_int+0x5c>
    23f6:	3e c0       	rjmp	.+124    	; 0x2474 <conv_int+0xd8>
    23f8:	c8 01       	movw	r24, r16
    23fa:	79 d2       	rcall	.+1266   	; 0x28ee <fgetc>
    23fc:	97 fd       	sbrc	r25, 7
    23fe:	3a c0       	rjmp	.+116    	; 0x2474 <conv_int+0xd8>
    2400:	9c 01       	movw	r18, r24
    2402:	2f 7d       	andi	r18, 0xDF	; 223
    2404:	33 27       	eor	r19, r19
    2406:	28 35       	cpi	r18, 0x58	; 88
    2408:	31 05       	cpc	r19, r1
    240a:	41 f4       	brne	.+16     	; 0x241c <conv_int+0x80>
    240c:	c2 64       	ori	r28, 0x42	; 66
    240e:	d2 50       	subi	r29, 0x02	; 2
    2410:	89 f1       	breq	.+98     	; 0x2474 <conv_int+0xd8>
    2412:	c8 01       	movw	r24, r16
    2414:	6c d2       	rcall	.+1240   	; 0x28ee <fgetc>
    2416:	97 ff       	sbrs	r25, 7
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <conv_int+0x8c>
    241a:	2c c0       	rjmp	.+88     	; 0x2474 <conv_int+0xd8>
    241c:	b6 fe       	sbrs	r11, 6
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <conv_int+0x88>
    2420:	c2 60       	ori	r28, 0x02	; 2
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <conv_int+0x8a>
    2424:	c2 61       	ori	r28, 0x12	; 18
    2426:	da 2d       	mov	r29, r10
    2428:	81 2c       	mov	r8, r1
    242a:	91 2c       	mov	r9, r1
    242c:	54 01       	movw	r10, r8
    242e:	20 ed       	ldi	r18, 0xD0	; 208
    2430:	28 0f       	add	r18, r24
    2432:	28 30       	cpi	r18, 0x08	; 8
    2434:	78 f0       	brcs	.+30     	; 0x2454 <conv_int+0xb8>
    2436:	c4 ff       	sbrs	r28, 4
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <conv_int+0xa4>
    243a:	b8 01       	movw	r22, r16
    243c:	d2 d2       	rcall	.+1444   	; 0x29e2 <ungetc>
    243e:	17 c0       	rjmp	.+46     	; 0x246e <conv_int+0xd2>
    2440:	2a 30       	cpi	r18, 0x0A	; 10
    2442:	40 f0       	brcs	.+16     	; 0x2454 <conv_int+0xb8>
    2444:	c6 ff       	sbrs	r28, 6
    2446:	f9 cf       	rjmp	.-14     	; 0x243a <conv_int+0x9e>
    2448:	2f 7d       	andi	r18, 0xDF	; 223
    244a:	3f ee       	ldi	r19, 0xEF	; 239
    244c:	32 0f       	add	r19, r18
    244e:	36 30       	cpi	r19, 0x06	; 6
    2450:	a0 f7       	brcc	.-24     	; 0x243a <conv_int+0x9e>
    2452:	27 50       	subi	r18, 0x07	; 7
    2454:	4c 2f       	mov	r20, r28
    2456:	c5 01       	movw	r24, r10
    2458:	b4 01       	movw	r22, r8
    245a:	63 df       	rcall	.-314    	; 0x2322 <mulacc>
    245c:	4b 01       	movw	r8, r22
    245e:	5c 01       	movw	r10, r24
    2460:	c2 60       	ori	r28, 0x02	; 2
    2462:	d1 50       	subi	r29, 0x01	; 1
    2464:	51 f0       	breq	.+20     	; 0x247a <conv_int+0xde>
    2466:	c8 01       	movw	r24, r16
    2468:	42 d2       	rcall	.+1156   	; 0x28ee <fgetc>
    246a:	97 ff       	sbrs	r25, 7
    246c:	e0 cf       	rjmp	.-64     	; 0x242e <conv_int+0x92>
    246e:	c1 fd       	sbrc	r28, 1
    2470:	04 c0       	rjmp	.+8      	; 0x247a <conv_int+0xde>
    2472:	b0 cf       	rjmp	.-160    	; 0x23d4 <conv_int+0x38>
    2474:	81 2c       	mov	r8, r1
    2476:	91 2c       	mov	r9, r1
    2478:	54 01       	movw	r10, r8
    247a:	c7 ff       	sbrs	r28, 7
    247c:	08 c0       	rjmp	.+16     	; 0x248e <conv_int+0xf2>
    247e:	b0 94       	com	r11
    2480:	a0 94       	com	r10
    2482:	90 94       	com	r9
    2484:	80 94       	com	r8
    2486:	81 1c       	adc	r8, r1
    2488:	91 1c       	adc	r9, r1
    248a:	a1 1c       	adc	r10, r1
    248c:	b1 1c       	adc	r11, r1
    248e:	2c 2f       	mov	r18, r28
    2490:	b5 01       	movw	r22, r10
    2492:	a4 01       	movw	r20, r8
    2494:	c7 01       	movw	r24, r14
    2496:	39 df       	rcall	.-398    	; 0x230a <putval>
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	bf 90       	pop	r11
    24a8:	af 90       	pop	r10
    24aa:	9f 90       	pop	r9
    24ac:	8f 90       	pop	r8
    24ae:	08 95       	ret

000024b0 <conv_brk>:
    24b0:	5f 92       	push	r5
    24b2:	6f 92       	push	r6
    24b4:	7f 92       	push	r7
    24b6:	8f 92       	push	r8
    24b8:	9f 92       	push	r9
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	a0 97       	sbiw	r28, 0x20	; 32
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	5c 01       	movw	r10, r24
    24e0:	96 2e       	mov	r9, r22
    24e2:	7a 01       	movw	r14, r20
    24e4:	f9 01       	movw	r30, r18
    24e6:	8e 01       	movw	r16, r28
    24e8:	0f 5f       	subi	r16, 0xFF	; 255
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	68 01       	movw	r12, r16
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	d8 01       	movw	r26, r16
    24f2:	1d 92       	st	X+, r1
    24f4:	8a 95       	dec	r24
    24f6:	e9 f7       	brne	.-6      	; 0x24f2 <conv_brk+0x42>
    24f8:	d5 01       	movw	r26, r10
    24fa:	13 96       	adiw	r26, 0x03	; 3
    24fc:	8c 90       	ld	r8, X
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	61 2c       	mov	r6, r1
    2504:	71 2c       	mov	r7, r1
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	83 fc       	sbrc	r8, 3
    250e:	25 91       	lpm	r18, Z+
    2510:	83 fe       	sbrs	r8, 3
    2512:	21 91       	ld	r18, Z+
    2514:	8f 01       	movw	r16, r30
    2516:	52 2e       	mov	r5, r18
    2518:	21 11       	cpse	r18, r1
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <conv_brk+0x72>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	90 c0       	rjmp	.+288    	; 0x2642 <conv_brk+0x192>
    2522:	2e 35       	cpi	r18, 0x5E	; 94
    2524:	11 f4       	brne	.+4      	; 0x252a <conv_brk+0x7a>
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	51 f1       	breq	.+84     	; 0x257e <conv_brk+0xce>
    252a:	43 2f       	mov	r20, r19
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	48 17       	cp	r20, r24
    2530:	59 07       	cpc	r21, r25
    2532:	3c f4       	brge	.+14     	; 0x2542 <conv_brk+0x92>
    2534:	2d 35       	cpi	r18, 0x5D	; 93
    2536:	59 f1       	breq	.+86     	; 0x258e <conv_brk+0xde>
    2538:	2d 32       	cpi	r18, 0x2D	; 45
    253a:	19 f4       	brne	.+6      	; 0x2542 <conv_brk+0x92>
    253c:	77 20       	and	r7, r7
    253e:	09 f1       	breq	.+66     	; 0x2582 <conv_brk+0xd2>
    2540:	03 c0       	rjmp	.+6      	; 0x2548 <conv_brk+0x98>
    2542:	77 20       	and	r7, r7
    2544:	09 f4       	brne	.+2      	; 0x2548 <conv_brk+0x98>
    2546:	68 c0       	rjmp	.+208    	; 0x2618 <conv_brk+0x168>
    2548:	45 2d       	mov	r20, r5
    254a:	46 95       	lsr	r20
    254c:	46 95       	lsr	r20
    254e:	46 95       	lsr	r20
    2550:	d6 01       	movw	r26, r12
    2552:	a4 0f       	add	r26, r20
    2554:	b1 1d       	adc	r27, r1
    2556:	45 2d       	mov	r20, r5
    2558:	47 70       	andi	r20, 0x07	; 7
    255a:	8b 01       	movw	r16, r22
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <conv_brk+0xb2>
    255e:	00 0f       	add	r16, r16
    2560:	11 1f       	adc	r17, r17
    2562:	4a 95       	dec	r20
    2564:	e2 f7       	brpl	.-8      	; 0x255e <conv_brk+0xae>
    2566:	a8 01       	movw	r20, r16
    2568:	5c 91       	ld	r21, X
    256a:	45 2b       	or	r20, r21
    256c:	4c 93       	st	X, r20
    256e:	65 14       	cp	r6, r5
    2570:	59 f0       	breq	.+22     	; 0x2588 <conv_brk+0xd8>
    2572:	56 14       	cp	r5, r6
    2574:	10 f4       	brcc	.+4      	; 0x257a <conv_brk+0xca>
    2576:	53 94       	inc	r5
    2578:	e7 cf       	rjmp	.-50     	; 0x2548 <conv_brk+0x98>
    257a:	5a 94       	dec	r5
    257c:	e5 cf       	rjmp	.-54     	; 0x2548 <conv_brk+0x98>
    257e:	31 e0       	ldi	r19, 0x01	; 1
    2580:	04 c0       	rjmp	.+8      	; 0x258a <conv_brk+0xda>
    2582:	77 24       	eor	r7, r7
    2584:	73 94       	inc	r7
    2586:	01 c0       	rjmp	.+2      	; 0x258a <conv_brk+0xda>
    2588:	71 2c       	mov	r7, r1
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	bf cf       	rjmp	.-130    	; 0x250c <conv_brk+0x5c>
    258e:	77 20       	and	r7, r7
    2590:	19 f0       	breq	.+6      	; 0x2598 <conv_brk+0xe8>
    2592:	8e 81       	ldd	r24, Y+6	; 0x06
    2594:	80 62       	ori	r24, 0x20	; 32
    2596:	8e 83       	std	Y+6, r24	; 0x06
    2598:	31 11       	cpse	r19, r1
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <conv_brk+0xf2>
    259c:	88 24       	eor	r8, r8
    259e:	83 94       	inc	r8
    25a0:	17 c0       	rjmp	.+46     	; 0x25d0 <conv_brk+0x120>
    25a2:	f6 01       	movw	r30, r12
    25a4:	9e 01       	movw	r18, r28
    25a6:	2f 5d       	subi	r18, 0xDF	; 223
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	80 95       	com	r24
    25ae:	81 93       	st	Z+, r24
    25b0:	2e 17       	cp	r18, r30
    25b2:	3f 07       	cpc	r19, r31
    25b4:	d1 f7       	brne	.-12     	; 0x25aa <conv_brk+0xfa>
    25b6:	f2 cf       	rjmp	.-28     	; 0x259c <conv_brk+0xec>
    25b8:	e1 14       	cp	r14, r1
    25ba:	f1 04       	cpc	r15, r1
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <conv_brk+0x118>
    25be:	d7 01       	movw	r26, r14
    25c0:	8c 93       	st	X, r24
    25c2:	f7 01       	movw	r30, r14
    25c4:	31 96       	adiw	r30, 0x01	; 1
    25c6:	7f 01       	movw	r14, r30
    25c8:	9a 94       	dec	r9
    25ca:	81 2c       	mov	r8, r1
    25cc:	99 20       	and	r9, r9
    25ce:	e9 f0       	breq	.+58     	; 0x260a <conv_brk+0x15a>
    25d0:	c5 01       	movw	r24, r10
    25d2:	8d d1       	rcall	.+794    	; 0x28ee <fgetc>
    25d4:	97 fd       	sbrc	r25, 7
    25d6:	17 c0       	rjmp	.+46     	; 0x2606 <conv_brk+0x156>
    25d8:	fc 01       	movw	r30, r24
    25da:	ff 27       	eor	r31, r31
    25dc:	23 e0       	ldi	r18, 0x03	; 3
    25de:	f5 95       	asr	r31
    25e0:	e7 95       	ror	r30
    25e2:	2a 95       	dec	r18
    25e4:	e1 f7       	brne	.-8      	; 0x25de <conv_brk+0x12e>
    25e6:	ec 0d       	add	r30, r12
    25e8:	fd 1d       	adc	r31, r13
    25ea:	20 81       	ld	r18, Z
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	ac 01       	movw	r20, r24
    25f0:	47 70       	andi	r20, 0x07	; 7
    25f2:	55 27       	eor	r21, r21
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <conv_brk+0x14a>
    25f6:	35 95       	asr	r19
    25f8:	27 95       	ror	r18
    25fa:	4a 95       	dec	r20
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <conv_brk+0x146>
    25fe:	20 fd       	sbrc	r18, 0
    2600:	db cf       	rjmp	.-74     	; 0x25b8 <conv_brk+0x108>
    2602:	b5 01       	movw	r22, r10
    2604:	ee d1       	rcall	.+988    	; 0x29e2 <ungetc>
    2606:	81 10       	cpse	r8, r1
    2608:	89 cf       	rjmp	.-238    	; 0x251c <conv_brk+0x6c>
    260a:	e1 14       	cp	r14, r1
    260c:	f1 04       	cpc	r15, r1
    260e:	11 f0       	breq	.+4      	; 0x2614 <conv_brk+0x164>
    2610:	d7 01       	movw	r26, r14
    2612:	1c 92       	st	X, r1
    2614:	c8 01       	movw	r24, r16
    2616:	15 c0       	rjmp	.+42     	; 0x2642 <conv_brk+0x192>
    2618:	42 2f       	mov	r20, r18
    261a:	46 95       	lsr	r20
    261c:	46 95       	lsr	r20
    261e:	46 95       	lsr	r20
    2620:	d6 01       	movw	r26, r12
    2622:	a4 0f       	add	r26, r20
    2624:	b1 1d       	adc	r27, r1
    2626:	42 2f       	mov	r20, r18
    2628:	47 70       	andi	r20, 0x07	; 7
    262a:	8b 01       	movw	r16, r22
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <conv_brk+0x182>
    262e:	00 0f       	add	r16, r16
    2630:	11 1f       	adc	r17, r17
    2632:	4a 95       	dec	r20
    2634:	e2 f7       	brpl	.-8      	; 0x262e <conv_brk+0x17e>
    2636:	a8 01       	movw	r20, r16
    2638:	5c 91       	ld	r21, X
    263a:	45 2b       	or	r20, r21
    263c:	4c 93       	st	X, r20
    263e:	62 2e       	mov	r6, r18
    2640:	a4 cf       	rjmp	.-184    	; 0x258a <conv_brk+0xda>
    2642:	a0 96       	adiw	r28, 0x20	; 32
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	df 90       	pop	r13
    265c:	cf 90       	pop	r12
    265e:	bf 90       	pop	r11
    2660:	af 90       	pop	r10
    2662:	9f 90       	pop	r9
    2664:	8f 90       	pop	r8
    2666:	7f 90       	pop	r7
    2668:	6f 90       	pop	r6
    266a:	5f 90       	pop	r5
    266c:	08 95       	ret

0000266e <vfscanf>:
    266e:	5f 92       	push	r5
    2670:	6f 92       	push	r6
    2672:	7f 92       	push	r7
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	af 92       	push	r10
    267a:	bf 92       	push	r11
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	6c 01       	movw	r12, r24
    268e:	eb 01       	movw	r28, r22
    2690:	5a 01       	movw	r10, r20
    2692:	fc 01       	movw	r30, r24
    2694:	17 82       	std	Z+7, r1	; 0x07
    2696:	16 82       	std	Z+6, r1	; 0x06
    2698:	51 2c       	mov	r5, r1
    269a:	f6 01       	movw	r30, r12
    269c:	e3 80       	ldd	r14, Z+3	; 0x03
    269e:	fe 01       	movw	r30, r28
    26a0:	e3 fc       	sbrc	r14, 3
    26a2:	85 91       	lpm	r24, Z+
    26a4:	e3 fe       	sbrs	r14, 3
    26a6:	81 91       	ld	r24, Z+
    26a8:	18 2f       	mov	r17, r24
    26aa:	ef 01       	movw	r28, r30
    26ac:	88 23       	and	r24, r24
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <vfscanf+0x44>
    26b0:	e0 c0       	rjmp	.+448    	; 0x2872 <vfscanf+0x204>
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	f3 d0       	rcall	.+486    	; 0x289c <isspace>
    26b6:	89 2b       	or	r24, r25
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <vfscanf+0x52>
    26ba:	c6 01       	movw	r24, r12
    26bc:	59 de       	rcall	.-846    	; 0x2370 <skip_spaces>
    26be:	ed cf       	rjmp	.-38     	; 0x269a <vfscanf+0x2c>
    26c0:	15 32       	cpi	r17, 0x25	; 37
    26c2:	41 f4       	brne	.+16     	; 0x26d4 <vfscanf+0x66>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e3 fc       	sbrc	r14, 3
    26c8:	15 91       	lpm	r17, Z+
    26ca:	e3 fe       	sbrs	r14, 3
    26cc:	11 91       	ld	r17, Z+
    26ce:	ef 01       	movw	r28, r30
    26d0:	15 32       	cpi	r17, 0x25	; 37
    26d2:	71 f4       	brne	.+28     	; 0x26f0 <vfscanf+0x82>
    26d4:	c6 01       	movw	r24, r12
    26d6:	0b d1       	rcall	.+534    	; 0x28ee <fgetc>
    26d8:	97 fd       	sbrc	r25, 7
    26da:	c9 c0       	rjmp	.+402    	; 0x286e <vfscanf+0x200>
    26dc:	41 2f       	mov	r20, r17
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	9c 01       	movw	r18, r24
    26e2:	33 27       	eor	r19, r19
    26e4:	24 17       	cp	r18, r20
    26e6:	35 07       	cpc	r19, r21
    26e8:	c1 f2       	breq	.-80     	; 0x269a <vfscanf+0x2c>
    26ea:	b6 01       	movw	r22, r12
    26ec:	7a d1       	rcall	.+756    	; 0x29e2 <ungetc>
    26ee:	c1 c0       	rjmp	.+386    	; 0x2872 <vfscanf+0x204>
    26f0:	1a 32       	cpi	r17, 0x2A	; 42
    26f2:	39 f4       	brne	.+14     	; 0x2702 <vfscanf+0x94>
    26f4:	e3 fc       	sbrc	r14, 3
    26f6:	15 91       	lpm	r17, Z+
    26f8:	e3 fe       	sbrs	r14, 3
    26fa:	11 91       	ld	r17, Z+
    26fc:	ef 01       	movw	r28, r30
    26fe:	01 e0       	ldi	r16, 0x01	; 1
    2700:	01 c0       	rjmp	.+2      	; 0x2704 <vfscanf+0x96>
    2702:	00 e0       	ldi	r16, 0x00	; 0
    2704:	f1 2c       	mov	r15, r1
    2706:	20 ed       	ldi	r18, 0xD0	; 208
    2708:	21 0f       	add	r18, r17
    270a:	2a 30       	cpi	r18, 0x0A	; 10
    270c:	78 f4       	brcc	.+30     	; 0x272c <vfscanf+0xbe>
    270e:	02 60       	ori	r16, 0x02	; 2
    2710:	6f 2d       	mov	r22, r15
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	03 de       	rcall	.-1018   	; 0x2322 <mulacc>
    271c:	f6 2e       	mov	r15, r22
    271e:	fe 01       	movw	r30, r28
    2720:	e3 fc       	sbrc	r14, 3
    2722:	15 91       	lpm	r17, Z+
    2724:	e3 fe       	sbrs	r14, 3
    2726:	11 91       	ld	r17, Z+
    2728:	ef 01       	movw	r28, r30
    272a:	ed cf       	rjmp	.-38     	; 0x2706 <vfscanf+0x98>
    272c:	01 ff       	sbrs	r16, 1
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <vfscanf+0xc8>
    2730:	f1 10       	cpse	r15, r1
    2732:	03 c0       	rjmp	.+6      	; 0x273a <vfscanf+0xcc>
    2734:	9e c0       	rjmp	.+316    	; 0x2872 <vfscanf+0x204>
    2736:	ff 24       	eor	r15, r15
    2738:	fa 94       	dec	r15
    273a:	18 36       	cpi	r17, 0x68	; 104
    273c:	19 f0       	breq	.+6      	; 0x2744 <vfscanf+0xd6>
    273e:	1c 36       	cpi	r17, 0x6C	; 108
    2740:	51 f0       	breq	.+20     	; 0x2756 <vfscanf+0xe8>
    2742:	10 c0       	rjmp	.+32     	; 0x2764 <vfscanf+0xf6>
    2744:	fe 01       	movw	r30, r28
    2746:	e3 fc       	sbrc	r14, 3
    2748:	15 91       	lpm	r17, Z+
    274a:	e3 fe       	sbrs	r14, 3
    274c:	11 91       	ld	r17, Z+
    274e:	ef 01       	movw	r28, r30
    2750:	18 36       	cpi	r17, 0x68	; 104
    2752:	41 f4       	brne	.+16     	; 0x2764 <vfscanf+0xf6>
    2754:	08 60       	ori	r16, 0x08	; 8
    2756:	04 60       	ori	r16, 0x04	; 4
    2758:	fe 01       	movw	r30, r28
    275a:	e3 fc       	sbrc	r14, 3
    275c:	15 91       	lpm	r17, Z+
    275e:	e3 fe       	sbrs	r14, 3
    2760:	11 91       	ld	r17, Z+
    2762:	ef 01       	movw	r28, r30
    2764:	11 23       	and	r17, r17
    2766:	09 f4       	brne	.+2      	; 0x276a <vfscanf+0xfc>
    2768:	84 c0       	rjmp	.+264    	; 0x2872 <vfscanf+0x204>
    276a:	61 2f       	mov	r22, r17
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	86 ef       	ldi	r24, 0xF6	; 246
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c d0       	rcall	.+312    	; 0x28ac <strchr_P>
    2774:	89 2b       	or	r24, r25
    2776:	09 f4       	brne	.+2      	; 0x277a <vfscanf+0x10c>
    2778:	7c c0       	rjmp	.+248    	; 0x2872 <vfscanf+0x204>
    277a:	00 fd       	sbrc	r16, 0
    277c:	07 c0       	rjmp	.+14     	; 0x278c <vfscanf+0x11e>
    277e:	f5 01       	movw	r30, r10
    2780:	80 80       	ld	r8, Z
    2782:	91 80       	ldd	r9, Z+1	; 0x01
    2784:	c5 01       	movw	r24, r10
    2786:	02 96       	adiw	r24, 0x02	; 2
    2788:	5c 01       	movw	r10, r24
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <vfscanf+0x122>
    278c:	81 2c       	mov	r8, r1
    278e:	91 2c       	mov	r9, r1
    2790:	1e 36       	cpi	r17, 0x6E	; 110
    2792:	49 f4       	brne	.+18     	; 0x27a6 <vfscanf+0x138>
    2794:	f6 01       	movw	r30, r12
    2796:	46 81       	ldd	r20, Z+6	; 0x06
    2798:	57 81       	ldd	r21, Z+7	; 0x07
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	20 2f       	mov	r18, r16
    27a0:	c4 01       	movw	r24, r8
    27a2:	b3 dd       	rcall	.-1178   	; 0x230a <putval>
    27a4:	7a cf       	rjmp	.-268    	; 0x269a <vfscanf+0x2c>
    27a6:	13 36       	cpi	r17, 0x63	; 99
    27a8:	a1 f4       	brne	.+40     	; 0x27d2 <vfscanf+0x164>
    27aa:	01 fd       	sbrc	r16, 1
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <vfscanf+0x144>
    27ae:	ff 24       	eor	r15, r15
    27b0:	f3 94       	inc	r15
    27b2:	c6 01       	movw	r24, r12
    27b4:	9c d0       	rcall	.+312    	; 0x28ee <fgetc>
    27b6:	97 fd       	sbrc	r25, 7
    27b8:	5a c0       	rjmp	.+180    	; 0x286e <vfscanf+0x200>
    27ba:	81 14       	cp	r8, r1
    27bc:	91 04       	cpc	r9, r1
    27be:	29 f0       	breq	.+10     	; 0x27ca <vfscanf+0x15c>
    27c0:	f4 01       	movw	r30, r8
    27c2:	80 83       	st	Z, r24
    27c4:	c4 01       	movw	r24, r8
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	4c 01       	movw	r8, r24
    27ca:	fa 94       	dec	r15
    27cc:	f1 10       	cpse	r15, r1
    27ce:	f1 cf       	rjmp	.-30     	; 0x27b2 <vfscanf+0x144>
    27d0:	4a c0       	rjmp	.+148    	; 0x2866 <vfscanf+0x1f8>
    27d2:	1b 35       	cpi	r17, 0x5B	; 91
    27d4:	51 f4       	brne	.+20     	; 0x27ea <vfscanf+0x17c>
    27d6:	9e 01       	movw	r18, r28
    27d8:	a4 01       	movw	r20, r8
    27da:	6f 2d       	mov	r22, r15
    27dc:	c6 01       	movw	r24, r12
    27de:	68 de       	rcall	.-816    	; 0x24b0 <conv_brk>
    27e0:	ec 01       	movw	r28, r24
    27e2:	89 2b       	or	r24, r25
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <vfscanf+0x17a>
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <vfscanf+0x1f8>
    27e8:	39 c0       	rjmp	.+114    	; 0x285c <vfscanf+0x1ee>
    27ea:	c6 01       	movw	r24, r12
    27ec:	c1 dd       	rcall	.-1150   	; 0x2370 <skip_spaces>
    27ee:	97 fd       	sbrc	r25, 7
    27f0:	3e c0       	rjmp	.+124    	; 0x286e <vfscanf+0x200>
    27f2:	1f 36       	cpi	r17, 0x6F	; 111
    27f4:	49 f1       	breq	.+82     	; 0x2848 <vfscanf+0x1da>
    27f6:	28 f4       	brcc	.+10     	; 0x2802 <vfscanf+0x194>
    27f8:	14 36       	cpi	r17, 0x64	; 100
    27fa:	21 f1       	breq	.+72     	; 0x2844 <vfscanf+0x1d6>
    27fc:	19 36       	cpi	r17, 0x69	; 105
    27fe:	39 f1       	breq	.+78     	; 0x284e <vfscanf+0x1e0>
    2800:	25 c0       	rjmp	.+74     	; 0x284c <vfscanf+0x1de>
    2802:	13 37       	cpi	r17, 0x73	; 115
    2804:	71 f0       	breq	.+28     	; 0x2822 <vfscanf+0x1b4>
    2806:	15 37       	cpi	r17, 0x75	; 117
    2808:	e9 f0       	breq	.+58     	; 0x2844 <vfscanf+0x1d6>
    280a:	20 c0       	rjmp	.+64     	; 0x284c <vfscanf+0x1de>
    280c:	81 14       	cp	r8, r1
    280e:	91 04       	cpc	r9, r1
    2810:	29 f0       	breq	.+10     	; 0x281c <vfscanf+0x1ae>
    2812:	f4 01       	movw	r30, r8
    2814:	60 82       	st	Z, r6
    2816:	c4 01       	movw	r24, r8
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	4c 01       	movw	r8, r24
    281c:	fa 94       	dec	r15
    281e:	ff 20       	and	r15, r15
    2820:	59 f0       	breq	.+22     	; 0x2838 <vfscanf+0x1ca>
    2822:	c6 01       	movw	r24, r12
    2824:	64 d0       	rcall	.+200    	; 0x28ee <fgetc>
    2826:	3c 01       	movw	r6, r24
    2828:	97 fd       	sbrc	r25, 7
    282a:	06 c0       	rjmp	.+12     	; 0x2838 <vfscanf+0x1ca>
    282c:	37 d0       	rcall	.+110    	; 0x289c <isspace>
    282e:	89 2b       	or	r24, r25
    2830:	69 f3       	breq	.-38     	; 0x280c <vfscanf+0x19e>
    2832:	b6 01       	movw	r22, r12
    2834:	c3 01       	movw	r24, r6
    2836:	d5 d0       	rcall	.+426    	; 0x29e2 <ungetc>
    2838:	81 14       	cp	r8, r1
    283a:	91 04       	cpc	r9, r1
    283c:	a1 f0       	breq	.+40     	; 0x2866 <vfscanf+0x1f8>
    283e:	f4 01       	movw	r30, r8
    2840:	10 82       	st	Z, r1
    2842:	11 c0       	rjmp	.+34     	; 0x2866 <vfscanf+0x1f8>
    2844:	00 62       	ori	r16, 0x20	; 32
    2846:	03 c0       	rjmp	.+6      	; 0x284e <vfscanf+0x1e0>
    2848:	00 61       	ori	r16, 0x10	; 16
    284a:	01 c0       	rjmp	.+2      	; 0x284e <vfscanf+0x1e0>
    284c:	00 64       	ori	r16, 0x40	; 64
    284e:	20 2f       	mov	r18, r16
    2850:	a4 01       	movw	r20, r8
    2852:	6f 2d       	mov	r22, r15
    2854:	c6 01       	movw	r24, r12
    2856:	a2 dd       	rcall	.-1212   	; 0x239c <conv_int>
    2858:	81 11       	cpse	r24, r1
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <vfscanf+0x1f8>
    285c:	f6 01       	movw	r30, r12
    285e:	83 81       	ldd	r24, Z+3	; 0x03
    2860:	80 73       	andi	r24, 0x30	; 48
    2862:	29 f4       	brne	.+10     	; 0x286e <vfscanf+0x200>
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <vfscanf+0x204>
    2866:	00 fd       	sbrc	r16, 0
    2868:	18 cf       	rjmp	.-464    	; 0x269a <vfscanf+0x2c>
    286a:	53 94       	inc	r5
    286c:	16 cf       	rjmp	.-468    	; 0x269a <vfscanf+0x2c>
    286e:	55 20       	and	r5, r5
    2870:	19 f0       	breq	.+6      	; 0x2878 <vfscanf+0x20a>
    2872:	85 2d       	mov	r24, r5
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	02 c0       	rjmp	.+4      	; 0x287c <vfscanf+0x20e>
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	cf 90       	pop	r12
    288c:	bf 90       	pop	r11
    288e:	af 90       	pop	r10
    2890:	9f 90       	pop	r9
    2892:	8f 90       	pop	r8
    2894:	7f 90       	pop	r7
    2896:	6f 90       	pop	r6
    2898:	5f 90       	pop	r5
    289a:	08 95       	ret

0000289c <isspace>:
    289c:	91 11       	cpse	r25, r1
    289e:	18 c1       	rjmp	.+560    	; 0x2ad0 <__ctype_isfalse>
    28a0:	80 32       	cpi	r24, 0x20	; 32
    28a2:	19 f0       	breq	.+6      	; 0x28aa <isspace+0xe>
    28a4:	89 50       	subi	r24, 0x09	; 9
    28a6:	85 50       	subi	r24, 0x05	; 5
    28a8:	d0 f7       	brcc	.-12     	; 0x289e <isspace+0x2>
    28aa:	08 95       	ret

000028ac <strchr_P>:
    28ac:	fc 01       	movw	r30, r24
    28ae:	05 90       	lpm	r0, Z+
    28b0:	06 16       	cp	r0, r22
    28b2:	21 f0       	breq	.+8      	; 0x28bc <strchr_P+0x10>
    28b4:	00 20       	and	r0, r0
    28b6:	d9 f7       	brne	.-10     	; 0x28ae <strchr_P+0x2>
    28b8:	c0 01       	movw	r24, r0
    28ba:	08 95       	ret
    28bc:	31 97       	sbiw	r30, 0x01	; 1
    28be:	cf 01       	movw	r24, r30
    28c0:	08 95       	ret

000028c2 <strnlen_P>:
    28c2:	fc 01       	movw	r30, r24
    28c4:	05 90       	lpm	r0, Z+
    28c6:	61 50       	subi	r22, 0x01	; 1
    28c8:	70 40       	sbci	r23, 0x00	; 0
    28ca:	01 10       	cpse	r0, r1
    28cc:	d8 f7       	brcc	.-10     	; 0x28c4 <strnlen_P+0x2>
    28ce:	80 95       	com	r24
    28d0:	90 95       	com	r25
    28d2:	8e 0f       	add	r24, r30
    28d4:	9f 1f       	adc	r25, r31
    28d6:	08 95       	ret

000028d8 <strnlen>:
    28d8:	fc 01       	movw	r30, r24
    28da:	61 50       	subi	r22, 0x01	; 1
    28dc:	70 40       	sbci	r23, 0x00	; 0
    28de:	01 90       	ld	r0, Z+
    28e0:	01 10       	cpse	r0, r1
    28e2:	d8 f7       	brcc	.-10     	; 0x28da <strnlen+0x2>
    28e4:	80 95       	com	r24
    28e6:	90 95       	com	r25
    28e8:	8e 0f       	add	r24, r30
    28ea:	9f 1f       	adc	r25, r31
    28ec:	08 95       	ret

000028ee <fgetc>:
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	ec 01       	movw	r28, r24
    28f4:	2b 81       	ldd	r18, Y+3	; 0x03
    28f6:	20 ff       	sbrs	r18, 0
    28f8:	33 c0       	rjmp	.+102    	; 0x2960 <fgetc+0x72>
    28fa:	26 ff       	sbrs	r18, 6
    28fc:	0a c0       	rjmp	.+20     	; 0x2912 <fgetc+0x24>
    28fe:	2f 7b       	andi	r18, 0xBF	; 191
    2900:	2b 83       	std	Y+3, r18	; 0x03
    2902:	8e 81       	ldd	r24, Y+6	; 0x06
    2904:	9f 81       	ldd	r25, Y+7	; 0x07
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	9f 83       	std	Y+7, r25	; 0x07
    290a:	8e 83       	std	Y+6, r24	; 0x06
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	29 c0       	rjmp	.+82     	; 0x2964 <fgetc+0x76>
    2912:	22 ff       	sbrs	r18, 2
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <fgetc+0x46>
    2916:	e8 81       	ld	r30, Y
    2918:	f9 81       	ldd	r31, Y+1	; 0x01
    291a:	80 81       	ld	r24, Z
    291c:	08 2e       	mov	r0, r24
    291e:	00 0c       	add	r0, r0
    2920:	99 0b       	sbc	r25, r25
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	19 f4       	brne	.+6      	; 0x292c <fgetc+0x3e>
    2926:	20 62       	ori	r18, 0x20	; 32
    2928:	2b 83       	std	Y+3, r18	; 0x03
    292a:	1a c0       	rjmp	.+52     	; 0x2960 <fgetc+0x72>
    292c:	31 96       	adiw	r30, 0x01	; 1
    292e:	f9 83       	std	Y+1, r31	; 0x01
    2930:	e8 83       	st	Y, r30
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <fgetc+0x62>
    2934:	ea 85       	ldd	r30, Y+10	; 0x0a
    2936:	fb 85       	ldd	r31, Y+11	; 0x0b
    2938:	19 95       	eicall
    293a:	97 ff       	sbrs	r25, 7
    293c:	09 c0       	rjmp	.+18     	; 0x2950 <fgetc+0x62>
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	11 f0       	breq	.+4      	; 0x2948 <fgetc+0x5a>
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	01 c0       	rjmp	.+2      	; 0x294a <fgetc+0x5c>
    2948:	80 e1       	ldi	r24, 0x10	; 16
    294a:	82 2b       	or	r24, r18
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	08 c0       	rjmp	.+16     	; 0x2960 <fgetc+0x72>
    2950:	2e 81       	ldd	r18, Y+6	; 0x06
    2952:	3f 81       	ldd	r19, Y+7	; 0x07
    2954:	2f 5f       	subi	r18, 0xFF	; 255
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	3f 83       	std	Y+7, r19	; 0x07
    295a:	2e 83       	std	Y+6, r18	; 0x06
    295c:	99 27       	eor	r25, r25
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <fgetc+0x76>
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	9f ef       	ldi	r25, 0xFF	; 255
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	08 95       	ret

0000296a <fputc>:
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	fb 01       	movw	r30, r22
    2974:	23 81       	ldd	r18, Z+3	; 0x03
    2976:	21 fd       	sbrc	r18, 1
    2978:	03 c0       	rjmp	.+6      	; 0x2980 <fputc+0x16>
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	9f ef       	ldi	r25, 0xFF	; 255
    297e:	2c c0       	rjmp	.+88     	; 0x29d8 <fputc+0x6e>
    2980:	22 ff       	sbrs	r18, 2
    2982:	16 c0       	rjmp	.+44     	; 0x29b0 <fputc+0x46>
    2984:	46 81       	ldd	r20, Z+6	; 0x06
    2986:	57 81       	ldd	r21, Z+7	; 0x07
    2988:	24 81       	ldd	r18, Z+4	; 0x04
    298a:	35 81       	ldd	r19, Z+5	; 0x05
    298c:	42 17       	cp	r20, r18
    298e:	53 07       	cpc	r21, r19
    2990:	44 f4       	brge	.+16     	; 0x29a2 <fputc+0x38>
    2992:	a0 81       	ld	r26, Z
    2994:	b1 81       	ldd	r27, Z+1	; 0x01
    2996:	9d 01       	movw	r18, r26
    2998:	2f 5f       	subi	r18, 0xFF	; 255
    299a:	3f 4f       	sbci	r19, 0xFF	; 255
    299c:	31 83       	std	Z+1, r19	; 0x01
    299e:	20 83       	st	Z, r18
    29a0:	8c 93       	st	X, r24
    29a2:	26 81       	ldd	r18, Z+6	; 0x06
    29a4:	37 81       	ldd	r19, Z+7	; 0x07
    29a6:	2f 5f       	subi	r18, 0xFF	; 255
    29a8:	3f 4f       	sbci	r19, 0xFF	; 255
    29aa:	37 83       	std	Z+7, r19	; 0x07
    29ac:	26 83       	std	Z+6, r18	; 0x06
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <fputc+0x6e>
    29b0:	8b 01       	movw	r16, r22
    29b2:	ec 01       	movw	r28, r24
    29b4:	fb 01       	movw	r30, r22
    29b6:	00 84       	ldd	r0, Z+8	; 0x08
    29b8:	f1 85       	ldd	r31, Z+9	; 0x09
    29ba:	e0 2d       	mov	r30, r0
    29bc:	19 95       	eicall
    29be:	89 2b       	or	r24, r25
    29c0:	e1 f6       	brne	.-72     	; 0x297a <fputc+0x10>
    29c2:	d8 01       	movw	r26, r16
    29c4:	16 96       	adiw	r26, 0x06	; 6
    29c6:	8d 91       	ld	r24, X+
    29c8:	9c 91       	ld	r25, X
    29ca:	17 97       	sbiw	r26, 0x07	; 7
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	17 96       	adiw	r26, 0x07	; 7
    29d0:	9c 93       	st	X, r25
    29d2:	8e 93       	st	-X, r24
    29d4:	16 97       	sbiw	r26, 0x06	; 6
    29d6:	ce 01       	movw	r24, r28
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <ungetc>:
    29e2:	fb 01       	movw	r30, r22
    29e4:	23 81       	ldd	r18, Z+3	; 0x03
    29e6:	20 ff       	sbrs	r18, 0
    29e8:	12 c0       	rjmp	.+36     	; 0x2a0e <ungetc+0x2c>
    29ea:	26 fd       	sbrc	r18, 6
    29ec:	10 c0       	rjmp	.+32     	; 0x2a0e <ungetc+0x2c>
    29ee:	8f 3f       	cpi	r24, 0xFF	; 255
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	93 07       	cpc	r25, r19
    29f4:	61 f0       	breq	.+24     	; 0x2a0e <ungetc+0x2c>
    29f6:	82 83       	std	Z+2, r24	; 0x02
    29f8:	2f 7d       	andi	r18, 0xDF	; 223
    29fa:	20 64       	ori	r18, 0x40	; 64
    29fc:	23 83       	std	Z+3, r18	; 0x03
    29fe:	26 81       	ldd	r18, Z+6	; 0x06
    2a00:	37 81       	ldd	r19, Z+7	; 0x07
    2a02:	21 50       	subi	r18, 0x01	; 1
    2a04:	31 09       	sbc	r19, r1
    2a06:	37 83       	std	Z+7, r19	; 0x07
    2a08:	26 83       	std	Z+6, r18	; 0x06
    2a0a:	99 27       	eor	r25, r25
    2a0c:	08 95       	ret
    2a0e:	8f ef       	ldi	r24, 0xFF	; 255
    2a10:	9f ef       	ldi	r25, 0xFF	; 255
    2a12:	08 95       	ret

00002a14 <__ultoa_invert>:
    2a14:	fa 01       	movw	r30, r20
    2a16:	aa 27       	eor	r26, r26
    2a18:	28 30       	cpi	r18, 0x08	; 8
    2a1a:	51 f1       	breq	.+84     	; 0x2a70 <__ultoa_invert+0x5c>
    2a1c:	20 31       	cpi	r18, 0x10	; 16
    2a1e:	81 f1       	breq	.+96     	; 0x2a80 <__ultoa_invert+0x6c>
    2a20:	e8 94       	clt
    2a22:	6f 93       	push	r22
    2a24:	6e 7f       	andi	r22, 0xFE	; 254
    2a26:	6e 5f       	subi	r22, 0xFE	; 254
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	af 4f       	sbci	r26, 0xFF	; 255
    2a30:	b1 e0       	ldi	r27, 0x01	; 1
    2a32:	3e d0       	rcall	.+124    	; 0x2ab0 <__ultoa_invert+0x9c>
    2a34:	b4 e0       	ldi	r27, 0x04	; 4
    2a36:	3c d0       	rcall	.+120    	; 0x2ab0 <__ultoa_invert+0x9c>
    2a38:	67 0f       	add	r22, r23
    2a3a:	78 1f       	adc	r23, r24
    2a3c:	89 1f       	adc	r24, r25
    2a3e:	9a 1f       	adc	r25, r26
    2a40:	a1 1d       	adc	r26, r1
    2a42:	68 0f       	add	r22, r24
    2a44:	79 1f       	adc	r23, r25
    2a46:	8a 1f       	adc	r24, r26
    2a48:	91 1d       	adc	r25, r1
    2a4a:	a1 1d       	adc	r26, r1
    2a4c:	6a 0f       	add	r22, r26
    2a4e:	71 1d       	adc	r23, r1
    2a50:	81 1d       	adc	r24, r1
    2a52:	91 1d       	adc	r25, r1
    2a54:	a1 1d       	adc	r26, r1
    2a56:	20 d0       	rcall	.+64     	; 0x2a98 <__ultoa_invert+0x84>
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <__ultoa_invert+0x48>
    2a5a:	68 94       	set
    2a5c:	3f 91       	pop	r19
    2a5e:	2a e0       	ldi	r18, 0x0A	; 10
    2a60:	26 9f       	mul	r18, r22
    2a62:	11 24       	eor	r1, r1
    2a64:	30 19       	sub	r19, r0
    2a66:	30 5d       	subi	r19, 0xD0	; 208
    2a68:	31 93       	st	Z+, r19
    2a6a:	de f6       	brtc	.-74     	; 0x2a22 <__ultoa_invert+0xe>
    2a6c:	cf 01       	movw	r24, r30
    2a6e:	08 95       	ret
    2a70:	46 2f       	mov	r20, r22
    2a72:	47 70       	andi	r20, 0x07	; 7
    2a74:	40 5d       	subi	r20, 0xD0	; 208
    2a76:	41 93       	st	Z+, r20
    2a78:	b3 e0       	ldi	r27, 0x03	; 3
    2a7a:	0f d0       	rcall	.+30     	; 0x2a9a <__ultoa_invert+0x86>
    2a7c:	c9 f7       	brne	.-14     	; 0x2a70 <__ultoa_invert+0x5c>
    2a7e:	f6 cf       	rjmp	.-20     	; 0x2a6c <__ultoa_invert+0x58>
    2a80:	46 2f       	mov	r20, r22
    2a82:	4f 70       	andi	r20, 0x0F	; 15
    2a84:	40 5d       	subi	r20, 0xD0	; 208
    2a86:	4a 33       	cpi	r20, 0x3A	; 58
    2a88:	18 f0       	brcs	.+6      	; 0x2a90 <__ultoa_invert+0x7c>
    2a8a:	49 5d       	subi	r20, 0xD9	; 217
    2a8c:	31 fd       	sbrc	r19, 1
    2a8e:	40 52       	subi	r20, 0x20	; 32
    2a90:	41 93       	st	Z+, r20
    2a92:	02 d0       	rcall	.+4      	; 0x2a98 <__ultoa_invert+0x84>
    2a94:	a9 f7       	brne	.-22     	; 0x2a80 <__ultoa_invert+0x6c>
    2a96:	ea cf       	rjmp	.-44     	; 0x2a6c <__ultoa_invert+0x58>
    2a98:	b4 e0       	ldi	r27, 0x04	; 4
    2a9a:	a6 95       	lsr	r26
    2a9c:	97 95       	ror	r25
    2a9e:	87 95       	ror	r24
    2aa0:	77 95       	ror	r23
    2aa2:	67 95       	ror	r22
    2aa4:	ba 95       	dec	r27
    2aa6:	c9 f7       	brne	.-14     	; 0x2a9a <__ultoa_invert+0x86>
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	61 05       	cpc	r22, r1
    2aac:	71 05       	cpc	r23, r1
    2aae:	08 95       	ret
    2ab0:	9b 01       	movw	r18, r22
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	0a 2e       	mov	r0, r26
    2ab6:	06 94       	lsr	r0
    2ab8:	57 95       	ror	r21
    2aba:	47 95       	ror	r20
    2abc:	37 95       	ror	r19
    2abe:	27 95       	ror	r18
    2ac0:	ba 95       	dec	r27
    2ac2:	c9 f7       	brne	.-14     	; 0x2ab6 <__ultoa_invert+0xa2>
    2ac4:	62 0f       	add	r22, r18
    2ac6:	73 1f       	adc	r23, r19
    2ac8:	84 1f       	adc	r24, r20
    2aca:	95 1f       	adc	r25, r21
    2acc:	a0 1d       	adc	r26, r0
    2ace:	08 95       	ret

00002ad0 <__ctype_isfalse>:
    2ad0:	99 27       	eor	r25, r25
    2ad2:	88 27       	eor	r24, r24

00002ad4 <__ctype_istrue>:
    2ad4:	08 95       	ret

00002ad6 <eeprom_read_byte>:
    2ad6:	f9 99       	sbic	0x1f, 1	; 31
    2ad8:	fe cf       	rjmp	.-4      	; 0x2ad6 <eeprom_read_byte>
    2ada:	92 bd       	out	0x22, r25	; 34
    2adc:	81 bd       	out	0x21, r24	; 33
    2ade:	f8 9a       	sbi	0x1f, 0	; 31
    2ae0:	99 27       	eor	r25, r25
    2ae2:	80 b5       	in	r24, 0x20	; 32
    2ae4:	08 95       	ret

00002ae6 <eeprom_update_byte>:
    2ae6:	26 2f       	mov	r18, r22

00002ae8 <eeprom_update_r18>:
    2ae8:	f9 99       	sbic	0x1f, 1	; 31
    2aea:	fe cf       	rjmp	.-4      	; 0x2ae8 <eeprom_update_r18>
    2aec:	92 bd       	out	0x22, r25	; 34
    2aee:	81 bd       	out	0x21, r24	; 33
    2af0:	f8 9a       	sbi	0x1f, 0	; 31
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	00 b4       	in	r0, 0x20	; 32
    2af6:	02 16       	cp	r0, r18
    2af8:	39 f0       	breq	.+14     	; 0x2b08 <eeprom_update_r18+0x20>
    2afa:	1f ba       	out	0x1f, r1	; 31
    2afc:	20 bd       	out	0x20, r18	; 32
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	fa 9a       	sbi	0x1f, 2	; 31
    2b04:	f9 9a       	sbi	0x1f, 1	; 31
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	08 95       	ret

00002b0a <_exit>:
    2b0a:	f8 94       	cli

00002b0c <__stop_program>:
    2b0c:	ff cf       	rjmp	.-2      	; 0x2b0c <__stop_program>
